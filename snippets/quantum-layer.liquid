{% comment %}
  quantum-layer.liquid
  Core initialization for the CyberCore quantum layer

  @MutationCompatible: All Variants
  @StrategyProfile: quantum-entangled
  @Version: 2.0.0

  Usage:
  {% render 'quantum-layer' %}
{% endcomment %}

{% assign quantum_registry = settings.quantum_registry | default: false %}
{% assign nonce_registry = settings.nonce_registry | default: false %}
{% assign current_date = 'now' | date: '%Y%m%d' %}
{% assign current_blueprint = current_date | append: '-latest' %}

<!-- Quantum effects layer -->
<div class="quantum-effects-layer" aria-hidden="true">
  <!-- Background trauma pattern -->
  <div class="trauma-pattern" data-trauma-type="{{ settings.default_trauma_type | default: 'recursion' }}"></div>
  
  <!-- Memory echo particles -->
  <div class="memory-echo-particles"></div>
  
  <!-- Coherence field -->
  <div class="coherence-field" data-coherence-level="0.5"></div>
</div>

{% if quantum_registry %}
<script type="application/json" id="quantum-registry-data">
  {{ quantum_registry }}
</script>
{% endif %}

{% if nonce_registry %}
<script type="application/json" id="nonce-registry-data">
  {{ nonce_registry }}
</script>
{% endif %}

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize quantum layer
    const quantumLayer = {
      init: function() {
        // Check for user's trauma profile
        this.checkTraumaProfile();
        
        // Setup event listeners
        this.setupEvents();
        
        // Initialize effects
        this.initEffects();
      },
      
      checkTraumaProfile: function() {
        const userTrauma = localStorage.getItem('voidbloom_primary_trauma');
        const coherenceBaseline = parseFloat(localStorage.getItem('voidbloom_coherence_baseline') || '0.5');
        
        if (userTrauma) {
          // Update the trauma pattern
          const traumaPattern = document.querySelector('.trauma-pattern');
          if (traumaPattern) {
            traumaPattern.setAttribute('data-trauma-type', userTrauma);
            traumaPattern.className = 'trauma-pattern trauma-' + userTrauma;
          }
          
          // Update coherence field
          const coherenceField = document.querySelector('.coherence-field');
          if (coherenceField) {
            coherenceField.setAttribute('data-coherence-level', coherenceBaseline.toString());
            coherenceField.style.setProperty('--coherence', coherenceBaseline);
          }
          
          // Add a class to the body
          document.body.classList.add('trauma-initialized');
          document.body.setAttribute('data-trauma-type', userTrauma);
          document.body.setAttribute('data-coherence-level', coherenceBaseline.toString());
        }
      },
      
      initEffects: function() {
        // Memory echo particles
        this.initMemoryEchoParticles();
      },
      
      initMemoryEchoParticles: function() {
        const particlesContainer = document.querySelector('.memory-echo-particles');
        if (!particlesContainer) return;
        
        // Number of particles based on device performance
        const isHighPerformance = !navigator.userAgent.match(/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i);
        const particleCount = isHighPerformance ? 20 : 10;
        
        // Create particles
        for (let i = 0; i < particleCount; i++) {
          const particle = document.createElement('div');
          particle.className = 'memory-particle';
          
          // Random size
          const size = Math.random() * 6 + 2;
          
          // Random position
          const posX = Math.random() * 100;
          const posY = Math.random() * 100;
          
          // Apply styles
          particle.style.width = `${size}px`;
          particle.style.height = `${size}px`;
          particle.style.left = `${posX}%`;
          particle.style.top = `${posY}%`;
          
          // Add to container
          particlesContainer.appendChild(particle);
        }
      },
      
      setupEvents: function() {
        // Listen for trauma profile changes
        if (window.NeuralBus) {
          // When ritual is completed, update the quantum layer
          window.NeuralBus.subscribe('ritual:completed', this.handleRitualCompleted.bind(this));
          
          // When coherence changes
          window.NeuralBus.subscribe('coherence:updated', this.handleCoherenceUpdate.bind(this));
        }
      },
      
      handleRitualCompleted: function(data) {
        if (!data || !data.primaryTrauma) return;
        
        // Update trauma pattern
        const traumaPattern = document.querySelector('.trauma-pattern');
        if (traumaPattern) {
          traumaPattern.className = 'trauma-pattern';
          traumaPattern.classList.add(`trauma-${data.primaryTrauma}`);
          traumaPattern.setAttribute('data-trauma-type', data.primaryTrauma);
        }
        
        // Update body classes
        document.body.classList.add('trauma-initialized');
        document.body.setAttribute('data-trauma-type', data.primaryTrauma);
        
        if (data.coherenceBaseline) {
          document.body.setAttribute('data-coherence-level', data.coherenceBaseline.toString());
          
          // Update coherence field
          const coherenceField = document.querySelector('.coherence-field');
          if (coherenceField) {
            coherenceField.setAttribute('data-coherence-level', data.coherenceBaseline.toString());
            coherenceField.style.setProperty('--coherence', data.coherenceBaseline);
          }
        }
      },
      
      handleCoherenceUpdate: function(data) {
        if (!data || typeof data.value !== 'number') return;
        
        // Update coherence field
        const coherenceField = document.querySelector('.coherence-field');
        if (coherenceField) {
          coherenceField.setAttribute('data-coherence-level', data.value.toString());
          coherenceField.style.setProperty('--coherence', data.value);
        }
        
        // Update body attribute
        document.body.setAttribute('data-coherence-level', data.value.toString());
      }
    };
    
    // Initialize the quantum layer
    quantumLayer.init();
    
    // Expose to global scope
    window.quantumLayer = quantumLayer;
  });
</script>

<style>
  .quantum-effects-layer {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: 9000;
  }

  .trauma-pattern {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: transparent;
    opacity: 0.5;
    transition: opacity 0.3s ease;
    pointer-events: none;
  }

  .memory-echo-particles {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
  }

  .memory-particle {
    position: absolute;
    background-color: rgba(0, 255, 255, 0.8);
    border-radius: 50%;
    animation: particle-float 3s infinite ease-in-out;
  }

  @keyframes particle-float {
    0% {
      transform: translateY(0);
    }
    50% {
      transform: translateY(-10px);
    }
    100% {
      transform: translateY(0);
    }
  }

  .coherence-field {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    opacity: var(--coherence, 0.5);
    pointer-events: none;
  }
</style>
