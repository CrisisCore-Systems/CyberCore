{% comment %}
  QUANTUM-LAYER.LIQUID - VoidBloom Quantum Reality Interface
  Core visualization system for trauma-encoded quantum effects

  @MutationCompatible: All Variants
  @StrategyProfile: quantum-entangled
  @Version: 3.7.1
  @Coherence: 92.4%

  // CrisisCore Systems
  // Last Signal Sync: {{ "now" | date: "%Y-%m-%dT%H:%M:%S.%L" }}Z
  // Active Trauma Protocol: {{ settings.default_trauma_type | default: "recursion" }}
{% endcomment %}

{% comment %}
  Quantum Effect Layer

  Accepts:
  - trauma_type: {String} Type of trauma encoding (recursion, fragmentation, etc.)
  - intensity: {Number} Intensity level of the effect (0-1)
  - class: {String} Additional classes for container
{% endcomment %}

{% assign trauma_type = trauma_type | default: settings.default_trauma_type | default: 'recursion' %}
{% assign intensity = intensity | default: settings.trauma_intensity | default: 0.5 %}

<div class="quantum-layer"
     data-trauma-encoded="true"
     data-trauma-type="{{ trauma_type }}"
     data-intensity="{{ intensity }}"
     {% if class %}class="{{ class }}"{% endif %}>
  <div class="quantum-layer__inner"></div>
</div>

<div class="quantum-layer"
     data-trauma-type="{{ settings.default_trauma_type | default: 'recursion' }}"
     data-intensity="{{ settings.trauma_intensity | default: 0.7 }}"
     data-phase="{{ settings.default_memory_phase | default: 'cyber-lotus' }}"
     data-node-type="quantum-reality-interface">

  <!-- Quantum Particle Matrix -->
  <div class="quantum-particle-matrix"
       data-particle-count="{{ settings.particle_density | default: 150 }}"
       data-particle-behavior="{{ settings.particle_behavior | default: 'entangled' }}">
    {% for i in (1..settings.particle_density) %}
      <div class="quantum-particle"
           style="--x: {{ forloop.index0 | times: 0.618 | modulo: 1 }};
                  --y: {{ forloop.index0 | times: 0.382 | modulo: 1 }};
                  --speed: {{ forloop.index0 | modulo: 3 | plus: 1 }};
                  --size: {{ forloop.index0 | modulo: 2 | plus: 0.5 }}px;">
      </div>
    {% endfor %}
  </div>

  <!-- Dimensional Grid System -->
  <div class="dimensional-grid"
       data-grid-type="hexagonal"
       data-line-density="{{ settings.grid_density | default: 5 }}">
    {% for i in (1..settings.grid_density) %}
      <div class="grid-line horizontal"
           style="--delay: {{ i | times: 0.15 }}s;
                  --opacity: {{ 0.1 | divided_by: i }};"></div>
      <div class="grid-line vertical"
           style="--delay: {{ i | times: 0.15 | plus: 0.1 }}s;
                  --opacity: {{ 0.1 | divided_by: i }};"></div>
    {% endfor %}
  </div>

  <!-- Quantum Entanglement Effects -->
  <div class="entanglement-effects">
    <div class="entanglement-ripple" data-ripple-type="primary"></div>
    <div class="entanglement-ripple" data-ripple-type="secondary"></div>
    <div class="entanglement-ripple" data-ripple-type="tertiary"></div>
  </div>

  <!-- Neural Signal Overlay -->
  <div class="neural-signal-overlay"
       data-signal-pattern="{{ settings.signal_pattern | default: 'fractal' }}">
    <div class="signal-line primary"></div>
    <div class="signal-line secondary"></div>
    <div class="signal-line tertiary"></div>
  </div>

  <!-- Reality Stabilization Anchor -->
  <div class="reality-anchor"
       data-stabilization-strength="{{ settings.stabilization_strength | default: 0.85 }}">
    <div class="anchor-core"></div>
    <div class="anchor-resonance"></div>
  </div>
</div>

<style>
  .quantum-layer {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: 0;
    overflow: hidden;
  }

  .quantum-particle-matrix {
    position: absolute;
    width: 100%;
    height: 100%;
    transform-style: preserve-3d;
  }

  .quantum-particle {
    position: absolute;
    background: var(--trauma-color);
    border-radius: 50%;
    transform:
      translate(
        calc(var(--x) * 100vw),
        calc(var(--y) * 100vh)
      );
    animation:
      particle-drift calc(var(--speed) * 5s) infinite linear,
      particle-pulse calc(var(--speed) * 2s) infinite ease-in-out;
  }

  @keyframes particle-drift {
    0% { transform: translate(0, 0); }
    100% { transform: translate(100vw, 100vh); }
  }

  @keyframes particle-pulse {
    0%, 100% { opacity: 0.3; transform: scale(0.8); }
    50% { opacity: 0.7; transform: scale(1.2); }
  }

  .dimensional-grid {
    position: absolute;
    width: 100%;
    height: 100%;
    background-image:
      repeating-linear-gradient(
        0deg,
        transparent 0,
        transparent 24px,
        var(--trauma-color) 24px,
        var(--trauma-color) 48px
      ),
      repeating-linear-gradient(
        90deg,
        transparent 0,
        transparent 24px,
        var(--trauma-color) 24px,
        var(--trauma-color) 48px
      );
    opacity: 0.05;
    animation: grid-scan 30s linear infinite;
  }

  @keyframes grid-scan {
    from { background-position: 0 0; }
    to { background-position: 48px 48px; }
  }

  .entanglement-effects {
    position: absolute;
    width: 100%;
    height: 100%;
  }

  .entanglement-ripple {
    position: absolute;
    border: 1px solid var(--trauma-color);
    border-radius: 50%;
    animation: ripple-expand 15s infinite linear;
  }

  @keyframes ripple-expand {
    from { transform: scale(0); opacity: 0.8; }
    to { transform: scale(10); opacity: 0; }
  }

  .neural-signal-overlay {
    position: absolute;
    width: 100%;
    height: 100%;
  }

  .signal-line {
    position: absolute;
    background: linear-gradient(
      90deg,
      transparent,
      var(--trauma-color),
      transparent
    );
    height: 1px;
    animation: signal-scan 15s infinite linear;
  }

  @keyframes signal-scan {
    from { transform: translateX(-100%); }
    to { transform: translateX(100%); }
  }

  .reality-anchor {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }

  .anchor-core {
    width: 10px;
    height: 10px;
    background: var(--trauma-color);
    border-radius: 50%;
    animation: anchor-pulse 5s infinite ease-in-out;
  }

  @keyframes anchor-pulse {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.5); }
  }
</style>

<script>
  class QuantumLayerSystem {
    constructor() {
      this.node = document.querySelector('.quantum-layer');
      this.init();
    }

    init() {
      this.registerObservers();
      this.bindEvents();
    }

    registerObservers() {
      this.intersectionObserver = new IntersectionObserver(entries => {
        entries.forEach(entry => {
          entry.target.style.opacity = entry.isIntersecting ? 1 : 0;
        });
      });

      this.intersectionObserver.observe(this.node);
    }

    bindEvents() {
      document.addEventListener('trauma:activated', this.handleTraumaChange);
      window.addEventListener('resize', this.handleResize);
    }

    handleTraumaChange = (event) => {
      this.node.setAttribute('data-trauma-type', event.detail.type);
      this.node.style.setProperty('--trauma-color', getComputedStyle(document.documentElement)
        .getPropertyValue(`--trauma-${event.detail.type}-color`));
    }

    handleResize = () => {
      this.node.querySelectorAll('.quantum-particle').forEach(particle => {
        particle.style.setProperty('--x', Math.random());
        particle.style.setProperty('--y', Math.random());
      });
    }

    destroy() {
      this.intersectionObserver.disconnect();
      document.removeEventListener('trauma:activated', this.handleTraumaChange);
      window.removeEventListener('resize', this.handleResize);
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    if (window.NeuralBus) {
      NeuralBus.registerSystem('quantum-layer', new QuantumLayerSystem());
    }
  });
</script>
