{% comment %}
  QUANTUM LAYER

  Creates a dynamic visual layer that responds to trauma patterns and user interactions.
  This layer provides the visual foundation for the VoidBloom theme experience.

  @MutationCompatible: VoidBloom
  @StrategyProfile: quantum-entangled
  @Version: 1.0.0
{% endcomment %}

<div
  class="quantum-layer"
  data-quantum-layer
  data-trauma-pattern="{{ product.metafields.voidbloom.trauma_pattern | default: 'none' }}"
  data-intensity="{{ product.metafields.voidbloom.intensity | default: '5' }}"
>
  <div class="quantum-layer__background"></div>
  <div class="quantum-layer__grid"></div>
  <div class="quantum-layer__particles"></div>
  <div class="quantum-layer__glitch"></div>
</div>

<style>
  .quantum-layer {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
    pointer-events: none;
    overflow: hidden;
  }

  .quantum-layer__background {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: var(--vb-color-background);
    opacity: 1;
    transition: opacity 0.5s ease;
  }

  .quantum-layer__grid {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image: linear-gradient(rgba(0, 255, 255, 0.05) 1px, transparent 1px),
                      linear-gradient(90deg, rgba(0, 255, 255, 0.05) 1px, transparent 1px);
    background-size: 20px 20px;
    opacity: 0.3;
    transform: perspective(500px) rotateX(60deg) scale(1.5);
    transform-origin: center bottom;
    transition: opacity 0.5s ease, transform 1s ease;
  }

  .quantum-layer__particles {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image: radial-gradient(rgba(0, 255, 255, 0.1) 1px, transparent 1px);
    background-size: 40px 40px;
    opacity: 0.2;
    animation: particles-float 60s linear infinite;
  }

  @keyframes particles-float {
    0% {
      background-position: 0 0;
    }
    100% {
      background-position: 100px 100px;
    }
  }

  .quantum-layer__glitch {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: transparent;
    opacity: 0;
    pointer-events: none;
    mix-blend-mode: overlay;
  }

  /* Trauma pattern specific styles */

  /* Fragmentation - Broken, separated pieces */
  .quantum-layer[data-trauma-pattern="fragmentation"] .quantum-layer__grid {
    background-size: 15px 15px;
    animation: grid-shift 30s linear infinite;
    opacity: 0.4;
  }

  .quantum-layer[data-trauma-pattern="fragmentation"] .quantum-layer__glitch {
    opacity: 0.2;
    background: linear-gradient(45deg, transparent 30%, rgba(0, 255, 255, 0.1) 31%, rgba(0, 255, 255, 0.1) 33%, transparent 34%);
    background-size: 10px 10px;
    animation: glitch-shift 0.3s steps(2) infinite;
  }

  @keyframes grid-shift {
    0% {
      background-position: 0 0;
    }
    25% {
      background-position: 5px 0;
    }
    50% {
      background-position: 5px 5px;
    }
    75% {
      background-position: 0 5px;
    }
    100% {
      background-position: 0 0;
    }
  }

  @keyframes glitch-shift {
    0% {
      transform: translate3d(0, 0, 0);
    }
    50% {
      transform: translate3d(2px, -1px, 0);
    }
    100% {
      transform: translate3d(-2px, 1px, 0);
    }
  }

  /* Recursion - Patterns within patterns */
  .quantum-layer[data-trauma-pattern="recursion"] .quantum-layer__grid {
    background-image: repeating-conic-gradient(rgba(0, 255, 255, 0.05) 0%, transparent 5%, transparent 45%, rgba(0, 255, 255, 0.05) 50%);
    background-size: 100px 100px;
    transform: none;
    opacity: 0.4;
  }

  .quantum-layer[data-trauma-pattern="recursion"] .quantum-layer__particles {
    background-image: repeating-radial-gradient(rgba(0, 255, 255, 0.1) 10%, transparent 20%);
    animation: particles-pulse 20s ease-in-out infinite;
  }

  @keyframes particles-pulse {
    0% {
      background-size: 40px 40px;
    }
    50% {
      background-size: 80px 80px;
    }
    100% {
      background-size: 40px 40px;
    }
  }

  /* Abandonment - Empty space, isolation */
  .quantum-layer[data-trauma-pattern="abandonment"] .quantum-layer__grid {
    opacity: 0.15;
    background-size: 40px 40px;
  }

  .quantum-layer[data-trauma-pattern="abandonment"] .quantum-layer__particles {
    opacity: 0.1;
    background-size: 100px 100px;
  }

  .quantum-layer[data-trauma-pattern="abandonment"] .quantum-layer__background {
    background: radial-gradient(circle at center, var(--vb-color-background) 0%, rgba(0, 0, 15, 1) 100%);
  }

  /* Surveillance - Watching, being observed */
  .quantum-layer[data-trauma-pattern="surveillance"] .quantum-layer__grid {
    background-image: linear-gradient(rgba(0, 255, 255, 0.05) 1px, transparent 1px),
                      linear-gradient(90deg, rgba(0, 255, 255, 0.05) 1px, transparent 1px);
    background-size: 10px 10px;
    opacity: 0.2;
  }

  .quantum-layer[data-trauma-pattern="surveillance"] .quantum-layer__particles {
    background-image: radial-gradient(rgba(0, 255, 255, 0.2) 1px, transparent 1px);
    background-size: 30px 30px;
    animation: eye-scan 15s infinite;
  }

  @keyframes eye-scan {
    0%, 100% {
      background-position: 0 0;
    }
    25% {
      background-position: 100% 0;
    }
    50% {
      background-position: 100% 100%;
    }
    75% {
      background-position: 0 100%;
    }
  }

  /* Displacement - Being removed from origin */
  .quantum-layer[data-trauma-pattern="displacement"] .quantum-layer__grid {
    transform: perspective(500px) rotateX(70deg) translateY(30px) scale(2);
    animation: grid-float 15s ease-in-out infinite;
  }

  .quantum-layer[data-trauma-pattern="displacement"] .quantum-layer__particles {
    animation: particles-drift 30s linear infinite;
  }

  @keyframes grid-float {
    0%, 100% {
      transform: perspective(500px) rotateX(70deg) translateY(30px) scale(2);
    }
    50% {
      transform: perspective(500px) rotateX(65deg) translateY(20px) scale(1.8);
    }
  }

  @keyframes particles-drift {
    0% {
      background-position: 0 0;
    }
    100% {
      background-position: 200px -100px;
    }
  }

  /* Dissolution - Fading, losing cohesion */
  .quantum-layer[data-trauma-pattern="dissolution"] .quantum-layer__grid {
    opacity: 0.2;
    background-image: repeating-linear-gradient(
      to right,
      rgba(0, 255, 255, 0.03),
      rgba(0, 255, 255, 0.03) 1px,
      transparent 1px,
      transparent 20px
    );
    animation: dissolution 20s linear infinite;
  }

  .quantum-layer[data-trauma-pattern="dissolution"] .quantum-layer__particles {
    opacity: 0.15;
    background-image: radial-gradient(rgba(0, 255, 255, 0.05) 1px, transparent 1px);
    background-size: 15px 15px;
    animation: dissolve-pulse 10s ease-in-out infinite;
  }

  @keyframes dissolution {
    0% {
      opacity: 0.1;
    }
    50% {
      opacity: 0.3;
    }
    100% {
      opacity: 0.1;
    }
  }

  @keyframes dissolve-pulse {
    0%, 100% {
      background-size: 15px 15px;
      opacity: 0.15;
    }
    50% {
      background-size: 25px 25px;
      opacity: 0.05;
    }
  }

  /* Intensity modifiers */
  .quantum-layer[data-intensity="1"] .quantum-layer__grid,
  .quantum-layer[data-intensity="1"] .quantum-layer__particles,
  .quantum-layer[data-intensity="1"] .quantum-layer__glitch {
    opacity: 0.1;
  }

  .quantum-layer[data-intensity="10"] .quantum-layer__grid {
    opacity: 0.6;
  }

  .quantum-layer[data-intensity="10"] .quantum-layer__particles {
    opacity: 0.4;
  }

  .quantum-layer[data-intensity="10"] .quantum-layer__glitch {
    opacity: 0.3;
  }
</style>

{% javascript %}
document.addEventListener('DOMContentLoaded', function() {
  const quantumLayer = document.querySelector('[data-quantum-layer]');

  if (quantumLayer) {
    // Initialize trauma pattern
    const initialTraumaPattern = quantumLayer.getAttribute('data-trauma-pattern');
    const initialIntensity = quantumLayer.getAttribute('data-intensity');

    // Initialize Neural Bus connection if available
    if (window.NeuralBus) {
      // Publish initial state
      NeuralBus.publish('trauma:initialized', {
        type: initialTraumaPattern,
        intensity: initialIntensity
      });

      // Subscribe to trauma pattern changes
      NeuralBus.subscribe('trauma:change', function(data) {
        if (data.type) {
          quantumLayer.setAttribute('data-trauma-pattern', data.type);
        }

        if (data.intensity) {
          quantumLayer.setAttribute('data-intensity', data.intensity);
        }

        // Add a temporary class to trigger animations
        quantumLayer.classList.add('quantum-layer--transitioning');
        setTimeout(function() {
          quantumLayer.classList.remove('quantum-layer--transitioning');
        }, 1000);
      });
    }

    // Respond to scroll events
    window.addEventListener('scroll', function() {
      const scrollPercentage = (window.scrollY / (document.body.scrollHeight - window.innerHeight)) * 100;

      // Adjust grid perspective based on scroll
      const gridElement = quantumLayer.querySelector('.quantum-layer__grid');
      if (gridElement) {
        gridElement.style.transform = `perspective(500px) rotateX(${60 + (scrollPercentage * 0.1)}deg) scale(${1.5 + (scrollPercentage * 0.005)})`;
      }

      // Adjust particle opacity based on scroll
      const particlesElement = quantumLayer.querySelector('.quantum-layer__particles');
      if (particlesElement) {
        particlesElement.style.opacity = 0.2 + (scrollPercentage * 0.002);
      }
    });

    // Mouse movement effect
    document.addEventListener('mousemove', function(event) {
      const mouseX = event.clientX / window.innerWidth;
      const mouseY = event.clientY / window.innerHeight;

      // Slight grid movement based on mouse position
      const gridElement = quantumLayer.querySelector('.quantum-layer__grid');
      if (gridElement) {
        gridElement.style.backgroundPosition = `${mouseX * 10}px ${mouseY * 10}px`;
      }

      // Particles follow mouse slightly
      const particlesElement = quantumLayer.querySelector('.quantum-layer__particles');
      if (particlesElement) {
        particlesElement.style.backgroundPosition = `${mouseX * 20}px ${mouseY * 20}px`;
      }
    });

    // Glitch effect on click
    document.addEventListener('click', function() {
      const glitchElement = quantumLayer.querySelector('.quantum-layer__glitch');
      if (glitchElement) {
        glitchElement.style.opacity = '0.3';
        setTimeout(function() {
          glitchElement.style.opacity = '';
        }, 300);
      }
    });
  }
});
{% endjavascript %}
