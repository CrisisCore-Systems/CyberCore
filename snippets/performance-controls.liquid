{% comment %}
  Performance controls - Allows users to adjust visual effects based on device capabilities
  Usage: {% render 'performance-controls' %}
{% endcomment %}

<div class="voidbloom-performance-controls" data-performance-controls>
  <div class="controls-toggle" data-controls-toggle>
    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path d="M12 16C14.2091 16 16 14.2091 16 12C16 9.79086 14.2091 8 12 8C9.79086 8 8 9.79086 8 12C8 14.2091 9.79086 16 12 16Z" stroke="currentColor" stroke-width="1.5"/>
      <path d="M12 2V4" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/>
      <path d="M12 20V22" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/>
      <path d="M4 12H2" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/>
      <path d="M22 12H20" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/>
      <path d="M19.8 4.2L18.4 5.6" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/>
      <path d="M5.6 18.4L4.2 19.8" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/>
      <path d="M19.8 19.8L18.4 18.4" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/>
      <path d="M5.6 5.6L4.2 4.2" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/>
    </svg>
    <span class="toggle-label">Visual Effects</span>
  </div>
  
  <div class="controls-panel">
    <div class="panel-header">
      <h3>Memory Visual Effects</h3>
      <button type="button" class="close-panel" data-close-controls>
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M18 6L6 18" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
          <path d="M6 6L18 18" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
      </button>
    </div>
    
    <div class="controls-section">
      <p class="section-info">
        Adjust the intensity of trauma encoding visual effects based on your device performance.
      </p>
      
      <div class="control-item">
        <span class="control-label">Effect Quality</span>
        <div class="quality-buttons">
          <button type="button" class="quality-button" data-quality="low">Low</button>
          <button type="button" class="quality-button" data-quality="medium">Medium</button>
          <button type="button" class="quality-button" data-quality="high">High</button>
        </div>
      </div>
      
      <div class="control-item">
        <label class="toggle-control">
          <span class="toggle-label">Low Performance Mode</span>
          <div class="toggle-switch">
            <input type="checkbox" id="lowPerformanceToggle">
            <span class="toggle-slider"></span>
          </div>
        </label>
        <p class="control-description">Reduces visual effects for better performance on lower-end devices.</p>
      </div>
    </div>
    
    <div class="panel-footer">
      <p class="fps-indicator" data-fps-display>FPS: <span>60</span></p>
      <p class="performance-indicator">Current Quality: <span data-current-quality>High</span></p>
    </div>
  </div>
</div>

<style>
  .voidbloom-performance-controls {
    position: fixed;
    bottom: 20px;
    right: 20px;
    z-index: 1000;
    font-family: var(--font-body-family);
    color: var(--color-text);
  }
  
  .controls-toggle {
    display: flex;
    align-items: center;
    gap: 8px;
    background-color: rgba(var(--color-base-rgb), 0.7);
    backdrop-filter: blur(10px);
    padding: 8px 16px;
    border-radius: 20px;
    cursor: pointer;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
    border: 1px solid rgba(var(--color-border-rgb), 0.2);
    transition: all 0.3s ease;
    opacity: 0.7;
  }
  
  .controls-toggle:hover {
    opacity: 1;
    transform: translateY(-2px);
  }
  
  .toggle-label {
    font-size: 0.875rem;
  }
  
  .controls-panel {
    position: absolute;
    bottom: calc(100% + 10px);
    right: 0;
    width: 300px;
    background-color: rgba(var(--color-base-rgb), 0.9);
    backdrop-filter: blur(15px);
    border-radius: 10px;
    box-shadow: 0 5px 20px rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(var(--color-border-rgb), 0.3);
    padding: 16px;
    display: none;
    opacity: 0;
    transform: translateY(10px);
    transition: opacity 0.3s ease, transform 0.3s ease;
  }
  
  .controls-panel.active {
    display: block;
    opacity: 1;
    transform: translateY(0);
  }
  
  .panel-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 16px;
    padding-bottom: 8px;
    border-bottom: 1px solid rgba(var(--color-border-rgb), 0.2);
  }
  
  .panel-header h3 {
    margin: 0;
    font-size: 1rem;
    font-weight: 500;
  }
  
  .close-panel {
    background: none;
    border: none;
    cursor: pointer;
    color: var(--color-text);
    opacity: 0.7;
    padding: 4px;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .close-panel:hover {
    opacity: 1;
  }
  
  .controls-section {
    margin-bottom: 16px;
  }
  
  .section-info {
    font-size: 0.8125rem;
    opacity: 0.8;
    margin-bottom: 16px;
  }
  
  .control-item {
    margin-bottom: 16px;
  }
  
  .control-label {
    display: block;
    font-size: 0.875rem;
    margin-bottom: 8px;
  }
  
  .quality-buttons {
    display: flex;
    gap: 8px;
  }
  
  .quality-button {
    flex: 1;
    background-color: rgba(var(--color-border-rgb), 0.1);
    border: 1px solid rgba(var(--color-border-rgb), 0.2);
    color: var(--color-text);
    padding: 8px 0;
    border-radius: 4px;
    cursor: pointer;
    font-size: 0.8125rem;
    transition: all 0.2s ease;
  }
  
  .quality-button:hover {
    background-color: rgba(var(--color-border-rgb), 0.2);
  }
  
  .quality-button.active {
    background-color: var(--color-accent);
    border-color: var(--color-accent);
    color: #fff;
  }
  
  .toggle-control {
    display: flex;
    align-items: center;
    justify-content: space-between;
    cursor: pointer;
  }
  
  .toggle-switch {
    position: relative;
    display: inline-block;
    width: 44px;
    height: 22px;
  }
  
  .toggle-switch input {
    opacity: 0;
    width: 0;
    height: 0;
  }
  
  .toggle-slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(var(--color-border-rgb), 0.3);
    transition: .4s;
    border-radius: 22px;
  }
  
  .toggle-slider:before {
    position: absolute;
    content: "";
    height: 18px;
    width: 18px;
    left: 2px;
    bottom: 2px;
    background-color: var(--color-text);
    transition: .4s;
    border-radius: 50%;
  }
  
  input:checked + .toggle-slider {
    background-color: var(--color-accent);
  }
  
  input:checked + .toggle-slider:before {
    transform: translateX(22px);
    background-color: #fff;
  }
  
  .control-description {
    font-size: 0.75rem;
    opacity: 0.7;
    margin-top: 4px;
  }
  
  .panel-footer {
    display: flex;
    justify-content: space-between;
    font-size: 0.75rem;
    opacity: 0.8;
    padding-top: 12px;
    border-top: 1px solid rgba(var(--color-border-rgb), 0.2);
  }
  
  [data-trauma-type="abandonment"] .toggle-slider {
    background-color: rgba(0, 20, 51, 0.5);
  }
  
  [data-trauma-type="fragmentation"] .toggle-slider {
    background-color: rgba(88, 10, 135, 0.5);
  }
  
  [data-trauma-type="surveillance"] .toggle-slider {
    background-color: rgba(0, 89, 82, 0.5);
  }
  
  [data-trauma-type="recursion"] .toggle-slider {
    background-color: rgba(142, 13, 0, 0.5);
  }
  
  [data-trauma-type="displacement"] .toggle-slider {
    background-color: rgba(0, 82, 67, 0.5);
  }
  
  [data-trauma-type="dissolution"] .toggle-slider {
    background-color: rgba(43, 0, 87, 0.5);
  }
  
  /* Responsive styles */
  @media (max-width: 767px) {
    .voidbloom-performance-controls {
      bottom: 10px;
      right: 10px;
    }
    
    .controls-toggle .toggle-label {
      display: none;
    }
    
    .controls-panel {
      width: 280px;
      right: -5px;
    }
  }

  /* Low performance mode styles */
  body[data-low-performance="true"] .controls-toggle {
    background-color: rgba(var(--color-base-rgb), 0.9);
  }
  
  body[data-performance-tier="low"] .quality-button[data-quality="high"] {
    opacity: 0.5;
    cursor: not-allowed;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const performanceControls = document.querySelector('[data-performance-controls]');
    if (!performanceControls) return;
    
    // Elements
    const toggleButton = performanceControls.querySelector('[data-controls-toggle]');
    const closeButton = performanceControls.querySelector('[data-close-controls]');
    const controlsPanel = performanceControls.querySelector('.controls-panel');
    const qualityButtons = performanceControls.querySelectorAll('[data-quality]');
    const lowPerformanceToggle = performanceControls.querySelector('#lowPerformanceToggle');
    const fpsDisplay = performanceControls.querySelector('[data-fps-display] span');
    const currentQualityDisplay = performanceControls.querySelector('[data-current-quality]');
    
    // Toggle panel
    toggleButton.addEventListener('click', () => {
      controlsPanel.classList.toggle('active');
    });
    
    closeButton.addEventListener('click', () => {
      controlsPanel.classList.remove('active');
    });
    
    // Close when clicking outside
    document.addEventListener('click', (e) => {
      if (!performanceControls.contains(e.target)) {
        controlsPanel.classList.remove('active');
      }
    });
    
    // Initialize settings from performanceManager
    if (window.voidbloomPerformance) {
      // Set active quality button
      const currentQuality = window.voidbloomPerformance.settings.effectQuality;
      qualityButtons.forEach(button => {
        if (button.dataset.quality === currentQuality) {
          button.classList.add('active');
        }
      });
      
      // Set toggle state
      lowPerformanceToggle.checked = window.voidbloomPerformance.settings.lowPerformanceMode;
      
      // Update quality display
      currentQualityDisplay.textContent = currentQuality.charAt(0).toUpperCase() + currentQuality.slice(1);
      
      // Update FPS display every second
      setInterval(() => {
        if (window.voidbloomPerformance.metrics.fps) {
          fpsDisplay.textContent = window.voidbloomPerformance.metrics.fps;
        }
      }, 1000);
    }
    
    // Quality button click handler
    qualityButtons.forEach(button => {
      button.addEventListener('click', () => {
        const quality = button.dataset.quality;
        
        // Prevent setting high quality on low-end devices
        if (quality === 'high' && document.body.dataset.performanceTier === 'low') {
          return;
        }
        
        // Remove active class from all buttons
        qualityButtons.forEach(btn => btn.classList.remove('active'));
        
        // Add active class to clicked button
        button.classList.add('active');
        
        // Update performance manager
        if (window.voidbloomPerformance) {
          window.voidbloomPerformance.setQuality(quality);
          currentQualityDisplay.textContent = quality.charAt(0).toUpperCase() + quality.slice(1);
        }
      });
    });
    
    // Low performance mode toggle handler
    lowPerformanceToggle.addEventListener('change', () => {
      if (window.voidbloomPerformance) {
        if (lowPerformanceToggle.checked) {
          window.voidbloomPerformance.enableLowPerformanceMode();
        } else {
          // Reset to normal mode
          window.voidbloomPerformance.settings.lowPerformanceMode = false;
          document.body.removeAttribute('data-low-performance');
          
          // Store setting
          if (window.localStorage) {
            window.localStorage.setItem('voidbloom_low_performance_mode', 'false');
          }
          
          // Dispatch event
          window.dispatchEvent(new CustomEvent('voidbloom:performancechanged', {
            detail: { lowPerformanceMode: false }
          }));
        }
      }
    });
  });
</script>