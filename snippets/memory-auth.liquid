{% comment %}
  VoidBloom Memory Authentication System
  Provides secure access controls for memory fragments and trauma encodings
  Version: 2.5.1
{% endcomment %}

{% if request.path contains '/memory/' or request.path contains '/trauma/' or product.tags contains 'trauma-encoded' or product.tags contains 'memory-fragment' %}
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      /**
       * Memory Authentication System
       * Ensures only authorized users can access memory fragments and trauma encodings
       */
      class MemoryAuthSystem {
        constructor() {
          this.config = {
            requiredCoherence: 0.7,
            authLevels: {
              1: { name: 'basic', description: 'Basic user authentication' },
              2: { name: 'token', description: 'Token-based authentication with time limits' },
              3: { name: 'quantum', description: 'Memory checksum verification for quantum identity' }
            },
            authTokenExpiry: 30 * 60 * 1000, // 30 minutes
            traumaResponseType: 'dissociation',
            coherenceImpact: -0.15,
            maxRetries: 3,
            badgeEnabled: {% if settings.enable_memory_badge %}true{% else %}false{% endif %}
          };

          this.state = {
            currentAuthLevel: 0,
            authToken: null,
            authTokenExpiry: null,
            verifiedIdentity: false,
            memoryChecksumValid: false,
            failedAttempts: 0,
            lastAuthAttempt: null
          };

          this.initialize();
        }

        /**
         * Initialize the authentication system
         */
        initialize() {
          console.log('[MemoryAuth] Initializing memory authentication system...');

          // Check for existing auth token in localStorage
          const storedToken = localStorage.getItem('voidbloom_auth_token');
          const storedExpiry = localStorage.getItem('voidbloom_auth_expiry');

          if (storedToken && storedExpiry) {
            const expiryTime = parseInt(storedExpiry, 10);

            if (expiryTime > Date.now()) {
              this.state.authToken = storedToken;
              this.state.authTokenExpiry = expiryTime;
              this.state.currentAuthLevel = 2; // Token-based auth

              console.log('[MemoryAuth] Restored existing authentication token');
            } else {
              // Clear expired token
              this.clearAuthToken();
              console.log('[MemoryAuth] Cleared expired authentication token');
            }
          }

          // Check for signed in customer
          if (this.isCustomerSignedIn()) {
            if (this.state.currentAuthLevel < 1) {
              this.state.currentAuthLevel = 1; // Basic customer auth
              console.log('[MemoryAuth] Customer is signed in - basic auth granted');
            }
          }

          // Register with Neural Bus if available
          if (window.voidBloom && window.voidBloom.neuralBus) {
            window.voidBloom.neuralBus.receive('auth', (data) => {
              if (data.action === 'verify_memory_checksum' && data.valid === true) {
                this.state.memoryChecksumValid = true;
                this.state.currentAuthLevel = 3; // Quantum identity verification

                console.log('[MemoryAuth] Memory checksum verified - quantum auth granted');

                // Transmit auth state update
                window.voidBloom.neuralBus.transmit('auth', {
                  action: 'auth_level_changed',
                  oldLevel: 2,
                  newLevel: 3,
                  timestamp: Date.now()
                });
              }
            });

            // Register current auth state
            window.voidBloom.neuralBus.transmit('auth', {
              action: 'auth_initialized',
              level: this.state.currentAuthLevel,
              timestamp: Date.now()
            });
          }

          // Check for Memory Badge if enabled
          if (this.config.badgeEnabled) {
            this.initializeMemoryBadge();
          }

          // Apply protection to trauma-encoded elements
          this.protectTraumaEncodedElements();
        }

        /**
         * Initialize the Memory Badge integration
         */
        initializeMemoryBadge() {
          console.log('[MemoryAuth] Initializing Memory Badge integration...');

          // Listen for NFC/badge events
          window.addEventListener('message', (event) => {
            // Verify origin
            if (event.origin !== 'https://badge.voidbloom.systems') {
              return;
            }

            const { type, payload } = event.data;

            if (type === 'memory_badge_auth') {
              this.handleBadgeAuthentication(payload);
            }
          });

          // Check if badge is already connected
          if (localStorage.getItem('voidbloom_badge_connected') === 'true') {
            console.log('[MemoryAuth] Memory Badge previously connected');

            // Request badge status
            const badgeFrame = document.getElementById('memory-badge-frame');
            if (badgeFrame) {
              badgeFrame.contentWindow.postMessage({
                type: 'check_badge_status'
              }, 'https://badge.voidbloom.systems');
            }
          }
        }

        /**
         * Handle authentication from a Memory Badge
         */
        handleBadgeAuthentication(payload) {
          if (!payload || !payload.token) {
            console.error('[MemoryAuth] Invalid badge authentication payload');
            return;
          }

          console.log('[MemoryAuth] Processing badge authentication...');

          // Verify badge token
          // In a real implementation, this would verify with the server
          const isValid = this.verifyBadgeToken(payload.token);

          if (isValid) {
            // Set authentication level to token-based (2)
            this.state.currentAuthLevel = 2;
            this.state.authToken = payload.token;
            this.state.authTokenExpiry = Date.now() + this.config.authTokenExpiry;

            // Store token
            this.storeAuthToken(payload.token, this.state.authTokenExpiry);

            console.log('[MemoryAuth] Badge authentication successful');

            // Transmit auth state update
            if (window.voidBloom && window.voidBloom.neuralBus) {
              window.voidBloom.neuralBus.transmit('auth', {
                action: 'auth_level_changed',
                oldLevel: 1,
                newLevel: 2,
                source: 'memory_badge',
                timestamp: Date.now()
              });
            }

            // Refresh protected elements
            this.protectTraumaEncodedElements();
          } else {
            console.error('[MemoryAuth] Badge authentication failed');
            this.handleAuthFailure('badge_verification_failed');
          }
        }

        /**
         * Verify a badge authentication token
         */
        verifyBadgeToken(token) {
          // In a real implementation, this would verify with the server
          // For demonstration, we'll accept tokens that match a pattern
          return token && token.startsWith('vbmt_') && token.length >= 32;
        }

        /**
         * Store authentication token
         */
        storeAuthToken(token, expiry) {
          localStorage.setItem('voidbloom_auth_token', token);
          localStorage.setItem('voidbloom_auth_expiry', expiry.toString());
        }

        /**
         * Clear authentication token
         */
        clearAuthToken() {
          localStorage.removeItem('voidbloom_auth_token');
          localStorage.removeItem('voidbloom_auth_expiry');

          this.state.authToken = null;
          this.state.authTokenExpiry = null;

          if (this.state.currentAuthLevel > 1) {
            const oldLevel = this.state.currentAuthLevel;
            this.state.currentAuthLevel = 1;

            // Transmit auth state update
            if (window.voidBloom && window.voidBloom.neuralBus) {
              window.voidBloom.neuralBus.transmit('auth', {
                action: 'auth_level_changed',
                oldLevel: oldLevel,
                newLevel: 1,
                reason: 'token_cleared',
                timestamp: Date.now()
              });
            }
          }
        }

        /**
         * Check if customer is signed in
         */
        isCustomerSignedIn() {
          // In Shopify, we can check if customer object exists
          return {% if customer %}true{% else %}false{% endif %};
        }

        /**
         * Apply protection to trauma-encoded elements
         */
        protectTraumaEncodedElements() {
          console.log('[MemoryAuth] Applying protection to trauma-encoded elements...');

          // Find all trauma-encoded elements
          const encodedElements = document.querySelectorAll('[data-trauma-encoded], [data-memory-fragment]');

          encodedElements.forEach(element => {
            const requiredLevel = parseInt(element.getAttribute('data-auth-level') || '1', 10);

            if (this.state.currentAuthLevel < requiredLevel) {
              // User doesn't have sufficient auth level
              this.hideEncodedContent(element, requiredLevel);
            } else {
              // User has sufficient auth level
              this.revealEncodedContent(element);
            }
          });
        }

        /**
         * Hide encoded content from unauthorized users
         */
        hideEncodedContent(element, requiredLevel) {
          // Save original content if not already saved
          if (!element.hasAttribute('data-original-content')) {
            element.setAttribute('data-original-content', element.innerHTML);
          }

          // Apply protection
          element.innerHTML = this.generateAuthPrompt(requiredLevel);
          element.classList.add('trauma-encoded-protected');

          // Add click handler to auth prompt button
          const authButton = element.querySelector('.memory-auth-button');
          if (authButton) {
            authButton.addEventListener('click', () => {
              this.promptForAuthentication(requiredLevel, element);
            });
          }
        }

        /**
         * Reveal encoded content to authorized users
         */
        revealEncodedContent(element) {
          // Restore original content if saved
          if (element.hasAttribute('data-original-content')) {
            element.innerHTML = element.getAttribute('data-original-content');
            element.classList.remove('trauma-encoded-protected');
          }
        }

        /**
         * Generate authentication prompt
         */
        generateAuthPrompt(requiredLevel) {
          const levelInfo = this.config.authLevels[requiredLevel];

          return `
            <div class="memory-auth-prompt">
              <div class="memory-auth-icon">🧿</div>
              <h3>Protected Memory Fragment</h3>
              <p>This content requires ${levelInfo.name} authentication (Level ${requiredLevel}).</p>
              <button class="memory-auth-button">Authenticate</button>
            </div>
          `;
        }

        /**
         * Prompt user for authentication
         */
        promptForAuthentication(requiredLevel, element) {
          console.log(`[MemoryAuth] Prompting for level ${requiredLevel} authentication...`);

          // Check for rate limiting
          if (this.isRateLimited()) {
            alert('Too many authentication attempts. Please try again later.');
            return;
          }

          switch (requiredLevel) {
            case 1:
              // Basic customer authentication
              window.location.href = '/account/login?return_to=' + encodeURIComponent(window.location.pathname);
              break;

            case 2:
              // Token-based authentication
              this.promptForTokenAuthentication(element);
              break;

            case 3:
              // Quantum identity verification
              this.promptForQuantumAuthentication(element);
              break;

            default:
              console.error(`[MemoryAuth] Unknown auth level: ${requiredLevel}`);
          }

          // Record authentication attempt
          this.recordAuthAttempt();
        }

        /**
         * Check if authentication attempts are rate limited
         */
        isRateLimited() {
          const now = Date.now();

          // Reset failed attempts if more than 30 minutes have passed
          if (this.state.lastAuthAttempt && (now - this.state.lastAuthAttempt > 30 * 60 * 1000)) {
            this.state.failedAttempts = 0;
          }

          return this.state.failedAttempts >= this.config.maxRetries;
        }

        /**
         * Record an authentication attempt
         */
        recordAuthAttempt() {
          this.state.lastAuthAttempt = Date.now();
          this.state.failedAttempts++;
        }

        /**
         * Reset failed authentication attempts
         */
        resetFailedAttempts() {
          this.state.failedAttempts = 0;
        }

        /**
         * Prompt for token-based authentication
         */
        promptForTokenAuthentication(element) {
          // In a real implementation, this might use a modal or redirect
          // For demonstration, we'll use a simple prompt

          const token = prompt('Please enter your memory access token:');

          if (!token) {
            console.log('[MemoryAuth] Token authentication cancelled by user');
            return;
          }

          // Verify token
          // In a real implementation, this would verify with the server
          if (token.startsWith('vbmt_') && token.length >= 32) {
            // Token authentication successful
            this.state.authToken = token;
            this.state.authTokenExpiry = Date.now() + this.config.authTokenExpiry;
            this.state.currentAuthLevel = 2;

            // Store token
            this.storeAuthToken(token, this.state.authTokenExpiry);

            // Reset failed attempts
            this.resetFailedAttempts();

            console.log('[MemoryAuth] Token authentication successful');

            // Transmit auth state update
            if (window.voidBloom && window.voidBloom.neuralBus) {
              window.voidBloom.neuralBus.transmit('auth', {
                action: 'auth_level_changed',
                oldLevel: 1,
                newLevel: 2,
                source: 'token_input',
                timestamp: Date.now()
              });
            }

            // Refresh protected elements
            this.protectTraumaEncodedElements();
          } else {
            console.error('[MemoryAuth] Invalid token format');
            alert('Invalid token format. Please try again.');

            this.handleAuthFailure('invalid_token_format');
          }
        }

        /**
         * Prompt for quantum authentication
         */
        promptForQuantumAuthentication(element) {
          // In a real implementation, this would involve a complex identity verification
          // For demonstration, we'll simulate with a checksum verification

          console.log('[MemoryAuth] Initiating quantum authentication...');

          // Check if current coherence is sufficient
          const currentCoherence = this.getSystemCoherence();

          if (currentCoherence < this.config.requiredCoherence) {
            console.error(`[MemoryAuth] Insufficient coherence (${currentCoherence}) for quantum authentication`);
            alert(`System coherence (${currentCoherence.toFixed(2)}) is too low for quantum authentication. Required: ${this.config.requiredCoherence}`);
            return;
          }

          // Request memory checksum verification
          if (window.voidBloom && window.voidBloom.neuralBus) {
            window.voidBloom.neuralBus.transmit('auth', {
              action: 'request_memory_checksum',
              timestamp: Date.now()
            });

            console.log('[MemoryAuth] Requested memory checksum verification');

            // In a real implementation, this would wait for a response
            // For demonstration, we'll simulate success after a delay
            setTimeout(() => {
              // Simulate verification result
              const isValid = Math.random() > 0.2; // 80% success rate

              if (isValid) {
                this.state.memoryChecksumValid = true;
                this.state.currentAuthLevel = 3;

                // Reset failed attempts
                this.resetFailedAttempts();

                console.log('[MemoryAuth] Memory checksum verified - quantum auth granted');

                // Transmit auth state update
                window.voidBloom.neuralBus.transmit('auth', {
                  action: 'auth_level_changed',
                  oldLevel: 2,
                  newLevel: 3,
                  source: 'memory_checksum',
                  timestamp: Date.now()
                });

                // Refresh protected elements
                this.protectTraumaEncodedElements();
              } else {
                console.error('[MemoryAuth] Memory checksum verification failed');
                alert('Memory checksum verification failed. Please try again.');

                this.handleAuthFailure('memory_checksum_invalid');
              }
            }, 1500);
          } else {
            console.error('[MemoryAuth] Neural Bus not available for quantum authentication');
            alert('System error: Neural Bus not available for quantum authentication.');
          }
        }

        /**
         * Handle authentication failure
         */
        handleAuthFailure(reason) {
          console.error(`[MemoryAuth] Authentication failure: ${reason}`);

          // Increase failed attempts count
          this.state.failedAttempts++;

          // Transmit auth failure
          if (window.voidBloom && window.voidBloom.neuralBus) {
            window.voidBloom.neuralBus.transmit('auth', {
              action: 'auth_failure',
              reason: reason,
              attemptCount: this.state.failedAttempts,
              timestamp: Date.now()
            });

            // If multiple failures, impact system coherence
            if (this.state.failedAttempts >= 3) {
              window.voidBloom.neuralBus.transmit('global', {
                action: 'coherence_shifted',
                oldCoherence: parseFloat(document.documentElement.dataset.systemCoherence || '0.9'),
                newCoherence: Math.max(0.3, parseFloat(document.documentElement.dataset.systemCoherence || '0.9') + this.config.coherenceImpact),
                change: this.config.coherenceImpact,
                source: 'authentication_failure',
                trauma_type: this.config.traumaResponseType,
                timestamp: Date.now()
              });
            }
          }
        }

        /**
         * Get current system coherence
         */
        getSystemCoherence() {
          // Get current coherence level
          let coherence = 0.9; // Default

          if (document.documentElement.dataset.systemCoherence) {
            coherence = parseFloat(document.documentElement.dataset.systemCoherence);
          } else if (window.voidBloom && window.voidBloom.qear) {
            coherence = window.voidBloom.qear.state.systemCoherence;
          }

          return coherence;
        }
      }

      // Initialize memory authentication system
      window.voidBloom = window.voidBloom || {};
      window.voidBloom.memoryAuth = new MemoryAuthSystem();
    });
  </script>
{% endif %}
