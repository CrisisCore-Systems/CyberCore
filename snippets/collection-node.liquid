{% comment %}
  collection-node.liquid
  Dimensional collection navigation node for VoidBloom architecture
  
  @MutationCompatible: VoidBloom
  @StrategyProfile: quantum-entangled
  @Version: 1.0.0
{% endcomment %}

{% assign depth_class = "node-depth-" | append: collection.metafields.cybercore.dimensional_depth %}
{% assign trauma_tag = collection.metafields.cybercore.trauma_coding | split: ',' | first %}

<div class="collection-node {{ depth_class }}" data-neural-trigger="{{ trauma_tag }}">
  <div class="node-void"></div>
  <div class="node-content">
    <h3 class="glitch-text" data-text="{{ collection.title }}">{{ collection.title }}</h3>
    <div class="node-description">{{ collection.description }}</div>
    
    {% render 'quantum-pulse', intensity: collection.products.size %}
    
    <div class="node-products">
      {% for product in collection.products limit: 3 %}
        {% render 'product-cell', product: product, trauma_resonance: trauma_tag %}
      {% endfor %}
    </div>
    
    <a href="{{ collection.url }}" class="node-link">
      <span class="node-link-text">Enter Memory Dimension</span>
      <span class="node-link-icon">â†’</span>
    </a>
  </div>
</div>

<style>
  .collection-node {
    position: relative;
    margin-bottom: 2rem;
    padding: 1.5rem;
    background: rgba(10, 0, 20, 0.5);
    border-radius: 4px;
    overflow: hidden;
    transition: all 0.3s ease;
  }
  
  .node-void {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: radial-gradient(ellipse at center, rgba(30, 0, 50, 0.3) 0%, rgba(10, 0, 20, 0) 70%);
    z-index: 0;
    opacity: 0.7;
    transition: all 0.5s ease;
  }
  
  .collection-node:hover .node-void {
    opacity: 1;
    transform: scale(1.1);
  }
  
  .node-content {
    position: relative;
    z-index: 1;
  }
  
  .glitch-text {
    font-family: 'Courier New', monospace;
    font-size: 1.5rem;
    letter-spacing: 1px;
    margin: 0 0 1rem 0;
    position: relative;
    display: inline-block;
    color: rgba(255, 255, 255, 0.9);
  }
  
  /* Apply different border styles based on dimensional depth */
  .node-depth-1 {
    border-left: 2px solid rgba(153, 0, 255, 0.5);
  }
  
  .node-depth-2 {
    border-left: 3px solid rgba(153, 0, 255, 0.7);
    border-bottom: 1px solid rgba(153, 0, 255, 0.3);
  }
  
  .node-depth-3 {
    border: 1px solid rgba(153, 0, 255, 0.5);
    box-shadow: 0 0 15px rgba(153, 0, 255, 0.2);
  }
  
  .node-depth-1 .glitch-text::before,
  .node-depth-1 .glitch-text::after {
    display: none;
  }
  
  .node-depth-2 .glitch-text::before,
  .node-depth-2 .glitch-text::after {
    content: attr(data-text);
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    animation: node-glitch 8s infinite alternate-reverse;
  }
  
  .node-depth-2 .glitch-text::before {
    clip-path: polygon(0 0, 100% 0, 100% 45%, 0 45%);
    transform: translate(-0.025em, -0.0125em);
    opacity: 0.8;
    color: rgba(153, 0, 255, 0.8);
  }
  
  .node-depth-2 .glitch-text::after {
    clip-path: polygon(0 80%, 100% 80%, 100% 100%, 0 100%);
    transform: translate(0.025em, 0.0125em);
    opacity: 0.8;
    color: rgba(0, 255, 255, 0.8);
  }
  
  .node-depth-3 .glitch-text::before,
  .node-depth-3 .glitch-text::after {
    content: attr(data-text);
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    animation: node-glitch 3s infinite alternate-reverse;
  }
  
  .node-depth-3 .glitch-text::before {
    clip-path: polygon(0 0, 100% 0, 100% 45%, 0 45%);
    transform: translate(-0.035em, -0.0175em);
    opacity: 0.9;
    color: rgba(255, 0, 255, 0.8);
  }
  
  .node-depth-3 .glitch-text::after {
    clip-path: polygon(0 80%, 100% 80%, 100% 100%, 0 100%);
    transform: translate(0.035em, 0.0175em);
    opacity: 0.9;
    color: rgba(0, 255, 255, 0.8);
  }
  
  @keyframes node-glitch {
    0% { transform: translate(0); }
    20% { transform: translate(-3px, 1px); }
    40% { transform: translate(-1px, -1px); }
    60% { transform: translate(1px, 2px); }
    80% { transform: translate(2px, -1px); }
    100% { transform: translate(0); }
  }
  
  .node-description {
    margin-bottom: 1.5rem;
    color: rgba(255, 255, 255, 0.7);
    font-size: 0.9rem;
    line-height: 1.6;
    max-width: 80%;
  }
  
  .node-products {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 1rem;
    margin: 1.5rem 0;
  }
  
  .node-link {
    display: inline-flex;
    align-items: center;
    margin-top: 1rem;
    color: rgba(153, 0, 255, 0.9);
    text-decoration: none;
    font-family: 'Courier New', monospace;
    font-size: 0.9rem;
    letter-spacing: 0.5px;
    transition: all 0.3s ease;
    border-bottom: 1px solid rgba(153, 0, 255, 0.3);
    padding-bottom: 2px;
  }
  
  .node-link:hover {
    color: rgba(153, 0, 255, 1);
    border-bottom-color: rgba(153, 0, 255, 0.8);
  }
  
  .node-link-icon {
    margin-left: 0.5rem;
    transition: transform 0.3s ease;
  }
  
  .node-link:hover .node-link-icon {
    transform: translateX(4px);
  }
  
  /* Different visual effects based on trauma resonance */
  [data-neural-trigger="isolation"] .node-void {
    background: radial-gradient(ellipse at center, rgba(0, 30, 50, 0.3) 0%, rgba(10, 0, 20, 0) 70%);
  }
  
  [data-neural-trigger="fragmentation"] .node-void {
    background: radial-gradient(ellipse at center, rgba(50, 0, 30, 0.3) 0%, rgba(10, 0, 20, 0) 70%);
  }
  
  [data-neural-trigger="dissolution"] .node-void {
    background: radial-gradient(ellipse at center, rgba(30, 50, 0, 0.3) 0%, rgba(10, 0, 20, 0) 70%);
  }
  
  [data-neural-trigger="recursion"] .node-void {
    background: radial-gradient(ellipse at center, rgba(50, 30, 0, 0.3) 0%, rgba(10, 0, 20, 0) 70%);
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const nodes = document.querySelectorAll('.collection-node');
    
    nodes.forEach(node => {
      // Effect on node hover
      node.addEventListener('mouseenter', () => {
        // Get trauma tag
        const traumaTag = node.getAttribute('data-neural-trigger');
        
        // Send event to NeuralBus
        if (window.NeuralBus) {
          window.NeuralBus.publish('node:hover', {
            node: node,
            trauma: traumaTag,
            timestamp: Date.now()
          });
          
          // Small quantum fluctuation
          window.NeuralBus.publish('quantum:fluctuation', {
            intensity: 0.3,
            source: 'collection-node',
            trauma: traumaTag,
            timestamp: Date.now()
          });
        }
      });
      
      // Set depth marker
      const depthClass = Array.from(node.classList).find(cls => cls.startsWith('node-depth-'));
      if (depthClass) {
        const depth = parseInt(depthClass.replace('node-depth-', ''), 10);
        
        // Apply subtle visual effects based on depth
        if (depth === 2) {
          setInterval(() => {
            const glitchChance = Math.random();
            if (glitchChance > 0.95) {
              node.style.transform = `translateX(${Math.random() * 2 - 1}px)`;
              
              setTimeout(() => {
                node.style.transform = 'translateX(0)';
              }, 150);
            }
          }, 3000);
        } else if (depth === 3) {
          setInterval(() => {
            const glitchChance = Math.random();
            if (glitchChance > 0.9) {
              node.style.transform = `translate(${Math.random() * 3 - 1.5}px, ${Math.random() * 2 - 1}px)`;
              
              setTimeout(() => {
                node.style.transform = 'translate(0, 0)';
              }, 200);
            }
          }, 2000);
        }
      }
    });
  });
</script>