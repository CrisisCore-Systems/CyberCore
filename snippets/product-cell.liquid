{% comment %}
  product-cell.liquid
  Individual product cell with trauma resonance for VoidBloom architecture
  
  @MutationCompatible: VoidBloom
  @StrategyProfile: quantum-entangled
  @Version: 1.0.0
{% endcomment %}

{% assign trauma_codes = product.metafields.cybercore.trauma_codes | split: ',' %}
{% assign dimensional_depth = product.metafields.cybercore.dimensional_depth | default: '1' %}
{% assign has_resonance = false %}

{% if trauma_resonance and trauma_codes contains trauma_resonance %}
  {% assign has_resonance = true %}
{% endif %}

<div class="product-cell depth-{{ dimensional_depth }} {% if has_resonance %}resonant{% endif %}" 
     data-product-id="{{ product.id }}"
     data-trauma-codes="{{ trauma_codes | join: ',' }}"
     data-depth="{{ dimensional_depth }}">
  
  <a href="{{ product.url }}" class="product-link">
    <div class="product-image-container">
      <div class="image-overlay depth-{{ dimensional_depth }}"></div>
      
      {% if product.featured_image %}
        <img src="{{ product.featured_image | img_url: '300x300', crop: 'center' }}" alt="{{ product.title | escape }}" class="product-image" />
      {% else %}
        <div class="product-image-placeholder">
          <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1" stroke-linecap="round" stroke-linejoin="round">
            <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
            <circle cx="8.5" cy="8.5" r="1.5"></circle>
            <polyline points="21 15 16 10 5 21"></polyline>
          </svg>
        </div>
      {% endif %}
      
      {% if has_resonance %}
        <div class="resonance-marker">
          <div class="resonance-pulse"></div>
        </div>
      {% endif %}
      
      {% if product.compare_at_price > product.price %}
        <div class="sale-badge">
          <span class="sale-text">SALE</span>
        </div>
      {% endif %}
    </div>
    
    <div class="product-info">
      <h3 class="product-title">{{ product.title }}</h3>
      
      {% if product.metafields.lore.fragment %}
        <div class="product-fragment">{{ product.metafields.lore.fragment }}</div>
      {% endif %}
      
      <div class="product-price-container">
        <span class="product-price">{{ product.price | money }}</span>
        
        {% if product.compare_at_price > product.price %}
          <span class="product-compare-price">{{ product.compare_at_price | money }}</span>
        {% endif %}
      </div>
      
      <div class="trauma-tags">
        {% for code in trauma_codes limit: 2 %}
          <span class="trauma-tag {% if code == trauma_resonance %}resonant{% endif %}">{{ code }}</span>
        {% endfor %}
        
        {% if trauma_codes.size > 2 %}
          <span class="trauma-tag more">+{{ trauma_codes.size | minus: 2 }}</span>
        {% endif %}
      </div>
    </div>
  </a>
  
  <div class="product-actions">
    <button class="quick-add-btn" data-product-id="{{ product.id }}" aria-label="Quick add to cart">
      +
    </button>
  </div>
</div>

<style>
  .product-cell {
    position: relative;
    background: rgba(10, 0, 20, 0.4);
    border-radius: 4px;
    overflow: hidden;
    transition: all 0.3s ease;
  }
  
  .product-cell:hover {
    transform: translateY(-4px);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
  }
  
  .product-cell.resonant {
    background: rgba(20, 0, 30, 0.5);
    box-shadow: 0 0 10px rgba(153, 0, 255, 0.2);
  }
  
  .product-link {
    display: block;
    text-decoration: none;
    color: inherit;
  }
  
  .product-image-container {
    position: relative;
    width: 100%;
    padding-top: 100%; /* Square aspect ratio */
    overflow: hidden;
  }
  
  .product-image {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.6s cubic-bezier(0.2, 0.8, 0.2, 1);
  }
  
  .product-cell:hover .product-image {
    transform: scale(1.05);
  }
  
  .product-image-placeholder {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    background: rgba(10, 0, 20, 0.7);
    color: rgba(153, 0, 255, 0.5);
  }
  
  .image-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: 1;
  }
  
  .image-overlay.depth-1 {
    background: linear-gradient(to bottom, rgba(10, 0, 20, 0.2) 0%, rgba(10, 0, 20, 0) 40%);
  }
  
  .image-overlay.depth-2 {
    background: linear-gradient(to bottom, rgba(10, 0, 20, 0.3) 0%, rgba(10, 0, 20, 0) 60%);
    border-top: 1px solid rgba(153, 0, 255, 0.3);
  }
  
  .image-overlay.depth-3 {
    background: linear-gradient(135deg, rgba(153, 0, 255, 0.1) 0%, rgba(10, 0, 20, 0) 70%);
    border-top: 1px solid rgba(153, 0, 255, 0.4);
    border-left: 1px solid rgba(153, 0, 255, 0.4);
  }
  
  .resonance-marker {
    position: absolute;
    top: 10px;
    right: 10px;
    width: 12px;
    height: 12px;
    z-index: 2;
  }
  
  .resonance-pulse {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 8px;
    height: 8px;
    background: rgba(153, 0, 255, 0.8);
    border-radius: 50%;
    box-shadow: 0 0 5px rgba(153, 0, 255, 0.5);
  }
  
  .resonance-pulse::before,
  .resonance-pulse::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background: rgba(153, 0, 255, 0.5);
    animation: resonance-pulse 3s infinite cubic-bezier(0.3, 0.6, 0.7, 0.3);
  }
  
  .resonance-pulse::after {
    animation-delay: 1.5s;
  }
  
  @keyframes resonance-pulse {
    0% {
      width: 8px;
      height: 8px;
      opacity: 0.7;
    }
    100% {
      width: 20px;
      height: 20px;
      opacity: 0;
    }
  }
  
  .sale-badge {
    position: absolute;
    top: 0;
    left: 0;
    background: rgba(153, 0, 255, 0.7);
    padding: 0.25rem 0.5rem;
    z-index: 2;
    font-size: 0.7rem;
    font-family: 'Courier New', monospace;
    letter-spacing: 1px;
  }
  
  .sale-text {
    color: rgba(255, 255, 255, 0.9);
  }
  
  .product-info {
    padding: 1rem;
  }
  
  .product-title {
    font-size: 0.9rem;
    margin: 0 0 0.5rem 0;
    font-weight: normal;
    color: rgba(255, 255, 255, 0.9);
  }
  
  .product-fragment {
    font-size: 0.8rem;
    color: rgba(153, 0, 255, 0.7);
    margin-bottom: 0.75rem;
    font-style: italic;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .product-price-container {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-bottom: 0.75rem;
  }
  
  .product-price {
    font-size: 0.9rem;
    color: rgba(255, 255, 255, 0.9);
  }
  
  .product-compare-price {
    font-size: 0.8rem;
    color: rgba(255, 255, 255, 0.5);
    text-decoration: line-through;
  }
  
  .trauma-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.25rem;
  }
  
  .trauma-tag {
    font-size: 0.65rem;
    padding: 0.1rem 0.4rem;
    background: rgba(153, 0, 255, 0.1);
    border-left: 1px solid rgba(153, 0, 255, 0.3);
    color: rgba(153, 0, 255, 0.7);
    text-transform: uppercase;
    letter-spacing: 0.5px;
    font-family: 'Courier New', monospace;
  }
  
  .trauma-tag.resonant {
    background: rgba(153, 0, 255, 0.2);
    border-left: 1px solid rgba(153, 0, 255, 0.6);
    color: rgba(153, 0, 255, 0.9);
  }
  
  .trauma-tag.more {
    background: transparent;
    border: none;
    color: rgba(255, 255, 255, 0.5);
  }
  
  .product-actions {
    position: absolute;
    bottom: 1rem;
    right: 1rem;
    opacity: 0;
    transform: translateY(10px);
    transition: all 0.3s ease;
    z-index: 3;
  }
  
  .product-cell:hover .product-actions {
    opacity: 1;
    transform: translateY(0);
  }
  
  .quick-add-btn {
    width: 30px;
    height: 30px;
    border-radius: 50%;
    background: rgba(153, 0, 255, 0.7);
    border: none;
    color: rgba(255, 255, 255, 0.9);
    font-size: 1.1rem;
    line-height: 1;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;
  }
  
  .quick-add-btn:hover {
    background: rgba(153, 0, 255, 0.9);
    transform: scale(1.1);
  }
  
  /* Depth-specific variations */
  .product-cell.depth-2 {
    border-left: 2px solid rgba(153, 0, 255, 0.3);
  }
  
  .product-cell.depth-3 {
    border-left: 2px solid rgba(153, 0, 255, 0.5);
    border-bottom: 1px solid rgba(153, 0, 255, 0.3);
  }
  
  /* Responsive */
  @media (max-width: 768px) {
    .product-cell {
      margin-bottom: 1rem;
    }
    
    .product-actions {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const productCells = document.querySelectorAll('.product-cell');
    
    productCells.forEach(cell => {
      // Quick add button functionality
      const quickAddBtn = cell.querySelector('.quick-add-btn');
      if (quickAddBtn) {
        quickAddBtn.addEventListener('click', function(e) {
          e.preventDefault();
          
          const productId = this.getAttribute('data-product-id');
          const traumaCodes = cell.getAttribute('data-trauma-codes');
          const dimensionalDepth = cell.getAttribute('data-depth');
          
          // Visual feedback
          this.textContent = '...';
          
          // Add to cart
          fetch('/cart/add.js', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              id: productId,
              quantity: 1,
              properties: {
                _trauma_codes: traumaCodes,
                _dimensional_depth: dimensionalDepth
              }
            })
          })
          .then(response => response.json())
          .then(data => {
            // Success feedback
            this.textContent = '✓';
            
            setTimeout(() => {
              this.textContent = '+';
            }, 2000);
            
            // Update cart count
            const cartCountElements = document.querySelectorAll('.cart-count');
            cartCountElements.forEach(el => {
              let count = parseInt(el.textContent || '0');
              el.textContent = count + 1;
              el.classList.add('pulse');
              
              setTimeout(() => {
                el.classList.remove('pulse');
              }, 500);
            });
            
            // Notify NeuralBus
            if (window.NeuralBus) {
              window.NeuralBus.publish('product:added', {
                productId: productId,
                traumaCodes: traumaCodes.split(','),
                dimensionalDepth: dimensionalDepth,
                timestamp: Date.now()
              });
              
              window.NeuralBus.publish('cart:reconfigured', {
                itemCount: parseInt(document.querySelector('.cart-count').textContent),
                timestamp: Date.now()
              });
            }
          })
          .catch(error => {
            console.error('Error adding product to cart:', error);
            this.textContent = '!';
            
            setTimeout(() => {
              this.textContent = '+';
            }, 2000);
          });
        });
      }
      
      // Cell hover effects
      cell.addEventListener('mouseenter', () => {
        const traumaCodes = cell.getAttribute('data-trauma-codes').split(',');
        const depth = cell.getAttribute('data-depth');
        
        // Notify NeuralBus
        if (window.NeuralBus) {
          window.NeuralBus.publish('product:hover', {
            productId: cell.getAttribute('data-product-id'),
            traumaCodes: traumaCodes,
            dimensionalDepth: depth,
            timestamp: Date.now()
          });
          
          // Small quantum fluctuation if it's a deep product
          if (parseInt(depth) >= 2) {
            window.NeuralBus.publish('quantum:fluctuation', {
              intensity: parseInt(depth) * 0.1,
              source: 'product-cell',
              trauma: traumaCodes[0],
              timestamp: Date.now()
            });
          }
        }
      });
    });
  });
</script>