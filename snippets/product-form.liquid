{% comment %}
  product-form.liquid
  Enhanced product acquisition form for VoidBloom architecture
  
  @MutationCompatible: VoidBloom
  @StrategyProfile: quantum-entangled
  @Version: 1.0.0
{% endcomment %}

{% assign product_trauma_codes = product.metafields.cybercore.trauma_codes | split: "," %}
{% assign dimensional_depth = product.metafields.cybercore.dimensional_depth | default: 1 %}

<div class="product-form" data-product-id="{{ product.id }}">
  <form method="post" action="/cart/add" id="product-form-{{ product.id }}" accept-charset="UTF-8" class="form" enctype="multipart/form-data" novalidate="novalidate">
    <input type="hidden" name="form_type" value="product" />
    <input type="hidden" name="utf8" value="âœ“" />
    <input type="hidden" name="id" value="{{ product.selected_or_first_available_variant.id }}" />
    
    {% if product.has_only_default_variant == false %}
      <div class="variant-selectors mb-4">
        {% for option in product.options_with_values %}
          <div class="variant-selector mb-2">
            <label for="option-{{ product.id }}-{{ forloop.index0 }}" class="text-sm opacity-80 mb-1 block">
              {{ option.name }}
            </label>
            
            <select id="option-{{ product.id }}-{{ forloop.index0 }}" 
                    class="form-select w-full bg-neutral-900 border border-neutral-700 rounded-md px-3 py-2 text-sm"
                    name="options[{{ option.name }}]">
              {% for value in option.values %}
                <option value="{{ value }}" 
                  {% if option.selected_value == value %}selected="selected"{% endif %}>
                  {{ value }}
                </option>
              {% endfor %}
            </select>
          </div>
        {% endfor %}
      </div>
    {% endif %}
    
    <div class="quantity-selector mb-4">
      <label for="quantity-{{ product.id }}" class="text-sm opacity-80 mb-1 block">
        Memory Recursion Count
      </label>
      
      <div class="quantity-wrapper flex items-center">
        <button type="button" class="quantity-btn quantity-decrease bg-neutral-800 text-white w-8 h-8 flex items-center justify-center rounded-l-md">
          -
        </button>
        
        <input type="number" 
               id="quantity-{{ product.id }}" 
               name="quantity" 
               value="1" 
               min="1" 
               class="quantity-input bg-neutral-900 border-y border-neutral-700 text-center w-16 h-8"
               data-quantity-input />
        
        <button type="button" class="quantity-btn quantity-increase bg-neutral-800 text-white w-8 h-8 flex items-center justify-center rounded-r-md">
          +
        </button>
      </div>
    </div>
    
    {% comment %} Hidden fields for trauma codes {% endcomment %}
    <input type="hidden" name="properties[_trauma_codes]" value="{{ product.metafields.cybercore.trauma_codes }}" />
    <input type="hidden" name="properties[_dimensional_depth]" value="{{ dimensional_depth }}" />
    
    <div class="product-submit">
      <button type="submit" 
              name="add" 
              class="memory-submit-button w-full py-3 px-4 rounded-md transition-all duration-300 relative overflow-hidden"
              {% unless product.available %}disabled{% endunless %}
              data-neural-trigger="acquisition">
        
        <span class="submit-text relative z-10">
          {% if product.available %}
            Add to Memory Vault
          {% else %}
            Memory Pattern Unavailable
          {% endif %}
        </span>
        
        <span class="submit-icon relative z-10">+</span>
        
        <div class="pulse-overlay"></div>
      </button>
      
      {% if product_trauma_codes.size > 0 %}
        <div class="trauma-warning mt-2 text-xs opacity-60">
          This memory contains {{ product_trauma_codes.size }} trauma-code{{ product_trauma_codes.size | pluralize: ',s' }}
        </div>
      {% endif %}
    </div>
  </form>
</div>

<style>
  .product-form {
    margin-bottom: 2rem;
  }
  
  .memory-submit-button {
    background-color: rgba(153, 0, 255, 0.2);
    border: 1px solid rgba(153, 0, 255, 0.4);
    color: rgba(255, 255, 255, 0.9);
    font-family: 'Courier New', monospace;
    letter-spacing: 0.5px;
    display: flex;
    align-items: center;
    justify-content: space-between;
  }
  
  .memory-submit-button:hover {
    background-color: rgba(153, 0, 255, 0.3);
    border-color: rgba(153, 0, 255, 0.6);
  }
  
  .memory-submit-button:active {
    transform: translateY(1px);
  }
  
  .memory-submit-button[disabled] {
    background-color: rgba(50, 50, 50, 0.2);
    border-color: rgba(50, 50, 50, 0.4);
    color: rgba(255, 255, 255, 0.4);
    cursor: not-allowed;
  }
  
  .submit-icon {
    font-size: 1.2rem;
    font-weight: bold;
  }
  
  .pulse-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: radial-gradient(circle at center, rgba(153, 0, 255, 0.4) 0%, transparent 70%);
    opacity: 0;
    transition: opacity 0.3s ease;
  }
  
  .memory-submit-button:hover .pulse-overlay {
    opacity: 1;
  }
  
  .memory-submit-button.adding .pulse-overlay {
    animation: button-pulse 1s ease-out;
  }
  
  @keyframes button-pulse {
    0% { opacity: 0; transform: scale(0.8); }
    50% { opacity: 1; transform: scale(1); }
    100% { opacity: 0; transform: scale(1.2); }
  }
  
  .quantity-input::-webkit-outer-spin-button,
  .quantity-input::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }
  
  .quantity-input[type=number] {
    -moz-appearance: textfield;
  }
  
  .quantity-btn {
    user-select: none;
    cursor: pointer;
    transition: all 0.2s ease;
  }
  
  .quantity-btn:hover {
    background-color: rgba(153, 0, 255, 0.3);
  }
  
  .trauma-warning {
    font-family: 'Courier New', monospace;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('product-form-{{ product.id }}');
    const submitButton = form.querySelector('.memory-submit-button');
    const quantityInput = form.querySelector('[data-quantity-input]');
    const decreaseBtn = form.querySelector('.quantity-decrease');
    const increaseBtn = form.querySelector('.quantity-increase');
    
    // Quantity controls
    decreaseBtn.addEventListener('click', () => {
      const currentValue = parseInt(quantityInput.value, 10);
      if (currentValue > 1) {
        quantityInput.value = currentValue - 1;
      }
    });
    
    increaseBtn.addEventListener('click', () => {
      const currentValue = parseInt(quantityInput.value, 10);
      quantityInput.value = currentValue + 1;
    });
    
    // Form submission with neural-bus integration
    form.addEventListener('submit', function(e) {
      e.preventDefault();
      
      // Visual feedback
      submitButton.classList.add('adding');
      
      // Get form data
      const formData = new FormData(form);
      
      // Add to cart via fetch
      fetch('/cart/add.js', {
        method: 'POST',
        body: formData
      })
      .then(response => response.json())
      .then(data => {
        // Send event to NeuralBus
        if (window.NeuralBus) {
          const productId = "{{ product.id }}";
          const traumaCodes = {{ product_trauma_codes | json }};
          const dimensionalDepth = {{ dimensional_depth }};
          
          window.NeuralBus.publish('product:added', {
            product_id: productId,
            variant_id: data.variant_id,
            quantity: data.quantity,
            trauma_codes: traumaCodes,
            dimensional_depth: dimensionalDepth,
            timestamp: Date.now()
          });
          
          window.NeuralBus.publish('cart:item:added', {
            product_id: productId,
            trauma_codes: traumaCodes,
            dimensional_depth: dimensionalDepth,
            timestamp: Date.now()
          });
          
          // Trigger quantum mutation
          window.NeuralBus.publish('quantum:mutation', {
            source: 'product-form',
            profile: 'VoidBloom',
            intensity: 0.7,
            trauma_codes: traumaCodes,
            timestamp: Date.now()
          });
        }
        
        // Update cart UI (this would be handled by your Shopify theme)
        if (typeof window.updateCart === 'function') {
          window.updateCart();
        }
        
        // Reset button state after delay
        setTimeout(() => {
          submitButton.classList.remove('adding');
        }, 1000);
      })
      .catch(error => {
        console.error('Error adding to cart:', error);
        submitButton.classList.remove('adding');
      });
    });
    
    // Variant selector functionality would go here
    // This depends on your specific Shopify setup
  });
</script>