{% comment %}
  quantum-layer.liquid
  Core initialization for the CyberCore quantum layer
  
  @MutationCompatible: All Variants
  @StrategyProfile: quantum-entangled
  @Version: 1.0.0
  
  Usage:
  {% render 'quantum-layer' %}
{% endcomment %}

{% assign quantum_registry = settings.quantum_registry | default: false %}
{% assign nonce_registry = settings.nonce_registry | default: false %}
{% assign current_date = 'now' | date: '%Y%m%d' %}
{% assign current_blueprint = current_date | append: '-latest' %}

<div id="quantum-layer" class="quantum-layer" data-quantum-version="1.0.0" data-quantum-date="{{ current_date }}">
  <div class="quantum-overlay" id="quantum-overlay"></div>
  <div class="quantum-notification" id="quantum-notification">
    <div class="quantum-notification-icon">
      <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2ZM12 20C7.58 20 4 16.42 4 12C4 7.58 7.58 4 12 4C16.42 4 20 7.58 20 12C20 16.42 16.42 20 12 20Z" fill="currentColor"/>
        <path d="M12 17C12.5523 17 13 16.5523 13 16C13 15.4477 12.5523 15 12 15C11.4477 15 11 15.4477 11 16C11 16.5523 11.4477 17 12 17Z" fill="currentColor"/>
        <path d="M12 7V13" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
      </svg>
    </div>
    <div class="quantum-notification-content">
      <div class="quantum-notification-title" id="quantum-notification-title"></div>
      <div class="quantum-notification-message" id="quantum-notification-message"></div>
    </div>
    <div class="quantum-notification-close" id="quantum-notification-close">
      <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M12.8 3.2L3.2 12.8" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/>
        <path d="M3.2 3.2L12.8 12.8" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/>
      </svg>
    </div>
  </div>
</div>

{% if quantum_registry %}
<script type="application/json" id="quantum-registry-data">
  {{ quantum_registry }}
</script>
{% endif %}

{% if nonce_registry %}
<script type="application/json" id="nonce-registry-data">
  {{ nonce_registry }}
</script>
{% endif %}

<script>
  // Global CyberCore Configuration
  window.CyberCore = window.CyberCore || {};
  window.CyberCore.config = {
    quantumEnabled: true,
    debugMode: {% if settings.debug_mode %}true{% else %}false{% endif %},
    currentDate: '{{ current_date }}',
    currentBlueprint: '{{ current_blueprint }}',
    assetRoot: '{{ "assets" | absolute_url }}',
    baseUrl: '{{ shop.url }}',
    maxMutationDepth: {{ settings.max_mutation_depth | default: 3 }},
    quantumProfiles: [
      'CyberLotus',
      'ObsidianBloom',
      'VoidBloom',
      'NeonVortex'
    ],
    glitchEffectChance: {{ settings.glitch_effect_chance | default: 15 }},
    sessionMutationLimit: {{ settings.session_mutation_limit | default: 5 }}
  };
  
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize quantum notification system
    initQuantumNotifications();
    
    // Only initialize core components when needed scripts are loaded
    const requiredScripts = [
      'neural-bus.js',
      'glitch-engine.js',
      'quantum-visualizer.js',
      'hologram-renderer.js',
      'ar-bridge.js',
      'cart-system.js'
    ];
    
    let loadedScripts = 0;
    
    // We need to ensure all required scripts are loaded before initializing
    const checkScriptsLoaded = () => {
      const scriptElements = document.querySelectorAll('script[src]');
      requiredScripts.forEach(script => {
        scriptElements.forEach(element => {
          if (element.src.includes(script)) {
            loadedScripts++;
          }
        });
      });
      
      if (loadedScripts >= 3) { // We need at least 3 core scripts to function
        initQuantumCore();
      } else {
        // Try to load missing scripts
        loadMissingScripts();
      }
    };
    
    // Load any missing scripts
    const loadMissingScripts = () => {
      const scriptElements = document.querySelectorAll('script[src]');
      const loadedScriptUrls = Array.from(scriptElements).map(element => element.src);
      
      const assetRoot = window.CyberCore.config.assetRoot;
      
      requiredScripts.forEach(script => {
        const isLoaded = loadedScriptUrls.some(url => url.includes(script));
        if (!isLoaded) {
          // Try to load the script
          const scriptElement = document.createElement('script');
          scriptElement.src = `${assetRoot}/${script}`;
          scriptElement.async = true;
          scriptElement.onload = () => {
            loadedScripts++;
            if (loadedScripts >= 3) {
              initQuantumCore();
            }
          };
          document.head.appendChild(scriptElement);
        }
      });
    };
    
    // Initialize the quantum core functionality
    const initQuantumCore = () => {
      const NeuralBus = window.NeuralBus;
      
      if (!NeuralBus) {
        console.warn('CyberCore: NeuralBus not found, some quantum features may not work properly');
        return;
      }
      
      // Initialize quantum registry
      const registryElement = document.getElementById('quantum-registry-data');
      let quantumRegistry = {};
      
      if (registryElement && registryElement.textContent) {
        try {
          quantumRegistry = JSON.parse(registryElement.textContent);
        } catch (error) {
          console.error('CyberCore: Failed to parse quantum registry', error);
        }
      }
      
      // Initialize nonce registry
      const nonceElement = document.getElementById('nonce-registry-data');
      let nonceRegistry = {};
      
      if (nonceElement && nonceElement.textContent) {
        try {
          nonceRegistry = JSON.parse(nonceElement.textContent);
        } catch (error) {
          console.error('CyberCore: Failed to parse nonce registry', error);
        }
      }
      
      // Register core with NeuralBus
      NeuralBus.register('quantum-core', {
        version: '1.0.0',
        registry: quantumRegistry,
        nonce: nonceRegistry,
        config: window.CyberCore.config
      });
      
      // Set up core event listeners
      NeuralBus.subscribe('product:view', handleProductView);
      NeuralBus.subscribe('cart:update', handleCartUpdate);
      NeuralBus.subscribe('quantum:glitch', handleQuantumGlitch);
      NeuralBus.subscribe('quantum:mutation', handleQuantumMutation);
      
      // Broadcast core initialized
      NeuralBus.publish('quantum:core:initialized', {
        timestamp: Date.now(),
        config: window.CyberCore.config
      });
      
      // Initialize web components if available
      if (customElements) {
        // Check if any components need registration
        if (!customElements.get('cart-preview-hologram')) {
          initHologramComponent();
        }
      }
      
      // Show notification that quantum layer is active
      showQuantumNotification(
        'Quantum Layer Initialized',
        'CyberCore systems are now operational'
      );
    };
    
    // Initialize hologram web component
    const initHologramComponent = () => {
      if (window.HologramComponent) {
        try {
          // Already loaded, just make sure it's registered
          if (!customElements.get('cart-preview-hologram')) {
            customElements.define('cart-preview-hologram', window.HologramComponent);
          }
        } catch (error) {
          console.error('CyberCore: Failed to register hologram component', error);
        }
      } else {
        // Try to load the component
        const script = document.createElement('script');
        script.src = `${window.CyberCore.config.assetRoot}/hologram-component.js`;
        script.async = true;
        document.head.appendChild(script);
      }
    };
    
    // Event handlers
    const handleProductView = (data) => {
      // Check for quantum products and apply effects
      if (data && data.product) {
        const product = data.product;
        
        // Check if product is in quantum registry
        const registryElement = document.getElementById('quantum-registry-data');
        if (registryElement && registryElement.textContent) {
          try {
            const registry = JSON.parse(registryElement.textContent);
            if (registry[product.id]) {
              // This is a quantum product
              const quantumData = registry[product.id];
              
              // Apply quantum effects based on profile
              if (window.GlitchEngine && Math.random() * 100 < window.CyberCore.config.glitchEffectChance) {
                window.GlitchEngine.applyEffect('quantum-ripple', {
                  target: `[data-product-id="${product.id}"]`,
                  duration: 2000,
                  intensity: quantumData.intensity || 0.5
                });
              }
            }
          } catch (error) {
            // Ignore parsing errors
          }
        }
      }
    };
    
    const handleCartUpdate = (data) => {
      // Check for quantum products in cart
      if (data && data.items) {
        const quantumProducts = data.items.filter(item => {
          return item.properties && (
            item.properties['_quantum_profile'] || 
            item.properties['_quantum_mutation']
          );
        });
        
        if (quantumProducts.length > 0) {
          // Notify user about quantum products
          showQuantumNotification(
            'Quantum Products Detected',
            `${quantumProducts.length} items in your cart contain quantum properties`
          );
        }
      }
    };
    
    const handleQuantumGlitch = (data) => {
      if (window.GlitchEngine) {
        window.GlitchEngine.applyEffect(data.effect || 'random', {
          target: data.target || 'body',
          duration: data.duration || 1000,
          intensity: data.intensity || 0.5
        });
      }
    };
    
    const handleQuantumMutation = (data) => {
      // Track mutations in session
      const sessionMutations = sessionStorage.getItem('quantum_mutations') || '0';
      const mutationCount = parseInt(sessionMutations) + 1;
      
      if (mutationCount <= window.CyberCore.config.sessionMutationLimit) {
        sessionStorage.setItem('quantum_mutations', mutationCount.toString());
        
        // Show notification about mutation
        showQuantumNotification(
          'Quantum Mutation Detected',
          data.message || 'A quantum state change has been detected in your session'
        );
      }
    };
    
    // Check for scripts after a short delay to allow for async loading
    setTimeout(checkScriptsLoaded, 500);
  });
  
  // Initialize quantum notifications
  function initQuantumNotifications() {
    const notification = document.getElementById('quantum-notification');
    const closeButton = document.getElementById('quantum-notification-close');
    
    if (notification && closeButton) {
      closeButton.addEventListener('click', function() {
        notification.classList.remove('active');
      });
    }
  }
  
  // Show quantum notification
  function showQuantumNotification(title, message, duration = 5000) {
    const notification = document.getElementById('quantum-notification');
    const titleElement = document.getElementById('quantum-notification-title');
    const messageElement = document.getElementById('quantum-notification-message');
    
    if (notification && titleElement && messageElement) {
      titleElement.textContent = title;
      messageElement.textContent = message;
      
      notification.classList.add('active');
      
      if (duration > 0) {
        setTimeout(function() {
          notification.classList.remove('active');
        }, duration);
      }
    }
  }
</script>

<style>
  .quantum-layer {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: 9000;
  }
  
  .quantum-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: transparent;
    opacity: 0;
    transition: opacity 0.3s ease;
    pointer-events: none;
  }
  
  .quantum-overlay.active {
    opacity: 1;
    pointer-events: auto;
  }
  
  .quantum-notification {
    position: fixed;
    bottom: -100px;
    right: 20px;
    width: 300px;
    background-color: rgba(0, 0, 0, 0.9);
    color: #00ffff;
    border: 1px solid #00ffff;
    border-radius: 8px;
    padding: 15px;
    display: flex;
    gap: 10px;
    box-shadow: 0 0 15px rgba(0, 255, 255, 0.3);
    transition: bottom 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    pointer-events: auto;
    z-index: 9001;
  }
  
  .quantum-notification.active {
    bottom: 20px;
  }
  
  .quantum-notification-icon {
    flex-shrink: 0;
    width: 24px;
    height: 24px;
    color: #00ffff;
  }
  
  .quantum-notification-content {
    flex-grow: 1;
  }
  
  .quantum-notification-title {
    font-size: 14px;
    font-weight: bold;
    margin-bottom: 5px;
  }
  
  .quantum-notification-message {
    font-size: 12px;
    opacity: 0.8;
  }
  
  .quantum-notification-close {
    flex-shrink: 0;
    width: 16px;
    height: 16px;
    cursor: pointer;
    opacity: 0.7;
    transition: opacity 0.2s ease;
    color: #00ffff;
  }
  
  .quantum-notification-close:hover {
    opacity: 1;
  }
  
  /* Different themes for notification */
  .quantum-notification.cyberlotus {
    color: #00ffff;
    border-color: #00ffff;
    box-shadow: 0 0 15px rgba(0, 255, 255, 0.3);
  }
  
  .quantum-notification.obsidianbloom {
    color: #ff00ff;
    border-color: #ff00ff;
    box-shadow: 0 0 15px rgba(255, 0, 255, 0.3);
  }
  
  .quantum-notification.voidbloom {
    color: #9900ff;
    border-color: #9900ff;
    box-shadow: 0 0 15px rgba(153, 0, 255, 0.3);
  }
  
  .quantum-notification.neonvortex {
    color: #00ff66;
    border-color: #00ff66;
    box-shadow: 0 0 15px rgba(0, 255, 102, 0.3);
  }
</style>