{% comment %}
  QUANTUM FEATURED PRODUCTS
  Holographic featured products with quantum effects

  @MutationCompatible: All Variants
  @StrategyProfile: quantum-entangled
  @Version: 1.0.0
{% endcomment %}

<section class="quantum-featured-products"
  data-neural-node
  data-profile="{{ section.settings.mutation_profile }}"
  data-glitch-level="{{ section.settings.glitch_level }}">

  <div class="quantum-products-backdrop"></div>
  <div class="quantum-products-particles" id="products-particles"></div>

  <div class="container">
    {% if section.settings.title != blank %}
      <div class="section-header">
        <h2 class="section-title {% if section.settings.enable_title_effects %}glitch-text{% endif %}" data-text="{{ section.settings.title | escape }}">{{ section.settings.title }}</h2>
        {% if section.settings.subtitle != blank %}
          <div class="section-subtitle">{{ section.settings.subtitle }}</div>
        {% endif %}
      </div>
    {% endif %}

    <div class="featured-products-grid" style="--grid-columns: {{ section.settings.columns_desktop }}; --grid-columns-mobile: {{ section.settings.columns_mobile }};">
      {% for block in section.blocks %}
        {% if block.type == 'product' %}
          {% assign product = all_products[block.settings.product] %}

          {% if product != blank %}
            <div class="product-card" {{ block.shopify_attributes }}
              data-product-id="{{ product.id }}"
              data-flux-intensity="{{ block.settings.flux_intensity }}"
              data-entanglement="{{ block.settings.entanglement }}">

              <div class="product-card-inner">
                <a href="{{ product.url }}" class="product-image-link">
                  <div class="product-image-wrapper">
                    {% if product.featured_image != blank %}
                      <div class="quantum-image-container {% if section.settings.enable_image_effects %}quantum-image{% endif %}">
                        <div class="quantum-image-glitch"></div>
                        <img src="{{ product.featured_image | img_url: '800x800', crop: 'center' }}"
                          alt="{{ product.title | escape }}"
                          class="product-image"
                          loading="lazy">
                      </div>
                    {% else %}
                      <div class="product-placeholder">
                        {{ product.title | slice: 0, 1 }}
                      </div>
                    {% endif %}

                    {% if product.compare_at_price > product.price %}
                      <div class="sale-badge">{{ 'products.product.on_sale' | t }}</div>
                    {% endif %}

                    {% if block.settings.custom_badge != blank %}
                      <div class="custom-badge">{{ block.settings.custom_badge }}</div>
                    {% endif %}

                    {% if block.settings.show_hologram %}
                      <div class="hologram-overlay">
                        <div class="hologram-lines"></div>
                        <div class="hologram-circle"></div>
                      </div>
                    {% endif %}
                  </div>
                </a>

                <div class="product-info">
                  <div class="product-title-wrapper">
                    <a href="{{ product.url }}" class="product-title-link">
                      <h3 class="product-title">{{ product.title }}</h3>
                    </a>

                    {% if section.settings.show_vendor %}
                      <div class="product-vendor">{{ product.vendor }}</div>
                    {% endif %}
                  </div>

                  {% if section.settings.show_price %}
                    <div class="product-price">
                      <span class="price {% if product.compare_at_price > product.price %}sale{% endif %}">
                        {{ product.price | money }}
                      </span>

                      {% if product.compare_at_price > product.price %}
                        <span class="compare-price">{{ product.compare_at_price | money }}</span>
                      {% endif %}
                    </div>
                  {% endif %}

                  {% if block.settings.show_neural_score %}
                    <div class="neural-score" data-score="{{ block.settings.neural_score }}">
                      <div class="score-label">Neural Score</div>
                      <div class="score-display">
                        <div class="score-track">
                          <div class="score-value" style="width: {{ block.settings.neural_score | times: 100 }}%"></div>
                        </div>
                        <div class="score-number">{{ block.settings.neural_score | times: 100 | round }}%</div>
                      </div>
                    </div>
                  {% endif %}

                  {% if block.settings.lore_fragment != blank %}
                    <div class="product-lore">
                      <span class="lore-fragment">{{ block.settings.lore_fragment }}</span>
                    </div>
                  {% endif %}

                  <div class="product-buttons">
                    {% if section.settings.show_quick_view %}
                      <button type="button" class="quantum-button quick-view-button" data-quick-view="{{ product.id }}">
                        {{ section.settings.quick_view_text }}
                      </button>
                    {% endif %}

                    {% if section.settings.show_add_to_cart %}
                      <button type="button" class="quantum-button add-to-cart-button" data-product-id="{{ product.id }}" data-variant-id="{{ product.selected_or_first_available_variant.id }}">
                        {{ section.settings.add_to_cart_text }}
                      </button>
                    {% endif %}
                  </div>
                </div>
              </div>
            </div>

          {% else %}
            <div class="product-card placeholder" {{ block.shopify_attributes }}>
              <div class="product-card-inner">
                <div class="product-placeholder-message">
                  {{ 'products.product.unavailable' | t }}
                </div>
              </div>
            </div>
          {% endif %}
        {% endif %}
      {% endfor %}
    </div>

    {% if section.blocks.size == 0 %}
      <div class="placeholder-container">
        <div class="placeholder-message">
          <p>Add product blocks to populate this section.</p>
        </div>
      </div>
    {% endif %}

    {% if section.settings.show_view_all and section.settings.view_all_url != blank %}
      <div class="view-all-container">
        <a href="{{ section.settings.view_all_url }}" class="view-all-link">
          {{ section.settings.view_all_text }}
        </a>
      </div>
    {% endif %}
  </div>

  {% if section.settings.show_quick_view %}
    <div class="quantum-quick-view-modal" id="quantum-quick-view-modal">
      <div class="quick-view-overlay"></div>
      <div class="quick-view-container">
        <button type="button" class="close-modal-button" id="close-quick-view">&times;</button>
        <div class="quick-view-content" id="quick-view-content">
          <!-- Quick view content loaded dynamically -->
          <div class="quick-view-loading">
            <div class="quantum-loading-indicator">
              <div class="loading-line"></div>
              <div class="loading-line"></div>
              <div class="loading-line"></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  {% endif %}
</section>

<style>
  .quantum-featured-products {
    position: relative;
    padding: 6rem 2rem;
    overflow: hidden;
    background-color: rgba(10, 0, 20, 0.95);
    color: #fff;
  }

  .quantum-products-backdrop {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(to bottom, rgba(10, 0, 20, 0.9), rgba(30, 0, 60, 0.6));
    z-index: 0;
  }

  .quantum-products-particles {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 1;
    opacity: 0.4;
  }

  .container {
    max-width: 1440px;
    margin: 0 auto;
    position: relative;
    z-index: 2;
  }

  .section-header {
    text-align: center;
    margin-bottom: 4rem;
  }

  .section-title {
    font-family: 'Courier New', monospace;
    font-size: 2.5rem;
    margin: 0 0 1rem 0;
    letter-spacing: 2px;
    color: #fff;
    position: relative;
    display: inline-block;
  }

  .glitch-text {
    position: relative;
    display: inline-block;
  }

  .glitch-text::before,
  .glitch-text::after {
    content: attr(data-text);
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0.8;
  }

  .glitch-text::before {
    animation: glitch-anim 5s infinite linear alternate-reverse;
    clip-path: polygon(0 0, 100% 0, 100% 35%, 0 35%);
    transform: translate(-0.04em, -0.04em);
    opacity: 0.8;
    color: rgba(255, 0, 255, 0.8);
  }

  .glitch-text::after {
    animation: glitch-anim-2 5s infinite linear alternate-reverse;
    clip-path: polygon(0 65%, 100% 65%, 100% 100%, 0 100%);
    transform: translate(0.04em, 0.04em);
    opacity: 0.8;
    color: rgba(0, 255, 255, 0.8);
  }

  .section-subtitle {
    font-size: 1.1rem;
    margin-top: 1rem;
    color: rgba(255, 255, 255, 0.7);
    max-width: 700px;
    margin-left: auto;
    margin-right: auto;
  }

  /* Featured Products Grid */
  .featured-products-grid {
    display: grid;
    grid-template-columns: repeat(var(--grid-columns, 4), 1fr);
    gap: 2rem;
  }

  .product-card {
    position: relative;
    transition: transform 0.3s ease;
    transform-style: preserve-3d;
    perspective: 1000px;
  }

  .product-card:hover {
    transform: translateY(-10px);
  }

  .product-card-inner {
    background: rgba(30, 0, 60, 0.3);
    border: 1px solid rgba(153, 0, 255, 0.3);
    border-radius: 8px;
    overflow: hidden;
    height: 100%;
    display: flex;
    flex-direction: column;
    transition: all 0.3s ease;
  }

  .product-card:hover .product-card-inner {
    border-color: rgba(153, 0, 255, 0.7);
    box-shadow: 0 0 20px rgba(153, 0, 255, 0.2);
  }

  .product-image-link {
    text-decoration: none;
    color: inherit;
    display: block;
  }

  .product-image-wrapper {
    position: relative;
    padding-top: 100%; /* Square Aspect Ratio */
    overflow: hidden;
  }

  .quantum-image-container {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    overflow: hidden;
  }

  .product-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
    transition: transform 0.6s cubic-bezier(0.165, 0.84, 0.44, 1);
  }

  .product-card:hover .product-image {
    transform: scale(1.05);
  }

  .quantum-image-glitch {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(45deg, rgba(153, 0, 255, 0.2), rgba(0, 255, 255, 0.2));
    opacity: 0;
    mix-blend-mode: overlay;
    pointer-events: none;
    z-index: 2;
    transition: opacity 0.3s ease;
  }

  .quantum-image:hover .quantum-image-glitch {
    opacity: 0.8;
    animation: quantum-glitch 2s infinite alternate;
  }

  .product-placeholder {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 3rem;
    background: linear-gradient(135deg, rgba(30, 0, 60, 0.7), rgba(80, 0, 160, 0.3));
    color: rgba(255, 255, 255, 0.5);
  }

  .sale-badge,
  .custom-badge {
    position: absolute;
    top: 10px;
    left: 10px;
    padding: 0.3rem 0.8rem;
    font-size: 0.8rem;
    background: rgba(255, 0, 100, 0.7);
    color: #fff;
    border-radius: 4px;
    z-index: 3;
  }

  .custom-badge {
    background: rgba(153, 0, 255, 0.7);
    top: 10px;
    right: 10px;
    left: auto;
  }

  /* Hologram Effect */
  .hologram-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: 3;
    opacity: 0.3;
    transition: opacity 0.3s ease;
  }

  .product-card:hover .hologram-overlay {
    opacity: 0.6;
  }

  .hologram-lines {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: repeating-linear-gradient(
      to bottom,
      transparent,
      transparent 2px,
      rgba(153, 0, 255, 0.2) 3px,
      transparent 4px
    );
    animation: hologram-scan 10s linear infinite;
  }

  .hologram-circle {
    position: absolute;
    width: 150%;
    height: 150%;
    top: -25%;
    left: -25%;
    background: radial-gradient(
      circle at center,
      rgba(153, 0, 255, 0.1) 0%,
      rgba(0, 255, 255, 0.1) 30%,
      transparent 70%
    );
    transform: rotate(0deg);
    animation: hologram-rotate 20s linear infinite;
  }

  /* Product Info */
  .product-info {
    padding: 1.5rem;
    display: flex;
    flex-direction: column;
    flex-grow: 1;
  }

  .product-title-wrapper {
    margin-bottom: 1rem;
  }

  .product-title-link {
    text-decoration: none;
    color: inherit;
  }

  .product-title {
    font-size: 1.1rem;
    margin: 0 0 0.5rem 0;
    color: rgba(153, 0, 255, 0.9);
    font-weight: normal;
  }

  .product-vendor {
    font-size: 0.9rem;
    color: rgba(255, 255, 255, 0.6);
  }

  .product-price {
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
  }

  .price {
    font-size: 1.1rem;
    color: rgba(255, 255, 255, 0.9);
  }

  .price.sale {
    color: rgba(255, 0, 100, 0.9);
  }

  .compare-price {
    font-size: 0.9rem;
    color: rgba(255, 255, 255, 0.5);
    text-decoration: line-through;
    margin-left: 0.5rem;
  }

  /* Neural Score */
  .neural-score {
    margin-bottom: 1rem;
  }

  .score-label {
    font-size: 0.8rem;
    color: rgba(255, 255, 255, 0.7);
    margin-bottom: 0.25rem;
  }

  .score-display {
    display: flex;
    align-items: center;
  }

  .score-track {
    flex-grow: 1;
    height: 4px;
    background: rgba(153, 0, 255, 0.2);
    border-radius: 2px;
    overflow: hidden;
    margin-right: 0.5rem;
  }

  .score-value {
    height: 100%;
    background: rgba(153, 0, 255, 0.7);
    transition: width 0.3s ease;
  }

  .score-number {
    font-size: 0.9rem;
    color: rgba(153, 0, 255, 0.9);
    font-family: 'Courier New', monospace;
  }

  /* Lore Fragment */
  .product-lore {
    margin-bottom: 1.5rem;
    padding: 0.75rem;
    background: rgba(153, 0, 255, 0.1);
    border-left: 2px solid rgba(153, 0, 255, 0.4);
    font-style: italic;
    font-size: 0.9rem;
    color: rgba(255, 255, 255, 0.8);
  }

  /* Buttons */
  .product-buttons {
    margin-top: auto;
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
    gap: 0.75rem;
  }

  .quantum-button {
    background: rgba(153, 0, 255, 0.2);
    border: 1px solid rgba(153, 0, 255, 0.5);
    color: #fff;
    text-align: center;
    padding: 0.75rem 1rem;
    border-radius: 4px;
    cursor: pointer;
    font-family: 'Courier New', monospace;
    text-decoration: none;
    transition: all 0.2s ease;
    position: relative;
    overflow: hidden;
  }

  .quantum-button:hover {
    background: rgba(153, 0, 255, 0.3);
    border-color: rgba(153, 0, 255, 0.7);
  }

  .quantum-button::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(153, 0, 255, 0.3), transparent);
    transition: all 0.6s ease;
  }

  .quantum-button:hover::before {
    left: 100%;
  }

  /* View All Link */
  .view-all-container {
    text-align: center;
    margin-top: 3rem;
  }

  .view-all-link {
    display: inline-block;
    background: rgba(153, 0, 255, 0.2);
    border: 1px solid rgba(153, 0, 255, 0.5);
    color: #fff;
    text-align: center;
    padding: 0.75rem 2rem;
    border-radius: 4px;
    cursor: pointer;
    font-family: 'Courier New', monospace;
    text-decoration: none;
    transition: all 0.2s ease;
    position: relative;
    overflow: hidden;
  }

  .view-all-link:hover {
    background: rgba(153, 0, 255, 0.3);
    border-color: rgba(153, 0, 255, 0.7);
  }

  .view-all-link::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(153, 0, 255, 0.3), transparent);
    transition: all 0.6s ease;
  }

  .view-all-link:hover::before {
    left: 100%;
  }

  /* Quick View Modal */
  .quantum-quick-view-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: none;
    z-index: 1000;
    align-items: center;
    justify-content: center;
  }

  .quantum-quick-view-modal.active {
    display: flex;
  }

  .quick-view-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(10, 0, 20, 0.85);
    backdrop-filter: blur(5px);
  }

  .quick-view-container {
    position: relative;
    width: 90%;
    max-width: 1000px;
    max-height: 90vh;
    background: rgba(30, 0, 60, 0.9);
    border: 1px solid rgba(153, 0, 255, 0.4);
    border-radius: 8px;
    overflow: hidden;
    z-index: 1001;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
  }

  .close-modal-button {
    position: absolute;
    top: 1rem;
    right: 1.5rem;
    background: none;
    border: none;
    color: rgba(255, 255, 255, 0.7);
    font-size: 2rem;
    cursor: pointer;
    z-index: 1002;
    transition: all 0.2s ease;
  }

  .close-modal-button:hover {
    color: rgba(255, 0, 255, 0.9);
    transform: rotate(90deg);
  }

  .quick-view-content {
    padding: 2rem;
    overflow-y: auto;
    max-height: 90vh;
  }

  .quantum-loading-indicator {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 200px;
  }

  .loading-line {
    width: 100px;
    height: 4px;
    background: rgba(153, 0, 255, 0.3);
    margin: 5px 0;
    border-radius: 2px;
    position: relative;
    overflow: hidden;
  }

  .loading-line::after {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(153, 0, 255, 0.7), transparent);
    animation: loading-animation 1.5s infinite;
  }

  .loading-line:nth-child(2)::after {
    animation-delay: 0.2s;
  }

  .loading-line:nth-child(3)::after {
    animation-delay: 0.4s;
  }

  /* Placeholder */
  .placeholder-container {
    padding: 4rem 2rem;
    background: rgba(30, 0, 60, 0.3);
    border: 1px solid rgba(153, 0, 255, 0.3);
    border-radius: 8px;
    text-align: center;
  }

  .placeholder-message {
    color: rgba(255, 255, 255, 0.7);
    font-size: 1.1rem;
  }

  .product-placeholder-message {
    padding: 2rem;
    text-align: center;
    color: rgba(255, 255, 255, 0.5);
  }

  /* Animations */
  @keyframes glitch-anim {
    0% { transform: translate(0); }
    20% { transform: translate(-2px, 1px); }
    40% { transform: translate(-1px, -1px); }
    60% { transform: translate(1px, 1px); }
    80% { transform: translate(-1px, -1px); }
    100% { transform: translate(0); }
  }

  @keyframes glitch-anim-2 {
    0% { transform: translate(0); }
    20% { transform: translate(2px, 1px); }
    40% { transform: translate(-1px, -1px); }
    60% { transform: translate(1px, -1px); }
    80% { transform: translate(1px, -2px); }
    100% { transform: translate(0); }
  }

  @keyframes quantum-glitch {
    0% { clip-path: inset(0 0 0 0); }
    5% { clip-path: inset(8% 0 0 0); }
    10% { clip-path: inset(0 0 0 0); }
    15% { clip-path: inset(0 0 8% 0); }
    20% { clip-path: inset(50% 0 0 0); }
    25% { clip-path: inset(0 0 0 0); }
    30% { clip-path: inset(0 8% 0 0); }
    35% { clip-path: inset(0 0 0 8%); }
    40% { clip-path: inset(0 0 0 0); }
    45% { clip-path: inset(0 0 8% 0); }
    50% { clip-path: inset(8% 0 0 0); }
    55% { clip-path: inset(0 0 0 0); }
    60% { clip-path: inset(0 8% 0 0); }
    65% { clip-path: inset(0 0 0 0); }
    70% { clip-path: inset(0 0 0 8%); }
    75% { clip-path: inset(0 0 0 0); }
    80% { clip-path: inset(8% 0 0 0); }
    85% { clip-path: inset(0 0 0 0); }
    90% { clip-path: inset(0 8% 0 0); }
    95% { clip-path: inset(0 0 8% 0); }
    100% { clip-path: inset(0 0 0 0); }
  }

  @keyframes hologram-scan {
    0% { background-position: 0 0; }
    100% { background-position: 0 100%; }
  }

  @keyframes hologram-rotate {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  @keyframes loading-animation {
    0% { left: -100%; }
    100% { left: 100%; }
  }

  /* Responsive */
  @media (max-width: 1024px) {
    .featured-products-grid {
      grid-template-columns: repeat(3, 1fr);
    }

    .quantum-featured-products {
      padding: 4rem 1.5rem;
    }
  }

  @media (max-width: 768px) {
    .featured-products-grid {
      grid-template-columns: repeat(2, 1fr);
    }

    .section-title {
      font-size: 2rem;
    }
  }

  @media (max-width: 480px) {
    .featured-products-grid {
      grid-template-columns: repeat(var(--grid-columns-mobile, 1), 1fr);
    }

    .product-buttons {
      grid-template-columns: 1fr;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize Quantum Visualizer for particles if available
    if (window.QuantumVisualizer) {
      const productsSection = document.querySelector('.quantum-featured-products');
      const profile = productsSection.getAttribute('data-profile') || 'VoidBloom';
      const glitchLevel = parseFloat(productsSection.getAttribute('data-glitch-level') || '0.5');

      const productsVisualizer = new QuantumVisualizer({
        container: document.getElementById('products-particles'),
        particleCount: 30,
        colorScheme: profile,
        dimensions: '2d',
        fractalMode: false,
        intensity: glitchLevel
      });

      // Initialize with quantum state data
      const quantumData = Array(10).fill().map((_, i) => ({
        id: 'qp' + i,
        state: Math.random() > 0.5 ? 'superposition' : 'entangled',
        probability: Math.random(),
        profile: profile
      }));

      productsVisualizer.update(quantumData);

      // Use Intersection Observer to activate quantum effects when visible
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            productsVisualizer.activate();
          } else {
            productsVisualizer.deactivate();
          }
        });
      }, { threshold: 0.1 });

      observer.observe(productsSection);
    }

    // Add to cart functionality
    document.querySelectorAll('.add-to-cart-button').forEach(button => {
      button.addEventListener('click', function() {
        const productId = this.getAttribute('data-product-id');
        const variantId = this.getAttribute('data-variant-id');

        // Add quantum animation effect on click
        this.classList.add('adding');

        // Simulate adding to cart
        setTimeout(() => {
          this.classList.remove('adding');

          // Send event to NeuralBus if available
          if (window.NeuralBus && NeuralBus.emit) {
            NeuralBus.emit('cart:add', {
              productId: productId,
              variantId: variantId,
              timestamp: new Date().toISOString()
            });
          }

          // If we have a cart system, add the product
          if (window.CartSystem && CartSystem.addItem) {
            CartSystem.addItem(variantId, 1);
          } else {
            // Fallback to standard Shopify AJAX API
            const formData = {
              'items': [{
                'id': variantId,
                'quantity': 1
              }]
            };

            fetch('/cart/add.js', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(formData)
            })
            .then(response => response.json())
            .then(data => {
              // Success! Trigger cart open or show message
              console.log('Item added to cart:', data);

              // Refresh cart drawer if it exists
              if (window.refreshCart) {
                window.refreshCart();
              }
            })
            .catch(error => {
              console.error('Error adding item to cart:', error);
            });
          }
        }, 500);
      });
    });

    // Quick view functionality
    if (document.querySelector('.quantum-quick-view-modal')) {
      const modal = document.querySelector('.quantum-quick-view-modal');
      const closeButton = document.querySelector('#close-quick-view');
      const quickViewContent = document.querySelector('#quick-view-content');

      // Open quick view modal
      document.querySelectorAll('.quick-view-button').forEach(button => {
        button.addEventListener('click', function() {
          const productId = this.getAttribute('data-quick-view');
          modal.classList.add('active');
          document.body.style.overflow = 'hidden';

          // Load product content
          quickViewContent.innerHTML = '<div class="quantum-loading-indicator"><div class="loading-line"></div><div class="loading-line"></div><div class="loading-line"></div></div>';

          // Fetch product data - in a real implementation, this would be a proper AJAX call to a product endpoint
          setTimeout(() => {
            // For demo, just showing loading state then simple content
            // In real implementation, fetch('/products/HANDLE?view=quick-view') would be used
            quickViewContent.innerHTML = `
              <div class="quick-view-product">
                <h2>Product #${productId} Quick View</h2>
                <p>This is a placeholder for quick view content. In a real implementation, this would display the product details.</p>
              </div>
            `;
          }, 1000);
        });
      });

      // Close quick view modal
      closeButton.addEventListener('click', function() {
        modal.classList.remove('active');
        document.body.style.overflow = '';
      });

      // Close when clicking outside content
      modal.addEventListener('click', function(event) {
        if (event.target === modal || event.target.classList.contains('quick-view-overlay')) {
          modal.classList.remove('active');
          document.body.style.overflow = '';
        }
      });
    }

    // Product card hover effects and quantum animations
    const productCards = document.querySelectorAll('.product-card');

    productCards.forEach(card => {
      // Apply pulsing effect to neural score bars if present
      const scoreBar = card.querySelector('.score-value');
      const fluxIntensity = parseFloat(card.getAttribute('data-flux-intensity') || '0.5');

      if (scoreBar) {
        // Subtle pulse animation for score bars
        setInterval(() => {
          const currentWidth = parseFloat(scoreBar.style.width);
          const variationRange = 5 * fluxIntensity; // higher flux = more variation
          const newWidth = currentWidth + (Math.random() * variationRange - variationRange/2);
          scoreBar.style.width = `${Math.max(0, Math.min(100, newWidth))}%`;
        }, 2000);
      }

      // Quantum entanglement effect between products
      const entanglement = card.getAttribute('data-entanglement');
      if (entanglement) {
        // Find entangled partner(s)
        const entangledIds = entanglement.split(',').map(id => id.trim());

        card.addEventListener('mouseenter', function() {
          entangledIds.forEach(id => {
            const entangledCard = document.querySelector(`.product-card[data-product-id="${id}"]`);
            if (entangledCard) {
              entangledCard.classList.add('entangled');

              // Add subtle pulse effect to entangled card
              const entangledInner = entangledCard.querySelector('.product-card-inner');
              if (entangledInner) {
                entangledInner.style.borderColor = 'rgba(153, 0, 255, 0.6)';
                entangledInner.style.boxShadow = '0 0 15px rgba(153, 0, 255, 0.3)';
              }
            }
          });
        });

        card.addEventListener('mouseleave', function() {
          entangledIds.forEach(id => {
            const entangledCard = document.querySelector(`.product-card[data-product-id="${id}"]`);
            if (entangledCard) {
              entangledCard.classList.remove('entangled');

              // Remove pulse effect
              const entangledInner = entangledCard.querySelector('.product-card-inner');
              if (entangledInner) {
                entangledInner.style.borderColor = '';
                entangledInner.style.boxShadow = '';
              }
            }
          });
        });
      }
    });

    // Connect to NeuralBus if available
    if (window.NeuralBus) {
      const productsSection = document.querySelector('.quantum-featured-products');
      const profile = productsSection.getAttribute('data-profile') || 'VoidBloom';

      if (NeuralBus.register) {
        NeuralBus.register('quantum-featured-products', {
          version: '1.0.0',
          profile: profile
        });
      }

      // Subscribe to quantum mutation events
      if (NeuralBus.subscribe) {
        NeuralBus.subscribe('quantum:mutation', data => {
          if (data.profile === profile || !data.profile) {
            // Apply mutation effects to product cards
            document.querySelectorAll('.product-card').forEach(card => {
              // Brief border glow effect
              card.querySelector('.product-card-inner').style.borderColor = 'rgba(153, 0, 255, 0.8)';
              card.querySelector('.product-card-inner').style.boxShadow = '0 0 20px rgba(153, 0, 255, 0.4)';

              // Temporarily activate glitch on images
              const glitchElement = card.querySelector('.quantum-image-glitch');
              if (glitchElement) {
                glitchElement.style.opacity = '0.8';
                glitchElement.style.animation = 'quantum-glitch 1s infinite alternate';

                setTimeout(() => {
                  glitchElement.style.opacity = '';
                  glitchElement.style.animation = '';
                }, 1000);
              }

              setTimeout(() => {
                card.querySelector('.product-card-inner').style.borderColor = '';
                card.querySelector('.product-card-inner').style.boxShadow = '';
              }, 1000);

              // Apply effect to hologram overlays if present
              const hologram = card.querySelector('.hologram-overlay');
              if (hologram) {
                hologram.style.opacity = '0.8';

                setTimeout(() => {
                  hologram.style.opacity = '';
                }, 1500);
              }

              // Update neural score bars if present
              const scoreBar = card.querySelector('.score-value');
              if (scoreBar) {
                const fluxIntensity = parseFloat(card.getAttribute('data-flux-intensity') || '0.5');
                const mutationIntensity = data.intensity || 0.5;

                // Stronger effect on scores with flux intensity close to mutation intensity
                if (Math.abs(fluxIntensity - mutationIntensity) < 0.3) {
                  scoreBar.style.backgroundColor = 'rgba(255, 0, 255, 0.8)';

                  setTimeout(() => {
                    scoreBar.style.backgroundColor = '';
                  }, 1500);
                }
              }
            });
          }
        });
      }
    }
  });
</script>

{% schema %}
{
  "name": "Quantum Featured Products",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Section Title",
      "default": "Quantum Artifacts"
    },
    {
      "type": "text",
      "id": "subtitle",
      "label": "Section Subtitle",
      "default": "Reality-altering neural products"
    },
    {
      "type": "select",
      "id": "mutation_profile",
      "label": "Mutation Profile",
      "options": [
        {
          "value": "CyberLotus",
          "label": "CyberLotus (Pink/Cyan)"
        },
        {
          "value": "ObsidianBloom",
          "label": "ObsidianBloom (Purple/Pink)"
        },
        {
          "value": "VoidBloom",
          "label": "VoidBloom (Purple/Magenta)"
        },
        {
          "value": "NeonVortex",
          "label": "NeonVortex (Blue/Orange)"
        }
      ],
      "default": "VoidBloom"
    },
    {
      "type": "range",
      "id": "glitch_level",
      "min": 0,
      "max": 1,
      "step": 0.1,
      "label": "Glitch Intensity",
      "default": 0.4
    },
    {
      "type": "checkbox",
      "id": "enable_title_effects",
      "label": "Enable Title Glitch Effects",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "enable_image_effects",
      "label": "Enable Image Quantum Effects",
      "default": true
    },
    {
      "type": "range",
      "id": "columns_desktop",
      "min": 2,
      "max": 4,
      "step": 1,
      "label": "Columns on desktop",
      "default": 4
    },
    {
      "type": "range",
      "id": "columns_mobile",
      "min": 1,
      "max": 2,
      "step": 1,
      "label": "Columns on mobile",
      "default": 1
    },
    {
      "type": "checkbox",
      "id": "show_vendor",
      "label": "Show Product Vendor",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_price",
      "label": "Show Product Price",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_add_to_cart",
      "label": "Show Add to Cart Button",
      "default": true
    },
    {
      "type": "text",
      "id": "add_to_cart_text",
      "label": "Add to Cart Text",
      "default": "Add to Neural Matrix"
    },
    {
      "type": "checkbox",
      "id": "show_quick_view",
      "label": "Show Quick View Button",
      "default": true
    },
    {
      "type": "text",
      "id": "quick_view_text",
      "label": "Quick View Text",
      "default": "Quick Scan"
    },
    {
      "type": "checkbox",
      "id": "show_view_all",
      "label": "Show View All Link",
      "default": true
    },
    {
      "type": "text",
      "id": "view_all_text",
      "label": "View All Text",
      "default": "Explore All Artifacts"
    },
    {
      "type": "url",
      "id": "view_all_url",
      "label": "View All URL"
    }
  ],
  "blocks": [
    {
      "type": "product",
      "name": "Product",
      "settings": [
        {
          "type": "product",
          "id": "product",
          "label": "Product"
        },
        {
          "type": "text",
          "id": "custom_badge",
          "label": "Custom Badge",
          "info": "Leave blank to hide the badge"
        },
        {
          "type": "checkbox",
          "id": "show_neural_score",
          "label": "Show Neural Score",
          "default": true
        },
        {
          "type": "range",
          "id": "neural_score",
          "min": 0,
          "max": 1,
          "step": 0.1,
          "label": "Neural Score",
          "default": 0.7
        },
        {
          "type": "checkbox",
          "id": "show_hologram",
          "label": "Show Hologram Effect",
          "default": true
        },
        {
          "type": "textarea",
          "id": "lore_fragment",
          "label": "Lore Fragment",
          "info": "Add a short bit of product lore"
        },
        {
          "type": "text",
          "id": "entanglement",
          "label": "Entangled Products",
          "info": "Comma-separated product IDs for quantum entanglement effects"
        },
        {
          "type": "range",
          "id": "flux_intensity",
          "min": 0,
          "max": 1,
          "step": 0.1,
          "label": "Flux Intensity",
          "default": 0.5,
          "info": "Controls the visual fluctuations for this product"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Quantum Featured Products",
      "category": "Products",
      "blocks": [
        {
          "type": "product"
        },
        {
          "type": "product"
        },
        {
          "type": "product"
        },
        {
          "type": "product"
        }
      ]
    }
  ]
}
{% endschema %}
