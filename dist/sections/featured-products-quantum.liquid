{% comment %}
  FEATURED PRODUCTS QUANTUM
  Dynamic featured products section with quantum effects

  @MutationCompatible: VoidBloom, CyberLotus
  @StrategyProfile: quantum-entangled
  @Version: 1.0.0
{% endcomment %}

<section class="featured-products-quantum"
  data-neural-node
  data-profile="{{ section.settings.mutation_profile }}"
  data-glitch-level="{{ section.settings.glitch_level }}"
  data-bloom-intensity="{{ section.settings.bloom_intensity }}">

  <div class="quantum-backdrop"></div>
  <div class="quantum-particles" id="featured-products-particles"></div>

  <div class="container">
    <div class="section-header">
      <h2 class="section-title glitch-text" data-text="{{ section.settings.title | escape }}">{{ section.settings.title }}</h2>
      {% if section.settings.subtitle != blank %}
        <div class="section-subtitle">{{ section.settings.subtitle }}</div>
      {% endif %}
    </div>

    <div class="featured-products-grid"
      data-products-grid
      data-quantum-entanglement="{{ section.settings.enable_entanglement }}"
      style="--grid-columns: {{ section.settings.products_per_row }};">

      {% assign collection = collections[section.settings.collection] %}
      {% if collection != blank %}
        {% assign products = collection.products %}
        {% if section.settings.products_limit > 0 %}
          {% assign products = collection.products | limit: section.settings.products_limit %}
        {% endif %}

        {% for product in products %}
          <div class="product-card"
            data-product-card
            data-product-id="{{ product.id }}"
            data-quantum-state="unobserved"
            data-trauma-index="{{ product.metafields.quantum.trauma_index | default: '0.5' }}">

            <div class="product-card-inner">
              <div class="product-image-wrapper">
                {% if product.featured_image != blank %}
                  <div class="quantum-image-container">
                    <div class="quantum-image-glitch"></div>
                    <img src="{{ product.featured_image | img_url: '600x600', crop: 'center' }}"
                      alt="{{ product.featured_image.alt | escape }}"
                      class="product-image"
                      loading="lazy"
                      data-quantum-image>
                  </div>
                {% else %}
                  <div class="quantum-image-container placeholder">
                    <div class="placeholder-image">{{ product.title | slice: 0, 1 }}</div>
                  </div>
                {% endif %}

                <div class="product-card-overlay">
                  {% if section.settings.show_quick_view %}
                    <button type="button" class="quick-view-button" data-quick-view="{{ product.id }}">
                      <span class="quick-view-text">{{ section.settings.quick_view_text }}</span>
                    </button>
                  {% endif %}
                </div>
              </div>

              <div class="product-info">
                <h3 class="product-title">
                  <a href="{{ product.url }}" class="product-link">{{ product.title }}</a>
                </h3>

                {% if section.settings.show_vendor %}
                  <div class="product-vendor">{{ product.vendor }}</div>
                {% endif %}

                <div class="product-price">
                  {% if product.price_varies %}
                    <span class="price-range">{{ product.price_min | money }} - {{ product.price_max | money }}</span>
                  {% else %}
                    <span class="price">{{ product.price | money }}</span>

                    {% if product.compare_at_price > product.price %}
                      <span class="compare-price">{{ product.compare_at_price | money }}</span>
                      <span class="price-discount">
                        {{ product.compare_at_price | minus: product.price | times: 100 | divided_by: product.compare_at_price }}% off
                      </span>
                    {% endif %}
                  {% endif %}
                </div>

                {% if product.available %}
                  {% if product.variants.size > 1 %}
                    <a href="{{ product.url }}" class="product-button view-options">{{ section.settings.view_options_text }}</a>
                  {% else %}
                    <button type="button"
                      class="product-button add-to-cart"
                      data-add-to-cart="{{ product.variants.first.id }}"
                      data-quantum-button>
                      <span class="button-text">{{ section.settings.add_to_cart_text }}</span>
                      <span class="quantum-loader"></span>
                    </button>
                  {% endif %}
                {% else %}
                  <div class="sold-out">{{ section.settings.sold_out_text }}</div>
                {% endif %}
              </div>
            </div>
          </div>
        {% endfor %}
      {% else %}
        <div class="placeholder-message">{{ section.settings.empty_collection_message }}</div>
      {% endif %}
    </div>

    {% if section.settings.show_view_all and collection != blank %}
      <div class="view-all-container">
        <a href="{{ collection.url }}" class="view-all-button">{{ section.settings.view_all_text }}</a>
      </div>
    {% endif %}
  </div>
</section>

<style>
  .featured-products-quantum {
    position: relative;
    padding: 6rem 2rem;
    overflow: hidden;
    background-color: rgba(10, 0, 20, 0.95);
    color: #fff;
  }

  .quantum-backdrop {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(to bottom, rgba(10, 0, 20, 0.9), rgba(30, 0, 60, 0.6));
    z-index: 0;
  }

  .quantum-particles {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 1;
    opacity: 0.4;
  }

  .container {
    max-width: 1440px;
    margin: 0 auto;
    position: relative;
    z-index: 2;
  }

  .section-header {
    text-align: center;
    margin-bottom: 4rem;
  }

  .section-title {
    font-family: 'Courier New', monospace;
    font-size: 2.5rem;
    margin: 0 0 1rem 0;
    letter-spacing: 2px;
    color: #fff;
    position: relative;
    display: inline-block;
  }

  .glitch-text {
    position: relative;
    display: inline-block;
  }

  .glitch-text::before,
  .glitch-text::after {
    content: attr(data-text);
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0.8;
  }

  .glitch-text::before {
    animation: glitch-anim 5s infinite linear alternate-reverse;
    clip-path: polygon(0 0, 100% 0, 100% 35%, 0 35%);
    transform: translate(-0.04em, -0.04em);
    opacity: 0.8;
    color: rgba(255, 0, 255, 0.8);
  }

  .glitch-text::after {
    animation: glitch-anim-2 5s infinite linear alternate-reverse;
    clip-path: polygon(0 65%, 100% 65%, 100% 100%, 0 100%);
    transform: translate(0.04em, 0.04em);
    opacity: 0.8;
    color: rgba(0, 255, 255, 0.8);
  }

  .section-subtitle {
    font-size: 1.1rem;
    margin-top: 1rem;
    color: rgba(255, 255, 255, 0.7);
    max-width: 700px;
    margin-left: auto;
    margin-right: auto;
  }

  .featured-products-grid {
    display: grid;
    grid-template-columns: repeat(var(--grid-columns, 4), 1fr);
    gap: 2rem;
    margin-bottom: 3rem;
  }

  .product-card {
    position: relative;
    transition: transform 0.3s ease;
    transform-style: preserve-3d;
    perspective: 1000px;
  }

  .product-card:hover {
    transform: translateY(-10px);
  }

  .product-card-inner {
    background: rgba(30, 0, 60, 0.3);
    border: 1px solid rgba(153, 0, 255, 0.3);
    border-radius: 8px;
    overflow: hidden;
    height: 100%;
    display: flex;
    flex-direction: column;
    position: relative;
    transition: all 0.3s ease;
  }

  .product-card:hover .product-card-inner {
    border-color: rgba(153, 0, 255, 0.7);
    box-shadow: 0 0 20px rgba(153, 0, 255, 0.2);
  }

  .product-image-wrapper {
    position: relative;
    padding-top: 100%;
    overflow: hidden;
  }

  .quantum-image-container {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    overflow: hidden;
  }

  .product-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
    transition: transform 0.6s cubic-bezier(0.165, 0.84, 0.44, 1);
  }

  .product-card:hover .product-image {
    transform: scale(1.05);
  }

  .quantum-image-glitch {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(45deg, rgba(153, 0, 255, 0.2), rgba(0, 255, 255, 0.2));
    opacity: 0;
    mix-blend-mode: overlay;
    pointer-events: none;
    z-index: 2;
    transition: opacity 0.3s ease;
  }

  .product-card:hover .quantum-image-glitch {
    opacity: 0.8;
    animation: quantum-glitch 2s infinite alternate;
  }

  .placeholder-image {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    background: linear-gradient(135deg, rgba(30, 0, 60, 0.7), rgba(80, 0, 160, 0.3));
    color: #fff;
    font-size: 3rem;
  }

  .product-card-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    background: rgba(20, 0, 40, 0.5);
    opacity: 0;
    transition: opacity 0.3s ease;
    z-index: 3;
  }

  .product-card:hover .product-card-overlay {
    opacity: 1;
  }

  .quick-view-button {
    background: rgba(153, 0, 255, 0.3);
    border: 1px solid rgba(153, 0, 255, 0.6);
    color: #fff;
    padding: 0.75rem 1.5rem;
    border-radius: 4px;
    font-family: 'Courier New', monospace;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .quick-view-button:hover {
    background: rgba(153, 0, 255, 0.5);
  }

  .product-info {
    padding: 1.5rem;
    display: flex;
    flex-direction: column;
    flex-grow: 1;
  }

  .product-title {
    font-size: 1.1rem;
    margin: 0 0 0.5rem 0;
    font-weight: normal;
  }

  .product-link {
    color: rgba(255, 255, 255, 0.9);
    text-decoration: none;
    transition: color 0.2s ease;
  }

  .product-link:hover {
    color: rgba(153, 0, 255, 0.9);
  }

  .product-vendor {
    font-size: 0.9rem;
    color: rgba(153, 0, 255, 0.7);
    margin-bottom: 0.75rem;
  }

  .product-price {
    margin-bottom: 1.5rem;
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    gap: 0.5rem;
  }

  .price, .price-range {
    font-size: 1.1rem;
    color: rgba(255, 255, 255, 0.9);
  }

  .compare-price {
    font-size: 0.9rem;
    color: rgba(255, 255, 255, 0.6);
    text-decoration: line-through;
  }

  .price-discount {
    font-size: 0.8rem;
    background: rgba(153, 0, 255, 0.3);
    padding: 0.25rem 0.5rem;
    border-radius: 3px;
    color: rgba(255, 255, 255, 0.9);
  }

  .product-button {
    margin-top: auto;
    display: inline-block;
    background: rgba(153, 0, 255, 0.2);
    border: 1px solid rgba(153, 0, 255, 0.5);
    color: #fff;
    text-align: center;
    padding: 0.75rem 1rem;
    border-radius: 4px;
    cursor: pointer;
    font-family: 'Courier New', monospace;
    text-decoration: none;
    transition: all 0.2s ease;
    position: relative;
    overflow: hidden;
  }

  .product-button:hover {
    background: rgba(153, 0, 255, 0.3);
    border-color: rgba(153, 0, 255, 0.7);
  }

  .product-button::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(153, 0, 255, 0.3), transparent);
    transition: all 0.6s ease;
  }

  .product-button:hover::before {
    left: 100%;
  }

  .sold-out {
    margin-top: auto;
    background: rgba(255, 0, 0, 0.2);
    border: 1px solid rgba(255, 0, 0, 0.3);
    color: rgba(255, 255, 255, 0.8);
    text-align: center;
    padding: 0.75rem 1rem;
    border-radius: 4px;
    font-family: 'Courier New', monospace;
  }

  .quantum-loader {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) scale(0);
    width: 20px;
    height: 20px;
    border-radius: 50%;
    border: 2px solid rgba(153, 0, 255, 0.5);
    border-top-color: rgba(0, 255, 255, 0.8);
    animation: spin 1s infinite linear;
    opacity: 0;
    transition: all 0.3s ease;
  }

  .product-button.loading .button-text {
    opacity: 0;
  }

  .product-button.loading .quantum-loader {
    opacity: 1;
    transform: translate(-50%, -50%) scale(1);
  }

  .view-all-container {
    text-align: center;
    margin-top: 2rem;
  }

  .view-all-button {
    display: inline-block;
    background: transparent;
    border: 1px solid rgba(153, 0, 255, 0.5);
    color: rgba(255, 255, 255, 0.9);
    padding: 0.75rem 2rem;
    border-radius: 4px;
    font-family: 'Courier New', monospace;
    text-decoration: none;
    transition: all 0.2s ease;
    position: relative;
    overflow: hidden;
  }

  .view-all-button:hover {
    background: rgba(153, 0, 255, 0.1);
    border-color: rgba(153, 0, 255, 0.7);
  }

  .view-all-button::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(153, 0, 255, 0.3), transparent);
    transition: all 0.6s ease;
  }

  .view-all-button:hover::before {
    left: 100%;
  }

  .placeholder-message {
    grid-column: 1 / -1;
    text-align: center;
    padding: 3rem;
    background: rgba(30, 0, 60, 0.3);
    border: 1px solid rgba(153, 0, 255, 0.3);
    border-radius: 8px;
    color: rgba(255, 255, 255, 0.7);
  }

  /* Animations */
  @keyframes glitch-anim {
    0% { transform: translate(0); }
    20% { transform: translate(-2px, 1px); }
    40% { transform: translate(-1px, -1px); }
    60% { transform: translate(1px, 1px); }
    80% { transform: translate(-1px, -1px); }
    100% { transform: translate(0); }
  }

  @keyframes glitch-anim-2 {
    0% { transform: translate(0); }
    20% { transform: translate(2px, 1px); }
    40% { transform: translate(-1px, -1px); }
    60% { transform: translate(1px, -1px); }
    80% { transform: translate(1px, -2px); }
    100% { transform: translate(0); }
  }

  @keyframes quantum-glitch {
    0% { clip-path: inset(0 0 0 0); }
    5% { clip-path: inset(8% 0 0 0); }
    10% { clip-path: inset(0 0 0 0); }
    15% { clip-path: inset(0 0 8% 0); }
    20% { clip-path: inset(50% 0 0 0); }
    25% { clip-path: inset(0 0 0 0); }
    30% { clip-path: inset(0 8% 0 0); }
    35% { clip-path: inset(0 0 0 8%); }
    40% { clip-path: inset(0 0 0 0); }
    45% { clip-path: inset(0 0 8% 0); }
    50% { clip-path: inset(8% 0 0 0); }
    55% { clip-path: inset(0 0 0 0); }
    60% { clip-path: inset(0 8% 0 0); }
    65% { clip-path: inset(0 0 0 0); }
    70% { clip-path: inset(0 0 0 8%); }
    75% { clip-path: inset(0 0 0 0); }
    80% { clip-path: inset(8% 0 0 0); }
    85% { clip-path: inset(0 0 0 0); }
    90% { clip-path: inset(0 8% 0 0); }
    95% { clip-path: inset(0 0 8% 0); }
    100% { clip-path: inset(0 0 0 0); }
  }

  @keyframes spin {
    0% { transform: translate(-50%, -50%) rotate(0deg); }
    100% { transform: translate(-50%, -50%) rotate(360deg); }
  }

  /* Responsive */
  @media (max-width: 1200px) {
    .featured-products-grid {
      grid-template-columns: repeat(3, 1fr);
    }
  }

  @media (max-width: 768px) {
    .featured-products-grid {
      grid-template-columns: repeat(2, 1fr);
    }

    .section-title {
      font-size: 2rem;
    }
  }

  @media (max-width: 480px) {
    .featured-products-grid {
      grid-template-columns: 1fr;
    }

    .featured-products-quantum {
      padding: 4rem 1rem;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize Quantum Visualizer for particles if available
    if (window.QuantumVisualizer) {
      const featuredProductsSection = document.querySelector('.featured-products-quantum');
      const profile = featuredProductsSection.getAttribute('data-profile') || 'VoidBloom';
      const glitchLevel = parseFloat(featuredProductsSection.getAttribute('data-glitch-level') || '0.5');

      const productsVisualizer = new QuantumVisualizer({
        container: document.getElementById('featured-products-particles'),
        particleCount: 40,
        colorScheme: profile,
        dimensions: '2d',
        fractalMode: false,
        intensity: glitchLevel
      });

      // Initialize the visualizer with quantum state data
      const quantumData = Array(15).fill().map((_, i) => ({
        id: 'qp' + i,
        state: Math.random() > 0.5 ? 'superposition' : 'entangled',
        probability: Math.random(),
        profile: profile
      }));

      productsVisualizer.update(quantumData);

      // Use Intersection Observer to activate quantum effects when visible
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            productsVisualizer.activate();
          } else {
            productsVisualizer.deactivate();
          }
        });
      }, { threshold: 0.1 });

      observer.observe(featuredProductsSection);
    }

    // Connect to NeuralBus if available
    if (window.NeuralBus) {
      // Register section with NeuralBus
      const featuredProductsSection = document.querySelector('.featured-products-quantum');
      const profile = featuredProductsSection.getAttribute('data-profile') || 'VoidBloom';

      NeuralBus.register('featured-products-quantum', {
        version: '1.0.0',
        profile: profile
      });

      // Handle add to cart interactions
      document.querySelectorAll('[data-add-to-cart]').forEach(button => {
        button.addEventListener('click', function(e) {
          e.preventDefault();

          const variantId = this.getAttribute('data-add-to-cart');
          this.classList.add('loading');

          // Send quantum event to NeuralBus
          NeuralBus.emit('cart:quantum-add', {
            variantId: variantId,
            profile: profile,
            timestamp: new Date().toISOString()
          });

          // Simulate cart addition with quantum delay
          setTimeout(() => {
            if (window.cartSystem) {
              window.cartSystem.addItem(variantId, 1)
                .then(() => {
                  this.classList.remove('loading');

                  // Apply quantum effect to product card
                  const productCard = this.closest('[data-product-card]');
                  productCard.setAttribute('data-quantum-state', 'observed');

                  setTimeout(() => {
                    productCard.setAttribute('data-quantum-state', 'unobserved');
                  }, 2000);
                })
                .catch(error => {
                  console.error('Quantum cart error:', error);
                  this.classList.remove('loading');
                });
            } else {
              // Fallback if cartSystem is not available
              this.classList.remove('loading');

              // Submit the form anyway
              const form = document.createElement('form');
              form.method = 'post';
              form.action = '/cart/add';

              const input = document.createElement('input');
              input.type = 'hidden';
              input.name = 'id';
              input.value = variantId;

              form.appendChild(input);
              document.body.appendChild(form);
              form.submit();
            }
          }, 800 + Math.random() * 400); // Quantum uncertainty in the timing
        });
      });

      // Handle quantum entanglement between products if enabled
      if (document.querySelector('[data-quantum-entanglement="true"]')) {
        const productCards = document.querySelectorAll('[data-product-card]');

        productCards.forEach(card => {
          card.addEventListener('mouseenter', function() {
            const entangledCards = Array.from(productCards).filter(c => c !== card);
            const traumaIndex = parseFloat(card.getAttribute('data-trauma-index') || '0.5');

            // Apply subtle entanglement effect to other cards
            entangledCards.forEach(otherCard => {
              const otherTraumaIndex = parseFloat(otherCard.getAttribute('data-trauma-index') || '0.5');
              const entanglementStrength = Math.abs(traumaIndex - otherTraumaIndex);

              // Apply stronger effect to cards with similar trauma index (quantum resonance)
              if (entanglementStrength < 0.3) {
                otherCard.style.transform = `translateY(-${(1-entanglementStrength) * 5}px)`;
                otherCard.querySelector('.quantum-image-glitch').style.opacity = 0.3;
              }
            });
          });

          card.addEventListener('mouseleave', function() {
            const entangledCards = Array.from(productCards).filter(c => c !== card);

            // Reset entanglement effects
            entangledCards.forEach(otherCard => {
              otherCard.style.transform = '';
              otherCard.querySelector('.quantum-image-glitch').style.opacity = '0';
            });
          });
        });
      }
    }
  });
</script>

{% schema %}
{
  "name": "Featured Products Quantum",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Section Title",
      "default": "Quantum Artifacts"
    },
    {
      "type": "text",
      "id": "subtitle",
      "label": "Section Subtitle",
      "default": "Explore our collection of memory artifacts with quantum entanglement properties"
    },
    {
      "type": "collection",
      "id": "collection",
      "label": "Collection"
    },
    {
      "type": "range",
      "id": "products_limit",
      "min": 2,
      "max": 12,
      "step": 1,
      "label": "Products to show",
      "default": 4
    },
    {
      "type": "range",
      "id": "products_per_row",
      "min": 2,
      "max": 5,
      "step": 1,
      "label": "Products per row",
      "default": 4
    },
    {
      "type": "select",
      "id": "mutation_profile",
      "label": "Mutation Profile",
      "options": [
        {
          "value": "CyberLotus",
          "label": "CyberLotus (Pink/Cyan)"
        },
        {
          "value": "ObsidianBloom",
          "label": "ObsidianBloom (Purple/Pink)"
        },
        {
          "value": "VoidBloom",
          "label": "VoidBloom (Purple/Magenta)"
        },
        {
          "value": "NeonVortex",
          "label": "NeonVortex (Blue/Orange)"
        }
      ],
      "default": "VoidBloom"
    },
    {
      "type": "range",
      "id": "glitch_level",
      "min": 0,
      "max": 1,
      "step": 0.1,
      "label": "Glitch Intensity",
      "default": 0.5
    },
    {
      "type": "range",
      "id": "bloom_intensity",
      "min": 0,
      "max": 1,
      "step": 0.1,
      "label": "Bloom Effect Intensity",
      "default": 0.6
    },
    {
      "type": "checkbox",
      "id": "enable_entanglement",
      "label": "Enable Quantum Entanglement",
      "default": true,
      "info": "Products will react to each other when hovered"
    },
    {
      "type": "checkbox",
      "id": "show_vendor",
      "label": "Show vendor",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_quick_view",
      "label": "Show quick view button",
      "default": true
    },
    {
      "type": "text",
      "id": "quick_view_text",
      "label": "Quick view button text",
      "default": "Quick View"
    },
    {
      "type": "text",
      "id": "add_to_cart_text",
      "label": "Add to cart button text",
      "default": "Add to Cart"
    },
    {
      "type": "text",
      "id": "view_options_text",
      "label": "View options button text",
      "default": "View Options"
    },
    {
      "type": "text",
      "id": "sold_out_text",
      "label": "Sold out text",
      "default": "Memory Fragment Depleted"
    },
    {
      "type": "checkbox",
      "id": "show_view_all",
      "label": "Show 'View all' button",
      "default": true
    },
    {
      "type": "text",
      "id": "view_all_text",
      "label": "View all button text",
      "default": "View All Quantum Artifacts"
    },
    {
      "type": "text",
      "id": "empty_collection_message",
      "label": "Empty collection message",
      "default": "No quantum artifacts found in this collection"
    }
  ],
  "presets": [
    {
      "name": "Featured Products Quantum",
      "category": "Products"
    }
  ]
}
{% endschema %}
