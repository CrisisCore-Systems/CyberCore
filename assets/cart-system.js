/**
 * CART-SYSTEM.JS
 * Advanced cart functionality for CyberCore theme
 *
 * @MutationCompatible: All Variants
 * @StrategyProfile: quantum-entangled
 * @Version: 2.2.0
 */
// Generated by CyberCore Neural Forge v3.0.0 //

/**
 * VoidBloom Memory Commerce - Cart System
 * Trauma-encoded purchase pathway with recursive memory structures
 */

// FIXED: Import pattern matches export pattern in neural-bus.js
// Use dynamic import with fallback for script tag loading
let NeuralBus;

class CartSystem {
  constructor() {
    this.items = [];
    this.memories = [];
    this.total = 0;
    this.traumaIndex = 0;
    this.recursiveDepth = 3;
    this.initialized = false;
  }

  initialize() {
    if (this.initialized) return this;

    // Get NeuralBus reference
    if (typeof window.NeuralBus !== 'undefined') {
      NeuralBus = window.NeuralBus;
    }

    if (!NeuralBus) {
      console.error('Cart system failed to initialize: NeuralBus not available');
      return this;
    }

    // Self-registration with neural bus
    NeuralBus.registerSystem('cart', this);

    // Initialize memory fragments
    this._initializeTraumaEncoding();

    console.log('Cart system initialized with trauma encoding');
    this.initialized = true;
    return this;
  }

  _initializeTraumaEncoding() {
    // Memory imprint initialization
    if (NeuralBus.config && NeuralBus.config.traumaEncoding) {
      this.traumaIndex = Math.floor(Math.random() * 7) + 1;
    }
  }

  // Cart methods
  addItem(item) {
    this.items.push(item);
    if (NeuralBus) {
      NeuralBus.publish('cart:item-added', {
        item,
        timestamp: Date.now(),
        traumaIndex: this.traumaIndex,
      });
    }
    return this;
  }

  removeItem(itemId) {
    const index = this.items.findIndex((item) => item.id === itemId);
    if (index !== -1) {
      const item = this.items[index];
      this.items.splice(index, 1);
      if (NeuralBus) {
        NeuralBus.publish('cart:item-removed', {
          item,
          timestamp: Date.now(),
          traumaIndex: this.traumaIndex,
        });
      }
    }
    return this;
  }

  updateQuantity(itemId, quantity) {
    const item = this.items.find((item) => item.id === itemId);
    if (item) {
      item.quantity = quantity;
      if (NeuralBus) {
        NeuralBus.publish('cart:quantity-updated', {
          item,
          quantity,
          timestamp: Date.now(),
          traumaIndex: this.traumaIndex,
        });
      }
    }
    return this;
  }

  getTotal() {
    return this.items.reduce((total, item) => total + item.price * item.quantity, 0);
  }
}

// Create and export instance
const cartSystem = new CartSystem();

// CommonJS
if (typeof module !== 'undefined' && module.exports) {
  module.exports = { cartSystem };
}

// AMD
if (typeof define === 'function' && define.amd) {
  define([], function () {
    return { cartSystem };
  });
}

// Global variable
if (typeof window !== 'undefined') {
  window.cartSystem = cartSystem;
}

// ES Module export
export { cartSystem };
