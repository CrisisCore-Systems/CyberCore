/**
 * HOLOGRAM-COMPONENT.JS
 * Core hologram rendering component for CyberCore
 *
 * @MutationCompatible: All Variants
 * @StrategyProfile: quantum-entangled
 * @Version: 2.1.0
 */
// Generated by CyberCore Neural Forge v3.0.0 //

import { NeuralBus } from './neural-bus.js';

// Import type definitions or add interfaces
/**
 * @typedef {Object} QuantumVisualizer
 * @property {Function} connectHologram - Method to connect to a hologram component
 */

/**
 * @typedef {Object} GlitchEngine
 * @property {Function} applyGlitch - Method to apply glitch effects
 */

/**
 * @typedef {Object} CartSystem
 * @property {Function} addItem - Method to add an item to the cart
 */

/**
 * HologramComponent
 * Core component for rendering and managing holographic product previews
 * with quantum effects and mutation capabilities
 */
export class HologramComponent extends HTMLElement {
  // Private properties
  #initialized = false;
  #container = null;
  #renderer = null;
  #glitchEnabled = false;
  #neuralBusConnected = false;
  #config = null;
  #products = new Map();
  #activeProductId = null;
  #traumaCodes = [];
  #mutationProfile = 'CyberLotus';
  #shadow = null;

  // Public properties that TypeScript can understand
  /** @type {boolean} */
  initialized;
  /** @type {number} */
  intensity;
  /** @type {string} */
  renderMode;
  /** @type {boolean} */
  glitchEnabled;
  /** @type {QuantumVisualizer} */
  visualizer;
  /** @type {GlitchEngine} */
  glitchEngine;
  /** @type {CartSystem} */
  cartSystem;

  /**
   * Define observed attributes for the web component
   */
  static get observedAttributes() {
    return ['intensity', 'render-mode', 'enable-glitch', 'profile'];
  }

  /**
   * Constructor - Initialize with Shadow DOM
   */
  constructor() {
    super();

    // Create shadow DOM
    this.#shadow = this.attachShadow({ mode: 'open' });

    // Set initial configuration
    this.#config = {
      intensity: 1.0,
      renderMode: 'standard',
      enableGlitch: false,
      autoRotate: true,
      neuralSynced: true,
      onInteraction: () => {},
      debug: false,
    };

    // Initialize public properties for test compatibility
    this.initialized = true;
    this.intensity = this.#config.intensity;
    this.renderMode = this.#config.renderMode;
    this.glitchEnabled = this.#config.enableGlitch;

    this.#createStyles();
  }

  /**
   * Lifecycle: Component connected to DOM
   */
  connectedCallback() {
    // Apply configuration from attributes
    this.#updateConfigFromAttributes();

    // Initialize rendering
    this.render();

    // Connect to Neural Bus if enabled
    if (this.#config.neuralSynced) {
      this.connectToBus();
    }

    if (this.#config.debug) {
      console.log('HologramComponent connected to DOM with config:', this.#config);
    }
  }

  /**
   * Lifecycle: Component disconnected from DOM
   */
  disconnectedCallback() {
    // Clean up resources and event listeners
    if (this.#neuralBusConnected) {
      NeuralBus.unsubscribe('quantum:mutation', this.processMutation.bind(this));
      NeuralBus.unsubscribe('product:view', this.visualizeProduct.bind(this));
      NeuralBus.unsubscribe('cart:item:added', this.handleCartEvent.bind(this));
    }

    if (this.#config.debug) {
      console.log('HologramComponent disconnected from DOM');
    }
  }

  /**
   * Lifecycle: Attribute changed
   */
  attributeChangedCallback(name, oldValue, newValue) {
    if (oldValue === newValue) return;

    switch (name) {
    case 'intensity':
      this.intensity = parseFloat(newValue) || 1.0;
      this.#config.intensity = this.intensity;
      this.#updateIntensity();
      break;
    case 'render-mode':
      this.renderMode = newValue || 'standard';
      this.#config.renderMode = this.renderMode;
      this.render();
      break;
    case 'enable-glitch':
      this.glitchEnabled = newValue !== null;
      this.#config.enableGlitch = this.glitchEnabled;
      break;
    case 'profile':
      this.#mutationProfile = newValue || 'CyberLotus';
      this.#applyProfileEffects(this.#mutationProfile);
      break;
    }
  }

  /**
   * Create component styles in shadow DOM
   * @private
   */
  #createStyles() {
    const style = document.createElement('style');
    style.textContent = `
      :host {
        display: block;
        position: relative;
        width: 100%;
        height: 100%;
      }

      .hologram-container {
        position: relative;
        width: 100%;
        height: 100%;
        --hologram-intensity: 1;
        --hologram-primary-color: #00ffff;
        --hologram-secondary-color: #0088ff;
        --hologram-accent-color: #80ffff;
        --trauma-intensity: 0;
      }

      .hologram-element {
        position: relative;
        width: 100%;
        height: 100%;
        transform-style: preserve-3d;
      }

      .hologram-model {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        transition: all 0.3s ease;
      }

      .hologram-base {
        position: absolute;
        bottom: 0;
        left: 50%;
        transform: translateX(-50%);
        width: 80%;
        height: 10px;
        background: linear-gradient(90deg, transparent, var(--hologram-primary-color), transparent);
        border-radius: 50%;
        opacity: 0.7;
        filter: blur(3px);
      }

      .quantum-core {
        position: absolute;
        width: 100%;
        height: 100%;
        pointer-events: none;
      }

      .quantum-particle {
        position: absolute;
        width: 5px;
        height: 5px;
        background-color: var(--hologram-primary-color);
        border-radius: 50%;
        opacity: 0.7;
        filter: blur(1px);
        animation: particle-orbit 4s infinite linear;
        animation-delay: calc(var(--particle-index) * 0.5s);
      }

      .quantum-glow {
        position: absolute;
        width: 100%;
        height: 100%;
        background: radial-gradient(
          circle at center,
          var(--hologram-primary-color) 0%,
          transparent 70%
        );
        opacity: 0.2;
        pointer-events: none;
      }

      .glitch-active {
        animation: glitch-animation 0.3s linear;
      }

      .cart-added-pulse {
        animation: cart-pulse 1s ease-out;
      }

      .trauma-active .hologram-model {
        filter: hue-rotate(90deg) saturate(2);
      }

      @keyframes particle-orbit {
        0% {
          transform: translate(50%, 50%) rotate(0deg) translateX(calc(20px * var(--hologram-intensity))) rotate(0deg);
        }
        100% {
          transform: translate(50%, 50%) rotate(360deg) translateX(calc(20px * var(--hologram-intensity))) rotate(-360deg);
        }
      }

      @keyframes glitch-animation {
        0% { transform: translate(0); }
        25% { transform: translate(calc(var(--glitch-intensity) * 5px), calc(var(--glitch-intensity) * -3px)); filter: hue-rotate(90deg); }
        50% { transform: translate(calc(var(--glitch-intensity) * -3px), calc(var(--glitch-intensity) * 2px)); filter: hue-rotate(180deg); }
        75% { transform: translate(calc(var(--glitch-intensity) * 2px), calc(var(--glitch-intensity) * -1px)); filter: hue-rotate(270deg); }
        100% { transform: translate(0); filter: hue-rotate(0deg); }
      }

      @keyframes cart-pulse {
        0% { transform: scale(1); }
        50% { transform: scale(1.1); filter: brightness(1.5); }
        100% { transform: scale(1); }
      }

      /* Profile-specific styles */
      .profile-cyberlotus {
        --hologram-primary-color: #00ffff;
        --hologram-secondary-color: #0088ff;
        --hologram-accent-color: #80ffff;
      }

      .profile-obsidianbloom {
        --hologram-primary-color: #ff00ff;
        --hologram-secondary-color: #8800ff;
        --hologram-accent-color: #ff80ff;
      }

      .profile-voidbloom {
        --hologram-primary-color: #9900ff;
        --hologram-secondary-color: #6600cc;
        --hologram-accent-color: #cc80ff;
      }

      .profile-neonvortex {
        --hologram-primary-color: #00ff66;
        --hologram-secondary-color: #00cc44;
        --hologram-accent-color: #80ffaa;
      }
    `;

    this.#shadow.appendChild(style);
  }

  /**
   * Update config from element attributes
   * @private
   */
  #updateConfigFromAttributes() {
    // Get attributes with defaults
    this.intensity = this.hasAttribute('intensity')
      ? parseFloat(this.getAttribute('intensity')) || 1.0
      : this.#config.intensity;

    this.renderMode = this.getAttribute('render-mode') || this.#config.renderMode;
    this.glitchEnabled = this.hasAttribute('enable-glitch');
    this.#mutationProfile = this.getAttribute('profile') || this.#mutationProfile;

    // Update config object
    this.#config.intensity = this.intensity;
    this.#config.renderMode = this.renderMode;
    this.#config.enableGlitch = this.glitchEnabled;
  }

  // Allow external configuration for non-attribute settings
  /**
   *
   */
  configure(config = {}) {
    this.#config = {
      ...this.#config,
      ...config,
    };

    this.intensity = this.#config.intensity;
    this.renderMode = this.#config.renderMode;
    this.glitchEnabled = this.#config.enableGlitch;

    // Re-render if needed
    if (this.#initialized) {
      this.render();
    }

    return this;
  }

  /**
   * Render hologram in shadow DOM
   */
  render() {
    // Clear existing content
    while (this.#shadow.firstChild && this.#shadow.firstChild.tagName !== 'STYLE') {
      this.#shadow.removeChild(this.#shadow.firstChild);
    }

    // Create container
    this.#container = document.createElement('div');
    this.#container.className = 'hologram-container';
    this.#shadow.appendChild(this.#container);

    // Apply hologram styling to container
    this.#applyContainerStyles();

    // Initialize renderer based on mode
    if (this.renderMode === 'quantum') {
      this.#initQuantumRenderer();
    } else {
      this.#initStandardRenderer();
    }

    // Apply quantum effects if in quantum mode
    if (this.renderMode === 'quantum') {
      this.applyQuantumEffects();
    }

    // Mark as initialized
    this.#initialized = true;

    return this;
  }

  /**
   * Apply quantum visual effects to the hologram
   */
  applyQuantumEffects() {
    if (!this.#container) return this;

    // Add quantum class to container
    this.#container.classList.add('quantum-hologram');

    // Add quantum glow element
    const glowElement = document.createElement('div');
    glowElement.className = 'quantum-glow';
    this.#container.appendChild(glowElement);

    // Apply glitch effects if enabled
    if (this.glitchEnabled) {
      this.triggerGlitch(0.8, 500);
    }

    // Apply profile-specific effects
    this.#applyProfileEffects(this.#mutationProfile);

    return this;
  }

  /**
   * Update intensity after attribute change
   * @private
   */
  #updateIntensity() {
    if (this.#container) {
      this.#container.style.setProperty('--hologram-intensity', this.intensity);
    }
  }

  /**
   * Apply styles to container element
   * @private
   */
  #applyContainerStyles() {
    if (!this.#container) return;

    // Add mode-specific class
    this.#container.classList.add(`hologram-${this.renderMode}-mode`);

    // Set intensity as CSS variable
    this.#container.style.setProperty('--hologram-intensity', this.intensity);

    // Apply profile-specific class
    this.#container.classList.add(`profile-${this.#mutationProfile.toLowerCase()}`);
  }

  /**
   * Apply product-specific effects
   * @private
   * @param {Object} product - Product data
   */
  #updateProductVisualization(product) {
    if (!this.#renderer || !product) return;

    // Update model display if possible
    if (this.#renderer.container) {
      // Clear existing content
      this.#renderer.container.innerHTML = '';

      // Create product representation
      const productElement = document.createElement('div');
      productElement.className = 'product-visualization';
      productElement.textContent = product.title || 'Product';

      this.#renderer.container.appendChild(productElement);
    }

    // Apply product-specific effects
    if (this.renderMode === 'quantum') {
      // Add quantum pulse effect
      this.triggerGlitch(0.4, 300);
    }
  }
}

// Register the web component
customElements.define('quantum-hologram', HologramComponent);

// CommonJS export for Jest compatibility
if (typeof module !== 'undefined' && module.exports) {
  module.exports = HologramComponent;
}
