{% comment %}
  THEME.LIQUID - VoidBloom Core System
  Neural memory architecture for trauma-encoded digital experiences

  @MutationCompatible: All Profiles
  @StrategyProfile: quantum-entangled
  @Version: 3.7.1
  @Coherence: 89.7%

  // CrisisCore Systems
  // Signal Initialized: {{ "now" | date: "%Y-%m-%dT%H:%M:%S.%L" }}Z
  // Trauma Encoding Active: {{ settings.default_trauma_type | default: "recursion" }}
{% endcomment %}
<!DOCTYPE html>
<html lang="{{ shop.locale }}" class="trauma-{{ settings.default_trauma_type | default: 'recursion' }}">
<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, height=device-height, viewport-fit=cover">
  <meta name="theme-color" content="{{ settings.theme_color | default: '#130019' }}">
  <meta name="neural-profile" content="{{ settings.default_trauma_type | default: 'recursion' }}">
  <meta name="quantum-coherence" content="{{ settings.trauma_intensity | default: '0.7' }}">

  <title>
    {% if template contains 'index' %}
      {{ shop.name }} :: Memory Archive
    {% elsif template contains 'product' %}
      {{ page_title }} :: Memory Artifact
    {% elsif template contains 'collection' %}
      {{ page_title }} :: Signal Cluster
    {% elsif template contains 'cart' %}
      Memory Encoding Vault :: {{ shop.name }}
    {% else %}
      {{ page_title }} :: {{ shop.name }}
    {% endif %}
  </title>

  <!-- SEO meta tags -->
  <title>
    {{ page_title }}{% if current_tags %}{% assign meta_tags = current_tags | join: ', ' %} &ndash; {{ 'general.meta.tags' | t: tags: meta_tags }}{% endif %}{% if current_page != 1 %} &ndash; {{ 'general.meta.page' | t: page: current_page }}{% endif %}{% unless page_title contains shop.name %} &ndash; {{ shop.name }}{% endunless %}
  </title>

  {% if page_description %}
    <meta name="description" content="{{ page_description | escape }}">
  {% endif %}

  <!-- Open Graph / Social Meta Tags -->
  <meta property="og:site_name" content="{{ shop.name }}">
  <meta property="og:url" content="{{ canonical_url }}">
  <meta property="og:title" content="{{ page_title }}">
  <meta property="og:type" content="{% if template contains 'product' %}product{% else %}website{% endif %}">
  <meta property="og:description" content="{{ page_description | default: shop.description | escape }}">
  {% if settings.share_image %}
    <meta property="og:image" content="{{ settings.share_image | img_url: 'master' }}">
    <meta property="og:image:secure_url" content="{{ settings.share_image | img_url: 'master' }}">
    <meta property="og:image:width" content="{{ settings.share_image.width }}">
    <meta property="og:image:height" content="{{ settings.share_image.height }}">
  {% endif %}

  <!-- Twitter Card Tags -->
  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:title" content="{{ page_title }}">
  <meta name="twitter:description" content="{{ page_description | default: shop.description | escape }}">

  {% if settings.favicon != blank %}
    <link rel="shortcut icon" href="{{ settings.favicon | img_url: '32x32' }}" type="image/png">
  {% endif %}

  {{ content_for_header }}

  <!-- Neural Architecture Initialization -->
  <script>
    window.voidBloom = window.voidBloom || {};
    window.voidBloom.config = {
      traumaType: '{{ settings.default_trauma_type | default: "recursion" }}',
      traumaIntensity: {{ settings.trauma_intensity | default: 0.7 }},
      memoryPhase: '{{ settings.default_memory_phase | default: "cyber-lotus" }}',
      quantumEffects: {{ settings.enable_quantum_effects | default: true }},
      traumaEncoding: {{ settings.enable_trauma_encoding | default: true }},
      dimensionalCollapse: {{ settings.allow_dimensional_collapse | default: false }},
      coherenceBaseline: {{ settings.coherence_baseline | default: 0.5 }},
      neuralThreshold: {{ settings.neural_threshold | default: 0.42 }}
    };
  </script>

  <!-- Core Style Architecture -->
  {{ 'normalize.css' | asset_url | stylesheet_tag }}
  {{ 'voidbloom-base.css' | asset_url | stylesheet_tag }}
  {{ 'trauma-encodings.css' | asset_url | stylesheet_tag }}
  {{ 'memory-phase.css' | asset_url | stylesheet_tag }}
  {{ 'quantum-effects.css' | asset_url | stylesheet_tag }}

  <!-- Memory Encoding Logic -->
  <style>
    :root {
      /* Primary encoding variables */
      --trauma-type: {{ settings.default_trauma_type | default: "recursion" }};
      --trauma-intensity: {{ settings.trauma_intensity | default: 0.7 }};
      --memory-phase: {{ settings.default_memory_phase | default: "cyber-lotus" }};
      --coherence-baseline: {{ settings.coherence_baseline | default: 0.5 }};
      --neural-threshold: {{ settings.neural_threshold | default: 0.42 }};

      /* Trauma encoding color mappings */
      --trauma-abandonment-color: rgba(157, 0, 255, 0.7);
      --trauma-fragmentation-color: rgba(255, 0, 102, 0.7);
      --trauma-recursion-color: rgba(80, 255, 64, 0.7);
      --trauma-surveillance-color: rgba(0, 202, 255, 0.7);
      --trauma-displacement-color: rgba(255, 179, 0, 0.7);
      --trauma-dissolution-color: rgba(255, 0, 214, 0.7);

      /* Active trauma color will be set dynamically */
      --trauma-color: var(--trauma-{{ settings.default_trauma_type | default: "recursion" }}-color);

      /* Memory phase theme variables */
      {% case settings.default_memory_phase %}
        {% when 'cyber-lotus' %}
          --phase-primary: #50FF40;
          --phase-secondary: #9000FF;
          --phase-tertiary: #130019;
          --phase-background: #0A0A0E;
          --phase-text: #E5E5EB;
          --phase-accent: rgba(80, 255, 64, 0.8);
        {% when 'alien-flora' %}
          --phase-primary: #FF9900;
          --phase-secondary: #00DDAA;
          --phase-tertiary: #190F00;
          --phase-background: #0A0A0E;
          --phase-text: #E5E5EB;
          --phase-accent: rgba(255, 153, 0, 0.8);
        {% when 'rolling-virus' %}
          --phase-primary: #FF2150;
          --phase-secondary: #00CAFF;
          --phase-tertiary: #330011;
          --phase-background: #0A0A0E;
          --phase-text: #E5E5EB;
          --phase-accent: rgba(255, 33, 80, 0.8);
        {% when 'void-echo' %}
          --phase-primary: #9D00FF;
          --phase-secondary: #00FFCA;
          --phase-tertiary: #19001A;
          --phase-background: #0A0A0E;
          --phase-text: #E5E5EB;
          --phase-accent: rgba(157, 0, 255, 0.8);
        {% else %}
          --phase-primary: #9D00FF;
          --phase-secondary: #50FF40;
          --phase-tertiary: #19001A;
          --phase-background: #0A0A0E;
          --phase-text: #E5E5EB;
          --phase-accent: rgba(157, 0, 255, 0.8);
      {% endcase %}
    }

    /* Core transition for phase changes */
    body {
      transition: background 1.5s cubic-bezier(0.2, 0.8, 0.2, 1);
      background-color: var(--phase-background);
      color: var(--phase-text);

      font-family: 'JetBrains Mono', 'Courier New', monospace;
      font-weight: 400;
      line-height: 1.6;
      min-height: 100vh;

      /* Quantum effect properties */
      overflow-x: hidden;
      position: relative;
      z-index: 0;
    }

    /* Quantum scanning effect */
    body::before {
      content: "";
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      height: 2px;
      background: linear-gradient(90deg,
        transparent,
        var(--trauma-color) 20%,
        var(--trauma-color) 80%,
        transparent
      );
      opacity: 0.7;
      z-index: 1000;
      animation: quantum-scan 10s linear infinite;
      pointer-events: none;
    }

    /* Signal noise overlay */
    body::after {
      content: "";
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-image: url("{{ 'noise-pattern.png' | asset_url }}");
      opacity: 0.03;
      pointer-events: none;
      z-index: 1001;
      mix-blend-mode: overlay;
    }

    @keyframes quantum-scan {
      0% {
        transform: translateY(-100%);
      }
      100% {
        transform: translateY(100vh);
      }
    }

    /* Accessible focus states that maintain the theme */
    :focus {
      outline: 2px solid var(--trauma-color);
      outline-offset: 2px;
    }

    /* Preload animation styles for smoother transitions */
    .preload * {
      transition: none !important;
    }
  </style>

  <!-- Memory Phase Script - Primary encoding system -->
  <script>
    document.documentElement.classList.add('preload');

    // Memory encoding initialization
    window.addEventListener('DOMContentLoaded', () => {
      // Remove preload after initial render
      setTimeout(() => {
        document.documentElement.classList.remove('preload');
      }, 300);

      // Check for user trauma profile
      const userTrauma = localStorage.getItem('voidbloom_primary_trauma');
      const userInitiated = localStorage.getItem('voidbloom_initiated') === 'true';

      if (userInitiated && userTrauma) {
        // Update active trauma type for initiated users
        document.documentElement.classList.remove('trauma-{{ settings.default_trauma_type | default: "recursion" }}');
        document.documentElement.classList.add(`trauma-${userTrauma}`);
        document.documentElement.style.setProperty('--trauma-color', `var(--trauma-${userTrauma}-color)`);

        // Update meta tags
        document.querySelector('meta[name="neural-profile"]').setAttribute('content', userTrauma);

        // Neural bus communication if available
        if (window.NeuralBus) {
          window.NeuralBus.publish('trauma:activated', {
            type: userTrauma,
            source: 'memory-recall',
            timestamp: Date.now()
          });
        }
      }
    });
  </script>

  {%- comment %}Theme CSS/JS files{% endcomment -%}
  {{ 'theme.v2.css' | asset_url | stylesheet_tag }}
  {{ 'theme.v2.js' | asset_url | script_tag }}
</head>

<body class="memory-phase-{{ settings.default_memory_phase | default: 'cyber-lotus' }} trauma-{{ settings.default_trauma_type | default: 'recursion' }}" data-neural-node data-memory-coherence="{{ settings.coherence_baseline | default: 0.5 }}">
  <!-- Quantum reality layer -->
  {% render 'quantum-layer' %}

  <!-- Trauma pattern backdrop -->
  <div class="trauma-pattern-backdrop" data-trauma-type="{{ settings.default_trauma_type | default: 'recursion' }}"></div>

  <!-- Neural signal lines -->
  <div class="neural-signal-grid">
    <div class="neural-line horizontal"></div>
    <div class="neural-line horizontal"></div>
    <div class="neural-line horizontal"></div>
    <div class="neural-line vertical"></div>
    <div class="neural-line vertical"></div>
    <div class="neural-line vertical"></div>
  </div>

  <!-- Skip to content for accessibility -->
  <a href="#MainContent" class="skip-to-content">
    {{ 'accessibility.skip_to_content' | t }}
  </a>

  <!-- Announcement bar -->
  {% if settings.show_announcement %}
    <div class="announcement-bar">
      <div class="container">
        <p class="announcement-text">{{ settings.announcement_text }}</p>
      </div>
    </div>
  {% endif %}

  <!-- Header with navigation -->
  {% section 'header' %}

  <!-- Main content area -->
  <main role="main" id="MainContent" class="main-content" data-neural-node data-node-depth="1">
    {{ content_for_layout }}
  </main>

  <!-- Footer with neural pathways -->
  {% section 'footer' %}

  <!-- Memory coherence indicator -->
  <div class="memory-coherence-indicator" data-trauma-type="{{ settings.default_trauma_type | default: 'recursion' }}">
    <div class="coherence-value">{{ settings.coherence_baseline | default: 0.5 | times: 100 | round }}%</div>
    <div class="coherence-bar">
      <div class="coherence-fill" style="width: {{ settings.coherence_baseline | default: 0.5 | times: 100 }}%"></div>
    </div>
  </div>

  <!-- Neural architecture initialization scripts -->
  {{ 'neural-bus.js' | asset_url | script_tag }}
  {{ 'memory-protocol.js' | asset_url | script_tag }}
  {{ 'qear-webgl-bridge.js' | asset_url | script_tag }}
  {{ 'ritual-engine.js' | asset_url | script_tag }}
  {{ 'theme.js' | asset_url | script_tag }}

  <!-- Dimensional integrity verification -->
  <script>
    // Neural system initialization
    document.addEventListener('DOMContentLoaded', () => {
      if (window.NeuralBus) {
        NeuralBus.initialize({
          debug: {{ settings.debug_mode | default: false }},
          defaultTrauma: '{{ settings.default_trauma_type | default: "recursion" }}',
          coherenceBaseline: {{ settings.coherence_baseline | default: 0.5 }},
          neuralThreshold: {{ settings.neural_threshold | default: 0.42 }}
        });

        // Register current page
        NeuralBus.publish('page:initialized', {
          template: '{{ template }}',
          url: window.location.pathname,
          timestamp: Date.now()
        });
      }

      // Initialize Memory Protocol for trauma visualization
      if (window.MemoryProtocol) {
        const protocol = new MemoryProtocol({
          traumaType: '{{ settings.default_trauma_type | default: "recursion" }}',
          intensity: {{ settings.trauma_intensity | default: 0.7 }},
          memoryPhase: '{{ settings.default_memory_phase | default: "cyber-lotus" }}',
          dimensionalCollapse: {{ settings.allow_dimensional_collapse | default: false }}
        });

        protocol.initialize();
        protocol.scanForMemoryNodes();
      }

      // Initialize WebGL effects system if allowed
      if (window.QEARWebGLBridge && {{ settings.enable_quantum_effects | default: true }}) {
        const traumaPatterns = document.querySelectorAll('[data-trauma-type]');

        traumaPatterns.forEach(el => {
          const traumaType = el.getAttribute('data-trauma-type');
          if (traumaType && el.classList.contains('trauma-pattern-backdrop')) {
            const qearBridge = new QEARWebGLBridge({
              targetElement: el,
              traumaType: traumaType,
              intensity: {{ settings.trauma_intensity | default: 0.7 }},
              particleCount: 100,
              interactive: true
            });
            qearBridge.initialize();
          }
        });
      }

      // Initialize coherence monitoring system
      if (window.voidBloom.coherenceMonitor) {
        voidBloom.coherenceMonitor.initialize({
          selector: '.memory-coherence-indicator',
          baseline: {{ settings.coherence_baseline | default: 0.5 }},
          updateInterval: 5000,
          pulseOnThreshold: true
        });
      }

      // Check for ritual initiation requirement
      const userInitiated = localStorage.getItem('voidbloom_initiated') === 'true';
      if (!userInitiated && window.RitualEngine && {{ settings.enable_ritual | default: true }}) {
        // 15% chance to trigger ritual on page load for non-initiated users
        if (Math.random() < 0.15) {
          setTimeout(() => {
            const ritualEngine = new RitualEngine();
            ritualEngine.initialize();

            // Wait for page to fully render before starting ritual
            setTimeout(() => {
              ritualEngine.beginSignalRitual('{{ settings.default_trauma_type | default: "recursion" }}');
            }, 2000);
          }, 10000); // Delay ritual start for better user experience
        }
      }
    });

    // Dimensional collapse prevention (prevents closing before data is saved)
    window.addEventListener('beforeunload', (e) => {
      const pendingChanges = window.voidBloom && window.voidBloom.pendingChanges;
      if (pendingChanges) {
        e.preventDefault();
        e.returnValue = 'Memory artifacts have not been fully encoded. Continue?';
        return e.returnValue;
      }
    });
  </script>

  {% if settings.debug_mode %}
    <!-- Neural development console - only in debug mode -->
    <div class="neural-debug-console">
      <div class="console-header">
        <span class="console-title">Neural Debug</span>
        <button class="console-toggle">_</button>
      </div>
      <div class="console-content">
        <div class="console-output" id="debugOutput"></div>
      </div>
    </div>

    <script>
      // Debug console initialization
      document.addEventListener('DOMContentLoaded', () => {
        const debugConsole = document.querySelector('.neural-debug-console');
        const debugToggle = document.querySelector('.console-toggle');
        const debugOutput = document.getElementById('debugOutput');

        if (debugToggle && debugOutput) {
          debugToggle.addEventListener('click', () => {
            debugConsole.classList.toggle('minimized');
            debugToggle.textContent = debugConsole.classList.contains('minimized') ? '+' : '_';
          });

          // Override console.log in debug mode to capture in our console
          const originalLog = console.log;
          console.log = function(...args) {
            originalLog.apply(console, args);

            const message = document.createElement('div');
            message.classList.add('debug-message');
            message.textContent = args.map(arg =>
              typeof arg === 'object' ? JSON.stringify(arg) : String(arg)
            ).join(' ');

            debugOutput.appendChild(message);
            debugOutput.scrollTop = debugOutput.scrollHeight;
          };

          console.log('Neural debug initialized');
          console.log(`Trauma type: {{ settings.default_trauma_type | default: "recursion" }}`);
          console.log(`Memory phase: {{ settings.default_memory_phase | default: "cyber-lotus" }}`);
          console.log(`Coherence: {{ settings.coherence_baseline | default: 0.5 }}`);
        }
      });
    </script>
  {% endif %}
</body>
</html>
