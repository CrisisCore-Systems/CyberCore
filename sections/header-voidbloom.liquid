{% comment %}
  HEADER.LIQUID
  Header section controller that determines which header variant to use
  
  @MutationCompatible: All Variants
  @StrategyProfile: quantum-entangled
  @Version: 2.0.0
{% endcomment %}
// Generated by CyberCore Neural Forge v3.0.0 //
// Timestamp: {{ "now" | date: "%Y-%m-%dT%H:%M:%S" }} //

{% if section.settings.header_variant == 'cybercore' %}
  {% render 'header-cybercore' %}
{% elsif section.settings.header_variant == 'voidbloom' %}
  {% render 'header-voidbloom' %}
{% else %}
  {% render 'header-cybercore' %}
{% endif %}

{% schema %}
{
  "name": "Header",
  "settings": [
    {
      "type": "header",
      "content": "Header Configuration"
    },
    {
      "type": "select",
      "id": "header_variant",
      "label": "Header Variant",
      "options": [
        {
          "value": "cybercore",
          "label": "CyberCore (Default)"
        },
        {
          "value": "voidbloom",
          "label": "VoidBloom"
        }
      ],
      "default": "cybercore",
      "info": "Select the header style for your store."
    },
    {
      "type": "select",
      "id": "mutation_profile",
      "label": "Mutation Profile",
      "options": [
        {
          "value": "CyberLotus",
          "label": "CyberLotus (Pink/Cyan)"
        },
        {
          "value": "ObsidianBloom",
          "label": "ObsidianBloom (Purple/Pink)"
        },
        {
          "value": "VoidBloom",
          "label": "VoidBloom (Purple/Magenta)"
        },
        {
          "value": "NeonVortex",
          "label": "NeonVortex (Blue/Orange)"
        }
      ],
      "default": "CyberLotus",
      "info": "Select the color profile for the quantum effects."
    },
    {
      "type": "range",
      "id": "glitch_level",
      "min": 0,
      "max": 1,
      "step": 0.1,
      "label": "Glitch Intensity",
      "default": 0.5,
      "info": "Controls the intensity of glitch effects."
    },
    {
      "type": "range",
      "id": "particle_count",
      "min": 0,
      "max": 100,
      "step": 5,
      "label": "Particle Count",
      "default": 50,
      "info": "Number of particles in VoidBloom header (0 to disable)."
    },
    {
      "type": "range",
      "id": "flux_intensity",
      "min": 0,
      "max": 1,
      "step": 0.1,
      "label": "Flux Intensity",
      "default": 0.6,
      "info": "Controls the intensity of flux effects."
    },
    {
      "type": "checkbox",
      "id": "sticky_header",
      "label": "Sticky Header",
      "default": true,
      "info": "Keep header visible when scrolling."
    },
    {
      "type": "checkbox",
      "id": "show_search",
      "label": "Show Search",
      "default": true,
      "info": "Display search bar in header."
    }
  ],
  "presets": [
    {
      "name": "Header",
      "category": "Header"
    }
  ]
}
{% endschema %}

{% comment %}
  header-voidbloom.liquid
  VoidBloom-specific header with quantum navigation
  
  @MutationCompatible: VoidBloom
  @StrategyProfile: quantum-entangled
  @Version: 1.0.0
{% endcomment %}

{% assign logo_text = shop.name | default: "VoidBloom" | escape %}

<header class="voidbloom-header" data-neural-node data-profile="VoidBloom">
  <div class="void-backdrop"></div>
  <div class="glitch-lines"></div>
  
  <div class="header-content">
    <div class="header-left">
      <a href="/" class="logo-link">
        <div class="logo-container">
          <h1 class="logo-text glitch-text" data-text="{{ logo_text }}">{{ logo_text }}</h1>
        </div>
      </a>
    </div>
    
    <nav class="header-nav">
      <ul class="nav-list">
        {% for link in linklists.main-menu.links %}
          <li class="nav-item" data-depth="{{ forloop.index | escape }}">
            <a href="{{ link.url | escape }}" class="nav-link">
              <span class="nav-text">{{ link.title | escape }}</span>
              <span class="nav-underline"></span>
            </a>
            
            {% if link.links.size > 0 %}
              <div class="nav-dropdown">
                <ul class="dropdown-list">
                  {% for child_link in link.links %}
                    <li class="dropdown-item">
                      <a href="{{ child_link.url | escape }}" class="dropdown-link">
                        <span class="dropdown-text">{{ child_link.title | escape }}</span>
                      </a>
                    </li>
                  {% endfor %}
                </ul>
              </div>
            {% endif %}
          </li>
        {% endfor %}
      </ul>
    </nav>
    
    <div class="header-right">
      <button class="icon-button search-toggle" aria-label="Search">
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon-svg">
          <circle cx="11" cy="11" r="8"></circle>
          <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
        </svg>
      </button>
      
      <a href="/account" class="icon-button account-link" aria-label="Account">
        {% render 'icon-user' %}
      </a>
      
      <button class="icon-button cart-toggle" aria-label="Cart">
        <div class="cart-icon-wrapper">
          {% render 'icon-cart' %}
          <span class="cart-count quantum-counter">{{ cart.item_count }}</span>
        </div>
      </button>
    </div>
  </div>
  
  <div class="search-drawer">
    <div class="search-container">
      <form action="/search" method="get" class="search-form">
        <input type="text" name="q" placeholder="Search for memory fragments..." class="search-input" />
        <button type="submit" class="search-submit">
          <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <circle cx="11" cy="11" r="8"></circle>
            <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
          </svg>
        </button>
      </form>
    </div>
  </div>
  
  <div class="cart-drawer">
    <div class="cart-drawer-header">
      <h2 class="cart-title">Memory Vault</h2>
      <button class="cart-close">×</button>
    </div>
    
    <div class="cart-drawer-content">
      {% if cart.item_count > 0 %}
        <div class="cart-items">
          {% for item in cart.items %}
            <div class="cart-item" data-item-id="{{ item.id | escape }}">
              <div class="item-image">
                <img src="{{ item.image | img_url: '100x100', crop: 'center' }}" alt="{{ item.title | escape }}" />
                
                {% if item.properties._dimensional_depth %}
                  <div class="item-depth depth-{{ item.properties._dimensional_depth | escape }}"></div>
                {% endif %}
              </div>
              
              <div class="item-details">
                <h3 class="item-title">{{ item.title | escape }}</h3>
                <div class="item-variant">{{ item.variant.title | escape }}</div>
                
                <div class="item-price-qty">
                  <div class="item-price">{{ item.final_price | money }}</div>
                  <div class="item-quantity">
                    <button class="qty-btn qty-decrease">-</button>
                    <input type="number" class="qty-input" value="{{ item.quantity | escape }}" min="1" data-item-id="{{ item.id | escape }}" />
                    <button class="qty-btn qty-increase">+</button>
                  </div>
                </div>
                
                <button class="item-remove" data-item-id="{{ item.id | escape }}">
                  <span class="remove-icon">×</span>
                </button>
              </div>
              
              {% if item.properties._trauma_codes %}
                <div class="item-trauma-codes">
                  {% assign trauma_codes = item.properties._trauma_codes | split: "," %}
                  {% for code in trauma_codes %}
                    <span class="trauma-tag">{{ code | strip | escape }}</span>
                  {% endfor %}
                </div>
              {% endif %}
            </div>
          {% endfor %}
        </div>
        
        <div class="cart-footer">
          <div class="cart-subtotal">
            <span class="subtotal-label">Memory Signature Total</span>
            <span class="subtotal-value">{{ cart.total_price | money }}</span>
          </div>
          
          <div class="trust-badges">
            <div class="trust-badge">
              <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="badge-icon">
                <rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect>
                <path d="M7 11V7a5 5 0 0 1 10 0v4"></path>
              </svg>
              <span class="badge-text">Secure Transaction</span>
            </div>
            
            <div class="trust-badge">
              <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="badge-icon">
                <path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"></path>
                <path d="M9 12l2 2 4-4"></path>
              </svg>
              <span class="badge-text">Neural Encryption</span>
            </div>
            
            <div class="trust-badge">
              <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="badge-icon">
                <circle cx="12" cy="12" r="10"></circle>
                <polyline points="12 6 12 12 16 14"></polyline>
              </svg>
              <span class="badge-text">24/7 Memory Support</span>
            </div>
          </div>
          
          <div class="cart-actions">
            <a href="/cart" class="btn btn-secondary">View Memory Vault</a>
            <a href="/checkout" class="btn btn-primary checkout-btn">Begin Acquisition</a>
          </div>
        </div>
      {% else %}
        <div class="empty-cart">
          <div class="empty-icon">
            <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1" stroke-linecap="round" stroke-linejoin="round">
              <path d="M5.64 5.64h12.73v12.73H5.64z" />
              <path d="M5.64 5.64L1 10.27M12 1v4.64M18.36 5.64L23 10.27M1 10.27v3.46M23 10.27v3.46M5.64 18.36L1 13.73M18.36 18.36L23 13.73M12 23v-4.64" />
            </svg>
          </div>
          <h3 class="empty-title">Memory Vault Empty</h3>
          <p class="empty-text">Your quantum memory signature is currently blank.</p>
          <a href="/collections/all" class="btn btn-primary">Explore Memory Artifacts</a>
        </div>
      {% endif %}
    </div>
  </div>
</header>

<style>
  .voidbloom-header {
    position: relative;
    background: rgba(10, 0, 20, 0.9);
    color: rgba(255, 255, 255, 0.9);
    padding: 1rem 2rem;
    z-index: 100;
    overflow: hidden;
  }
  
  .void-backdrop {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(135deg, rgba(10,0,20,0.95) 0%, rgba(40,0,70,0.8) 100%);
    z-index: -2;
  }
  
  .void-backdrop::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: radial-gradient(circle at center, rgba(153, 0, 255, 0.1) 0%, transparent 70%);
    animation: pulse-fade 8s infinite alternate ease-in-out;
    z-index: -1;
  }
  
  .glitch-lines {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    overflow: hidden;
    z-index: -1;
  }
  
  .glitch-lines::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 1px;
    background: linear-gradient(90deg, transparent 0%, rgba(153, 0, 255, 0.5) 50%, transparent 100%);
    z-index: 1;
    opacity: 0.8;
  }
  
  .glitch-lines::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    height: 1px;
    background: linear-gradient(90deg, transparent 0%, rgba(153, 0, 255, 0.5) 50%, transparent 100%);
    z-index: 1;
    opacity: 0.8;
  }
  
  .header-content {
    display: flex;
    align-items: center;
    justify-content: space-between;
    max-width: 1440px;
    margin: 0 auto;
    position: relative;
    z-index: 2;
  }
  
  .header-left, .header-right {
    flex: 1;
  }
  
  .header-right {
    display: flex;
    justify-content: flex-end;
    align-items: center;
    gap: 1rem;
  }
  
  .logo-container {
    display: flex;
    align-items: center;
  }
  
  .logo-text {
    font-family: 'Courier New', monospace;
    font-size: 1.5rem;
    letter-spacing: 1px;
    margin: 0;
    position: relative;
  }
  
  .glitch-text {
    position: relative;
    display: inline-block;
  }
  
  .glitch-text::before,
  .glitch-text::after {
    content: attr(data-text);
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0.8;
  }
  
  .glitch-text::before {
    animation: glitch-anim 5s infinite linear alternate-reverse;
    clip-path: polygon(0 0, 100% 0, 100% 35%, 0 35%);
    transform: translate(-0.04em, -0.04em);
    opacity: 0.8;
    color: rgba(255, 0, 255, 0.8);
  }
  
  .glitch-text::after {
    animation: glitch-anim-2 5s infinite linear alternate-reverse;
    clip-path: polygon(0 65%, 100% 65%, 100% 100%, 0 100%);
    transform: translate(0.04em, 0.04em);
    opacity: 0.8;
    color: rgba(0, 255, 255, 0.8);
  }
  
  /* Navigation */
  .header-nav {
    flex: 2;
  }
  
  .nav-list {
    display: flex;
    justify-content: center;
    align-items: center;
    list-style: none;
    margin: 0;
    padding: 0;
    gap: 2rem;
  }
  
  .nav-item {
    position: relative;
  }
  
  .nav-link {
    display: block;
    color: rgba(255, 255, 255, 0.8);
    text-decoration: none;
    padding: 0.5rem 0;
    font-family: 'Courier New', monospace;
    font-size: 0.9rem;
    letter-spacing: 0.5px;
    transition: all 0.3s ease;
    position: relative;
  }
  
  .nav-underline {
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 1px;
    background: linear-gradient(90deg, transparent, rgba(153, 0, 255, 0.7), transparent);
    transform: scaleX(0);
    transition: transform 0.3s ease;
  }
  
  .nav-link:hover {
    color: rgba(153, 0, 255, 0.9);
  }
  
  .nav-link:hover .nav-underline {
    transform: scaleX(1);
  }
  
  /* Dropdown */
  .nav-dropdown {
    position: absolute;
    top: 100%;
    left: 0;
    background: rgba(10, 0, 20, 0.95);
    border: 1px solid rgba(153, 0, 255, 0.2);
    border-radius: 4px;
    min-width: 200px;
    opacity: 0;
    visibility: hidden;
    transform: translateY(10px);
    transition: all 0.3s ease;
    z-index: 10;
    overflow: hidden;
  }
  
  .nav-dropdown::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 1px;
    background: linear-gradient(90deg, transparent, rgba(153, 0, 255, 0.5), transparent);
  }
  
  .nav-item:hover .nav-dropdown {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }
  
  .dropdown-list {
    list-style: none;
    margin: 0;
    padding: 0.5rem 0;
  }
  
  .dropdown-link {
    display: block;
    padding: 0.5rem 1rem;
    color: rgba(255, 255, 255, 0.7);
    text-decoration: none;
    font-family: 'Courier New', monospace;
    font-size: 0.85rem;
    transition: all 0.2s ease;
  }
  
  .dropdown-link:hover {
    background: rgba(153, 0, 255, 0.1);
    color: rgba(153, 0, 255, 0.9);
  }
  
  /* Icon buttons */
  .icon-button {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background: transparent;
    border: 1px solid rgba(153, 0, 255, 0.3);
    color: rgba(255, 255, 255, 0.8);
    cursor: pointer;
    transition: all 0.2s ease;
  }
  
  .icon-button:hover {
    background: rgba(153, 0, 255, 0.1);
    border-color: rgba(153, 0, 255, 0.5);
    color: rgba(153, 0, 255, 0.9);
  }
  
  .cart-icon-wrapper {
    position: relative;
  }
  
  .cart-count {
    position: absolute;
    top: -8px;
    right: -8px;
    background: rgba(153, 0, 255, 0.8);
    color: white;
    font-size: 0.75rem;
    width: 18px;
    height: 18px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
  }
  
  .quantum-counter {
    position: relative;
    overflow: hidden;
  }
  
  .quantum-counter::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: radial-gradient(circle at center, rgba(255, 255, 255, 0.8) 0%, transparent 70%);
    opacity: 0;
    transform: scale(0.5);
    transition: all 0.3s ease;
  }
  
  .quantum-counter.pulse::before {
    opacity: 0.8;
    transform: scale(1.5);
    transition: all 0.5s cubic-bezier(0.1, 0.9, 0.2, 1);
  }
  
  /* Search drawer */
  .search-drawer {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    background: rgba(10, 0, 20, 0.95);
    padding: 1rem 2rem;
    transform: translateY(-100%);
    transition: transform 0.3s ease;
    z-index: 5;
  }
  
  .search-drawer.active {
    transform: translateY(0);
  }
  
  .search-container {
    max-width: 700px;
    margin: 0 auto;
  }
  
  .search-form {
    display: flex;
    align-items: center;
    border-bottom: 1px solid rgba(153, 0, 255, 0.3);
  }
  
  .search-input {
    flex: 1;
    background: transparent;
    border: none;
    padding: 0.5rem 0;
    color: rgba(255, 255, 255, 0.9);
    font-family: 'Courier New', monospace;
    font-size: 1rem;
  }
  
  .search-input:focus {
    outline: none;
  }
  
  .search-input::placeholder {
    color: rgba(153, 0, 255, 0.5);
  }
  
  .search-submit {
    background: transparent;
    border: none;
    color: rgba(153, 0, 255, 0.7);
    cursor: pointer;
    padding: 0.5rem;
    transition: all 0.2s ease;
  }
  
  .search-submit:hover {
    color: rgba(153, 0, 255, 0.9);
  }
  
  /* Cart drawer */
  .cart-drawer {
    position: fixed;
    top: 0;
    right: 0;
    bottom: 0;
    width: 350px;
    background: rgba(10, 0, 20, 0.97);
    border-left: 1px solid rgba(153, 0, 255, 0.2);
    transform: translateX(100%);
    transition: transform 0.3s ease;
    z-index: 200;
    display: flex;
    flex-direction: column;
    overflow: hidden;
  }
  
  .cart-drawer.active {
    transform: translateX(0);
  }
  
  .cart-drawer-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 1rem;
    border-bottom: 1px solid rgba(153, 0, 255, 0.2);
  }
  
  .cart-title {
    font-family: 'Courier New', monospace;
    font-size: 1.2rem;
    margin: 0;
    color: rgba(153, 0, 255, 0.9);
  }
  
  .cart-close {
    background: transparent;
    border: none;
    color: rgba(255, 255, 255, 0.7);
    font-size: 1.5rem;
    cursor: pointer;
    width: 30px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;
  }
  
  .cart-close:hover {
    color: rgba(153, 0, 255, 0.9);
  }
  
  .cart-drawer-content {
    flex: 1;
    overflow-y: auto;
    padding: 1rem;
  }
  
  .cart-items {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    margin-bottom: 1rem;
  }
  
  .cart-item {
    display: grid;
    grid-template-columns: 80px 1fr;
    gap: 1rem;
    padding: 1rem;
    background: rgba(153, 0, 255, 0.05);
    border: 1px solid rgba(153, 0, 255, 0.1);
    border-radius: 4px;
    position: relative;
  }
  
  .item-image {
    position: relative;
  }
  
  .item-image img {
    width: 100%;
    height: 80px;
    object-fit: cover;
    border-radius: 2px;
  }
  
  .item-depth {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    pointer-events: none;
    opacity: 0.7;
  }
  
  .depth-1 {
    border-top: 1px solid rgba(153, 0, 255, 0.5);
  }
  
  .depth-2 {
    border-top: 2px solid rgba(153, 0, 255, 0.7);
    border-bottom: 1px solid rgba(153, 0, 255, 0.5);
  }
  
  .depth-3 {
    border: 1px solid rgba(153, 0, 255, 0.7);
    box-shadow: 0 0 5px rgba(153, 0, 255, 0.5) inset;
  }
  
  .item-details {
    display: flex;
    flex-direction: column;
    position: relative;
  }
  
  .item-title {
    font-size: 0.9rem;
    margin: 0 0 0.25rem 0;
    padding-right: 20px;
  }
  
  .item-variant {
    font-size: 0.8rem;
    color: rgba(255, 255, 255, 0.6);
    margin-bottom: 0.5rem;
  }
  
  .item-price-qty {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-top: auto;
  }
  
  .item-price {
    font-size: 0.9rem;
  }
  
  .item-quantity {
    display: flex;
    align-items: center;
  }
  
  .qty-btn {
    width: 20px;
    height: 20px;
    background: rgba(153, 0, 255, 0.1);
    border: 1px solid rgba(153, 0, 255, 0.3);
    color: rgba(255, 255, 255, 0.8);
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    font-size: 0.8rem;
    line-height: 1;
    user-select: none;
  }
  
  .qty-input {
    width: 30px;
    height: 20px;
    background: transparent;
    border: 1px solid rgba(153, 0, 255, 0.3);
    border-left: none;
    border-right: none;
    color: rgba(255, 255, 255, 0.9);
    text-align: center;
    font-size: 0.8rem;
  }
  
  .qty-input::-webkit-outer-spin-button,
  .qty-input::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }
  
  .item-remove {
    position: absolute;
    top: 0;
    right: 0;
    background: transparent;
    border: none;
    color: rgba(255, 255, 255, 0.5);
    font-size: 0.9rem;
    cursor: pointer;
    width: 20px;
    height: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .item-remove:hover {
    color: rgba(255, 0, 80, 0.8);
  }
  
  .item-trauma-codes {
    grid-column: span 2;
    display: flex;
    flex-wrap: wrap;
    gap: 0.25rem;
    margin-top: 0.5rem;
  }
  
  .trauma-tag {
    font-size: 0.7rem;
    padding: 0.1rem 0.4rem;
    background: rgba(153, 0, 255, 0.1);
    border-left: 1px solid rgba(153, 0, 255, 0.5);
    border-radius: 2px;
    color: rgba(255, 255, 255, 0.7);
    text-transform: uppercase;
    letter-spacing: 0.5px;
    font-family: 'Courier New', monospace;
  }
  
  .cart-footer {
    margin-top: 1rem;
    border-top: 1px solid rgba(153, 0, 255, 0.2);
    padding-top: 1rem;
  }
  
  .cart-subtotal {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
  }
  
  .subtotal-label {
    font-size: 0.9rem;
    color: rgba(255, 255, 255, 0.7);
  }
  
  .subtotal-value {
    font-size: 1.1rem;
    color: rgba(153, 0, 255, 0.9);
  }
  
  .trust-badges {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    margin: 1rem 0;
    padding: 0.75rem;
    border-radius: 4px;
    background: rgba(153, 0, 255, 0.05);
    border: 1px solid rgba(153, 0, 255, 0.1);
  }
  
  .trust-badge {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.8rem;
    color: rgba(255, 255, 255, 0.8);
  }
  
  .badge-icon {
    color: rgba(153, 0, 255, 0.8);
  }
  
  .badge-text {
    font-family: 'Courier New', monospace;
    letter-spacing: 0.5px;
  }
  
  .cart-actions {
    display: flex;
    gap: 0.5rem;
  }
  
  .btn {
    flex: 1;
    padding: 0.75rem 1rem;
    border-radius: 4px;
    font-family: 'Courier New', monospace;
    font-size: 0.9rem;
    text-align: center;
    text-decoration: none;
    transition: all 0.2s ease;
  }
  
  .btn-secondary {
    background: rgba(153, 0, 255, 0.1);
    border: 1px solid rgba(153, 0, 255, 0.3);
    color: rgba(255, 255, 255, 0.9);
  }
  
  .btn-secondary:hover {
    background: rgba(153, 0, 255, 0.2);
    border-color: rgba(153, 0, 255, 0.5);
  }
  
  .btn-primary {
    background: rgba(153, 0, 255, 0.3);
    border: 1px solid rgba(153, 0, 255, 0.5);
    color: rgba(255, 255, 255, 0.9);
  }
  
  .btn-primary:hover {
    background: rgba(153, 0, 255, 0.4);
    border-color: rgba(153, 0, 255, 0.7);
  }
  
  .checkout-btn {
    position: relative;
    overflow: hidden;
  }
  
  .checkout-btn::before {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: linear-gradient(
      to bottom right,
      rgba(153, 0, 255, 0) 0%,
      rgba(153, 0, 255, 0.1) 40%,
      rgba(153, 0, 255, 0.3) 50%,
      rgba(153, 0, 255, 0.1) 60%,
      rgba(153, 0, 255, 0) 100%
    );
    transform: rotate(45deg);
    z-index: 1;
    animation: checkout-pulse 3s infinite linear;
  }
  
  @keyframes checkout-pulse {
    0% { transform: translateX(-100%) rotate(45deg); }
    100% { transform: translateX(100%) rotate(45deg); }
  }
  
  .empty-cart {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 2rem 0;
    text-align: center;
  }
  
  .empty-icon {
    margin-bottom: 1rem;
    color: rgba(153, 0, 255, 0.5);
  }
  
  .empty-title {
    font-family: 'Courier New', monospace;
    font-size: 1.1rem;
    margin: 0 0 0.5rem 0;
    color: rgba(153, 0, 255, 0.8);
  }
  
  .empty-text {
    margin: 0 0 1.5rem 0;
    color: rgba(255, 255, 255, 0.6);
    font-size: 0.9rem;
  }
  
  /* Animations */
  @keyframes pulse-fade {
    0% { opacity: 0.3; transform: scale(0.95); }
    100% { opacity: 0.7; transform: scale(1.05); }
  }
  
  @keyframes glitch-anim {
    0% { transform: translate(0); }
    20% { transform: translate(-2px, 1px); }
    40% { transform: translate(-1px, -1px); }
    60% { transform: translate(1px, 1px); }
    80% { transform: translate(-1px, -1px); }
    100% { transform: translate(0); }
  }
  
  @keyframes glitch-anim-2 {
    0% { transform: translate(0); }
    20% { transform: translate(2px, 1px); }
    40% { transform: translate(-1px, -1px); }
    60% { transform: translate(1px, -1px); }
    80% { transform: translate(1px, -2px); }
    100% { transform: translate(0); }
  }
  
  /* Responsive */
  @media (max-width: 768px) {
    .header-content {
      flex-wrap: wrap;
    }
    
    .header-nav {
      order: 3;
      flex-basis: 100%;
      margin-top: 1rem;
    }
    
    .nav-list {
      flex-wrap: wrap;
      gap: 1rem;
    }
    
    .cart-drawer {
      width: 100%;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Search toggle
    const searchToggle = document.querySelector('.search-toggle');
    const searchDrawer = document.querySelector('.search-drawer');
    
    searchToggle.addEventListener('click', () => {
      searchDrawer.classList.toggle('active');
      
      if (searchDrawer.classList.contains('active')) {
        searchDrawer.querySelector('.search-input').focus();
      }
    });
    
    // Cart toggle
    const cartToggle = document.querySelector('.cart-toggle');
    const cartDrawer = document.querySelector('.cart-drawer');
    const cartClose = document.querySelector('.cart-close');
    
    cartToggle.addEventListener('click', () => {
      cartDrawer.classList.add('active');
      
      // Notify NeuralBus
      if (window.NeuralBus) {
        window.NeuralBus.publish('cart:opened', {
          timestamp: Date.now()
        });
      }
    });
    
    cartClose.addEventListener('click', () => {
      cartDrawer.classList.remove('active');
    });
    
    // Close drawers when clicking outside
    document.addEventListener('click', (e) => {
      if (searchDrawer.classList.contains('active') && 
          !e.target.closest('.search-drawer') && 
          !e.target.closest('.search-toggle')) {
        searchDrawer.classList.remove('active');
      }
    });
    
    // Cart functionality
    const qtyButtons = document.querySelectorAll('.qty-btn');
    const removeButtons = document.querySelectorAll('.item-remove');
    
    qtyButtons.forEach(button => {
      button.addEventListener('click', () => {
        const input = button.parentElement.querySelector('.qty-input');
        const itemId = input.dataset.itemId;
        let value = parseInt(input.value);
        
        if (button.classList.contains('qty-decrease')) {
          value = Math.max(1, value - 1);
        } else {
          value += 1;
        }
        
        input.value = value;
        
        // Update cart
        fetch('/cart/change.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            id: itemId,
            quantity: value
          })
        })
        .then(response => response.json())
        .then(cart => {
          // Update cart count
          updateCartCount(cart.item_count);
          
          // Update subtotal
          document.querySelector('.subtotal-value').textContent = formatMoney(cart.total_price);
          
          // Notify NeuralBus
          if (window.NeuralBus) {
            window.NeuralBus.publish('cart:updated', {
              itemCount: cart.item_count,
              totalPrice: cart.total_price,
              timestamp: Date.now()
            });
          }
        })
        .catch(error => console.error('Error updating cart:', error));
      });
    });
    
    removeButtons.forEach(button => {
      button.addEventListener('click', () => {
        const itemId = button.dataset.itemId;
        const item = button.closest('.cart-item');
        
        // Visual feedback
        item.style.opacity = '0.5';
        
        // Remove from cart
        fetch('/cart/change.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            id: itemId,
            quantity: 0
          })
        })
        .then(response => response.json())
        .then(cart => {
          // Remove item element
          item.remove();
          
          // Update cart count
          updateCartCount(cart.item_count);
          
          // Update subtotal
          document.querySelector('.subtotal-value').textContent = formatMoney(cart.total_price);
          
          // Check if cart is empty
          if (cart.item_count === 0) {
            location.reload(); // Reload to show empty cart state
          }
          
          // Notify NeuralBus
          if (window.NeuralBus) {
            window.NeuralBus.publish('cart:item:removed', {
              itemId: itemId,
              itemCount: cart.item_count,
              timestamp: Date.now()
            });
          }
        })
        .catch(error => console.error('Error removing item:', error));
      });
    });
    
    // Helper functions
    function updateCartCount(count) {
      const cartCount = document.querySelector('.cart-count');
      cartCount.textContent = count;
      
      // Add pulse effect
      cartCount.classList.add('pulse');
      setTimeout(() => {
        cartCount.classList.remove('pulse');
      }, 500);
    }
    
    function formatMoney(cents) {
      return '$' + (cents / 100).toFixed(2);
    }
    
    // Connect to NeuralBus if available
    if (window.NeuralBus) {
      // Register header with NeuralBus
      if (NeuralBus.register) {
        NeuralBus.register('voidbloom-header', {
          version: '1.0.0',
          profile: 'VoidBloom'
        });
      }
      
      // Subscribe to quantum mutation events
      NeuralBus.subscribe('quantum:mutation', data => {
        if (data.profile === 'VoidBloom') {
          // Apply subtle glitch effect to header
          const header = document.querySelector('.voidbloom-header');
          header.style.setProperty('--glitch-intensity', data.intensity || 0.5);
          header.classList.add('quantum-mutation');
          
          setTimeout(() => {
            header.classList.remove('quantum-mutation');
          }, 1000);
        }
      });
      
      // Subscribe to cart events
      NeuralBus.subscribe('cart:reconfigured', data => {
        // Update cart count with animation
        if (data.itemCount !== undefined) {
          updateCartCount(data.itemCount);
        }
      });
    }
  });
</script>

{% schema %}
{
  "name": "VoidBloom Header",
  "settings": [
    {
      "type": "range",
      "id": "glitch_intensity",
      "label": "Glitch Intensity",
      "min": 0,
      "max": 1,
      "step": 0.1,
      "default": 0.7
    }
  ],
  "presets": [
    {
      "name": "VoidBloom Header",
      "category": "Header"
    }
  ]
}
{% endschema %}