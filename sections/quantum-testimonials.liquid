{% comment %}
  QUANTUM TESTIMONIALS
  Testimonials section with glitch effects

  @MutationCompatible: All Variants
  @StrategyProfile: quantum-entangled
  @Version: 1.0.0
{% endcomment %}

<section class="quantum-testimonials"
  data-neural-node
  data-profile="{{ section.settings.mutation_profile }}"
  data-glitch-level="{{ section.settings.glitch_level }}">

  <div class="quantum-testimonials-backdrop"></div>
  <div class="quantum-testimonials-particles" id="testimonials-particles"></div>

  <div class="container">
    {% if section.settings.title != blank %}
      <div class="section-header">
        <h2 class="section-title {% if section.settings.enable_title_effects %}glitch-text{% endif %}" data-text="{{ section.settings.title | escape }}">{{ section.settings.title }}</h2>
        {% if section.settings.subtitle != blank %}
          <div class="section-subtitle">{{ section.settings.subtitle }}</div>
        {% endif %}
      </div>
    {% endif %}

    <div class="testimonials-slider"
      data-autoplay="{{ section.settings.autoplay }}"
      data-interval="{{ section.settings.interval }}"
      data-glitch-on-transition="{{ section.settings.glitch_on_transition }}">

      <div class="testimonials-track">
        {% for block in section.blocks %}
          {% if block.type == 'testimonial' %}
            <div class="testimonial-slide" {{ block.shopify_attributes }} data-trauma-index="{{ block.settings.trauma_index }}">
              <div class="testimonial-card">
                <div class="testimonial-glitch-wrapper">
                  <div class="testimonial-glitch"></div>

                  {% if block.settings.quote != blank %}
                    <div class="testimonial-quote">
                      <blockquote>{{ block.settings.quote }}</blockquote>
                    </div>
                  {% endif %}

                  <div class="testimonial-author">
                    {% if block.settings.author_image != blank %}
                      <div class="author-image">
                        <div class="author-image-container {% if section.settings.enable_image_effects %}quantum-image{% endif %}">
                          <div class="quantum-image-glitch"></div>
                          <img src="{{ block.settings.author_image | img_url: '150x150', crop: 'center' }}"
                            alt="{{ block.settings.author_name | escape }}"
                            loading="lazy">
                        </div>
                      </div>
                    {% endif %}

                    <div class="author-details">
                      {% if block.settings.author_name != blank %}
                        <div class="author-name">{{ block.settings.author_name }}</div>
                      {% endif %}

                      {% if block.settings.author_title != blank %}
                        <div class="author-title">{{ block.settings.author_title }}</div>
                      {% endif %}

                      {% if block.settings.metascript != blank %}
                        <div class="author-metascript">{{ block.settings.metascript }}</div>
                      {% endif %}
                    </div>
                  </div>
                </div>

                {% if block.settings.show_flux_rating %}
                  <div class="flux-rating" data-flux="{{ block.settings.flux_rating }}">
                    <div class="flux-label">Flux Rating</div>
                    <div class="flux-stars">
                      {% for i in (1..5) %}
                        <span class="flux-star {% if i <= block.settings.flux_rating %}active{% endif %}">★</span>
                      {% endfor %}
                    </div>
                  </div>
                {% endif %}

                {% if section.settings.show_timestamp and block.settings.timestamp_text != blank %}
                  <div class="testimonial-timestamp">{{ block.settings.timestamp_text }}</div>
                {% endif %}

                {% if block.settings.enable_tags and block.settings.tags != blank %}
                  <div class="testimonial-tags">
                    {% assign tags = block.settings.tags | split: ',' %}
                    {% for tag in tags %}
                      <span class="testimonial-tag">{{ tag | strip }}</span>
                    {% endfor %}
                  </div>
                {% endif %}
              </div>
            </div>
          {% endif %}
        {% endfor %}
      </div>

      {% if section.blocks.size > 1 %}
        <div class="slider-controls">
          <button type="button" class="slider-control prev" data-direction="prev" aria-label="Previous testimonial">
            <span class="control-icon">◄</span>
          </button>

          <div class="slider-indicators">
            {% for block in section.blocks %}
              {% if block.type == 'testimonial' %}
                <button type="button" class="slider-indicator {% if forloop.first %}active{% endif %}" data-index="{{ forloop.index0 }}" aria-label="Go to testimonial {{ forloop.index }}"></button>
              {% endif %}
            {% endfor %}
          </div>

          <button type="button" class="slider-control next" data-direction="next" aria-label="Next testimonial">
            <span class="control-icon">►</span>
          </button>
        </div>
      {% endif %}
    </div>

    {% if section.blocks.size == 0 %}
      <div class="placeholder-container">
        <div class="placeholder-message">
          <p>Add testimonial blocks to populate this section.</p>
        </div>
      </div>
    {% endif %}
  </div>
</section>

<style>
  .quantum-testimonials {
    position: relative;
    padding: 6rem 2rem;
    overflow: hidden;
    background-color: rgba(10, 0, 20, 0.95);
    color: #fff;
  }

  .quantum-testimonials-backdrop {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(to bottom, rgba(10, 0, 20, 0.9), rgba(30, 0, 60, 0.6));
    z-index: 0;
  }

  .quantum-testimonials-particles {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 1;
    opacity: 0.4;
  }

  .container {
    max-width: 1440px;
    margin: 0 auto;
    position: relative;
    z-index: 2;
  }

  .section-header {
    text-align: center;
    margin-bottom: 4rem;
  }

  .section-title {
    font-family: 'Courier New', monospace;
    font-size: 2.5rem;
    margin: 0 0 1rem 0;
    letter-spacing: 2px;
    color: #fff;
    position: relative;
    display: inline-block;
  }

  .glitch-text {
    position: relative;
    display: inline-block;
  }

  .glitch-text::before,
  .glitch-text::after {
    content: attr(data-text);
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0.8;
  }

  .glitch-text::before {
    animation: glitch-anim 5s infinite linear alternate-reverse;
    clip-path: polygon(0 0, 100% 0, 100% 35%, 0 35%);
    transform: translate(-0.04em, -0.04em);
    opacity: 0.8;
    color: rgba(255, 0, 255, 0.8);
  }

  .glitch-text::after {
    animation: glitch-anim-2 5s infinite linear alternate-reverse;
    clip-path: polygon(0 65%, 100% 65%, 100% 100%, 0 100%);
    transform: translate(0.04em, 0.04em);
    opacity: 0.8;
    color: rgba(0, 255, 255, 0.8);
  }

  .section-subtitle {
    font-size: 1.1rem;
    margin-top: 1rem;
    color: rgba(255, 255, 255, 0.7);
    max-width: 700px;
    margin-left: auto;
    margin-right: auto;
  }

  /* Testimonials Slider */
  .testimonials-slider {
    position: relative;
    max-width: 800px;
    margin: 0 auto;
  }

  .testimonials-track {
    position: relative;
    overflow: hidden;
    min-height: 300px;
  }

  .testimonial-slide {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0;
    transform: translateX(50px);
    transition: opacity 0.6s ease, transform 0.6s ease;
  }

  .testimonial-slide.active {
    opacity: 1;
    transform: translateX(0);
    z-index: 2;
  }

  .testimonial-slide.previous {
    transform: translateX(-50px);
    z-index: 1;
  }

  /* Testimonial Card */
  .testimonial-card {
    background: rgba(30, 0, 60, 0.3);
    border: 1px solid rgba(153, 0, 255, 0.3);
    border-radius: 8px;
    padding: 2rem;
    position: relative;
    transition: all 0.3s ease;
    height: 100%;
    display: flex;
    flex-direction: column;
  }

  .testimonial-card:hover {
    border-color: rgba(153, 0, 255, 0.7);
    box-shadow: 0 0 20px rgba(153, 0, 255, 0.2);
  }

  .testimonial-glitch-wrapper {
    position: relative;
    z-index: 1;
  }

  .testimonial-glitch {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    opacity: 0;
    z-index: -1;
    transition: opacity 0.3s ease;
    background: radial-gradient(circle at center, rgba(153, 0, 255, 0.1) 0%, transparent 70%);
  }

  .testimonial-slide.glitching .testimonial-glitch {
    opacity: 1;
    animation: testimonial-glitch 0.5s ease;
  }

  .testimonial-quote {
    margin-bottom: 1.5rem;
  }

  .testimonial-quote blockquote {
    font-style: italic;
    color: rgba(255, 255, 255, 0.9);
    line-height: 1.6;
    margin: 0;
    padding: 0;
    position: relative;
  }

  .testimonial-quote blockquote::before,
  .testimonial-quote blockquote::after {
    content: '"';
    font-size: 2rem;
    color: rgba(153, 0, 255, 0.6);
    line-height: 0;
    position: relative;
  }

  .testimonial-quote blockquote::after {
    content: '"';
  }

  .testimonial-author {
    display: flex;
    align-items: center;
    margin-top: 1.5rem;
  }

  .author-image {
    margin-right: 1rem;
    flex-shrink: 0;
  }

  .author-image-container {
    width: 60px;
    height: 60px;
    border-radius: 50%;
    overflow: hidden;
    position: relative;
    border: 2px solid rgba(153, 0, 255, 0.5);
  }

  .author-image-container img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.6s cubic-bezier(0.165, 0.84, 0.44, 1);
  }

  .quantum-image:hover img {
    transform: scale(1.1);
  }

  .quantum-image-glitch {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(45deg, rgba(153, 0, 255, 0.2), rgba(0, 255, 255, 0.2));
    opacity: 0;
    mix-blend-mode: overlay;
    pointer-events: none;
    z-index: 2;
    transition: opacity 0.3s ease;
  }

  .quantum-image:hover .quantum-image-glitch {
    opacity: 0.8;
    animation: quantum-glitch 2s infinite alternate;
  }

  .author-details {
    flex-grow: 1;
  }

  .author-name {
    font-weight: bold;
    color: rgba(153, 0, 255, 0.9);
    margin-bottom: 0.25rem;
  }

  .author-title {
    font-size: 0.9rem;
    color: rgba(255, 255, 255, 0.7);
  }

  .author-metascript {
    font-size: 0.8rem;
    color: rgba(153, 0, 255, 0.7);
    margin-top: 0.25rem;
    font-family: 'Courier New', monospace;
  }

  .flux-rating {
    margin-top: 1.5rem;
    display: flex;
    align-items: center;
    justify-content: flex-end;
  }

  .flux-label {
    font-size: 0.8rem;
    color: rgba(255, 255, 255, 0.7);
    margin-right: 0.5rem;
  }

  .flux-stars {
    display: flex;
  }

  .flux-star {
    font-size: 1.2rem;
    color: rgba(153, 0, 255, 0.3);
    margin-right: 0.2rem;
    transition: color 0.3s ease;
  }

  .flux-star.active {
    color: rgba(153, 0, 255, 0.9);
  }

  .testimonial-timestamp {
    margin-top: 1rem;
    font-size: 0.8rem;
    color: rgba(255, 255, 255, 0.5);
    font-family: 'Courier New', monospace;
    text-align: right;
  }

  .testimonial-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-top: 1.5rem;
  }

  .testimonial-tag {
    font-size: 0.8rem;
    color: rgba(255, 255, 255, 0.8);
    background: rgba(153, 0, 255, 0.2);
    border: 1px solid rgba(153, 0, 255, 0.4);
    border-radius: 4px;
    padding: 0.25rem 0.75rem;
    display: inline-block;
  }

  /* Slider Controls */
  .slider-controls {
    display: flex;
    align-items: center;
    justify-content: center;
    margin-top: 2rem;
  }

  .slider-control {
    background: transparent;
    border: 1px solid rgba(153, 0, 255, 0.5);
    color: rgba(255, 255, 255, 0.8);
    width: 36px;
    height: 36px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .slider-control:hover {
    background: rgba(153, 0, 255, 0.2);
    color: rgba(255, 255, 255, 1);
  }

  .slider-indicators {
    display: flex;
    align-items: center;
    margin: 0 1rem;
  }

  .slider-indicator {
    width: 10px;
    height: 10px;
    border-radius: 50%;
    background: rgba(153, 0, 255, 0.2);
    border: 1px solid rgba(153, 0, 255, 0.4);
    margin: 0 0.3rem;
    padding: 0;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .slider-indicator.active {
    background: rgba(153, 0, 255, 0.7);
    transform: scale(1.2);
  }

  /* Placeholder */
  .placeholder-container {
    padding: 4rem 2rem;
    background: rgba(30, 0, 60, 0.3);
    border: 1px solid rgba(153, 0, 255, 0.3);
    border-radius: 8px;
    text-align: center;
  }

  .placeholder-message {
    color: rgba(255, 255, 255, 0.7);
    font-size: 1.1rem;
  }

  /* Animations */
  @keyframes glitch-anim {
    0% { transform: translate(0); }
    20% { transform: translate(-2px, 1px); }
    40% { transform: translate(-1px, -1px); }
    60% { transform: translate(1px, 1px); }
    80% { transform: translate(-1px, -1px); }
    100% { transform: translate(0); }
  }

  @keyframes glitch-anim-2 {
    0% { transform: translate(0); }
    20% { transform: translate(2px, 1px); }
    40% { transform: translate(-1px, -1px); }
    60% { transform: translate(1px, -1px); }
    80% { transform: translate(1px, -2px); }
    100% { transform: translate(0); }
  }

  @keyframes quantum-glitch {
    0% { clip-path: inset(0 0 0 0); }
    5% { clip-path: inset(8% 0 0 0); }
    10% { clip-path: inset(0 0 0 0); }
    15% { clip-path: inset(0 0 8% 0); }
    20% { clip-path: inset(50% 0 0 0); }
    25% { clip-path: inset(0 0 0 0); }
    30% { clip-path: inset(0 8% 0 0); }
    35% { clip-path: inset(0 0 0 8%); }
    40% { clip-path: inset(0 0 0 0); }
    45% { clip-path: inset(0 0 8% 0); }
    50% { clip-path: inset(8% 0 0 0); }
    55% { clip-path: inset(0 0 0 0); }
    60% { clip-path: inset(0 8% 0 0); }
    65% { clip-path: inset(0 0 0 0); }
    70% { clip-path: inset(0 0 0 8%); }
    75% { clip-path: inset(0 0 0 0); }
    80% { clip-path: inset(8% 0 0 0); }
    85% { clip-path: inset(0 0 0 0); }
    90% { clip-path: inset(0 8% 0 0); }
    95% { clip-path: inset(0 0 8% 0); }
    100% { clip-path: inset(0 0 0 0); }
  }

  @keyframes testimonial-glitch {
    0% { opacity: 0; transform: scale(1); }
    10% { opacity: 0.7; transform: scale(1.02); }
    15% { opacity: 0.4; transform: scale(0.98); }
    20% { opacity: 0.8; transform: scale(1.03); }
    35% { opacity: 0.3; transform: scale(0.97); }
    50% { opacity: 0.9; transform: scale(1.05); }
    65% { opacity: 0.5; transform: scale(0.99); }
    80% { opacity: 0.8; transform: scale(1.02); }
    90% { opacity: 0.6; transform: scale(1); }
    100% { opacity: 0; transform: scale(1); }
  }

  /* Responsive */
  @media (max-width: 768px) {
    .quantum-testimonials {
      padding: 4rem 1.5rem;
    }

    .section-title {
      font-size: 2rem;
    }

    .testimonial-author {
      flex-direction: column;
      align-items: flex-start;
    }

    .author-image {
      margin-right: 0;
      margin-bottom: 1rem;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize Quantum Visualizer for particles if available
    if (window.QuantumVisualizer) {
      const testimonialSection = document.querySelector('.quantum-testimonials');
      const profile = testimonialSection.getAttribute('data-profile') || 'VoidBloom';
      const glitchLevel = parseFloat(testimonialSection.getAttribute('data-glitch-level') || '0.5');

      const testimonialVisualizer = new QuantumVisualizer({
        container: document.getElementById('testimonials-particles'),
        particleCount: 25,
        colorScheme: profile,
        dimensions: '2d',
        fractalMode: false,
        intensity: glitchLevel
      });

      // Initialize with quantum state data
      const quantumData = Array(8).fill().map((_, i) => ({
        id: 'qt' + i,
        state: Math.random() > 0.5 ? 'superposition' : 'entangled',
        probability: Math.random(),
        profile: profile
      }));

      testimonialVisualizer.update(quantumData);

      // Use Intersection Observer to activate quantum effects when visible
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            testimonialVisualizer.activate();
          } else {
            testimonialVisualizer.deactivate();
          }
        });
      }, { threshold: 0.1 });

      observer.observe(testimonialSection);
    }

    // Testimonial Slider Functionality
    const slider = document.querySelector('.testimonials-slider');
    if (!slider) return;

    const slides = Array.from(document.querySelectorAll('.testimonial-slide'));
    if (slides.length === 0) return;

    const indicators = Array.from(document.querySelectorAll('.slider-indicator'));
    const trackElement = document.querySelector('.testimonials-track');

    // Set up track height based on the tallest slide
    function updateTrackHeight() {
      if (!trackElement || slides.length === 0) return;

      let maxHeight = 0;
      slides.forEach(slide => {
        slide.style.position = 'relative';
        const height = slide.offsetHeight;
        slide.style.position = 'absolute';
        maxHeight = Math.max(maxHeight, height);
      });

      trackElement.style.height = maxHeight + 'px';
    }

    // Initialize the first slide as active
    let currentIndex = 0;

    function activateSlide(index) {
      // Wrap around if index is out of bounds
      if (index < 0) index = slides.length - 1;
      if (index >= slides.length) index = 0;

      // Set previous index
      const prevIndex = currentIndex;
      currentIndex = index;

      // Check if we should apply glitch effect during transition
      const glitchOnTransition = slider.getAttribute('data-glitch-on-transition') === 'true';

      // Update slides
      slides.forEach((slide, i) => {
        slide.classList.remove('active', 'previous');

        if (i === currentIndex) {
          slide.classList.add('active');

          if (glitchOnTransition) {
            slide.classList.add('glitching');
            setTimeout(() => {
              slide.classList.remove('glitching');
            }, 500);
          }
        } else if (i === prevIndex) {
          slide.classList.add('previous');
        }
      });

      // Update indicators
      indicators.forEach((indicator, i) => {
        indicator.classList.toggle('active', i === currentIndex);
      });

      // Update track height after slide changes
      setTimeout(updateTrackHeight, 50);

      // Emit event to NeuralBus if available
      if (window.NeuralBus && NeuralBus.emit) {
        NeuralBus.emit('testimonial:slide:change', {
          currentIndex: currentIndex,
          previousIndex: prevIndex,
          timestamp: new Date().toISOString()
        });
      }
    }

    // Set up click handlers for controls and indicators
    const prevButton = document.querySelector('.slider-control.prev');
    const nextButton = document.querySelector('.slider-control.next');

    if (prevButton) {
      prevButton.addEventListener('click', () => {
        activateSlide(currentIndex - 1);
      });
    }

    if (nextButton) {
      nextButton.addEventListener('click', () => {
        activateSlide(currentIndex + 1);
      });
    }

    indicators.forEach((indicator, i) => {
      indicator.addEventListener('click', () => {
        activateSlide(i);
      });
    });

    // Set up autoplay if enabled
    const autoplay = slider.getAttribute('data-autoplay') === 'true';
    const interval = parseInt(slider.getAttribute('data-interval'), 10) || 5000;
    let autoplayTimer;

    function startAutoplay() {
      if (!autoplay) return;

      autoplayTimer = setInterval(() => {
        activateSlide(currentIndex + 1);
      }, interval);
    }

    function stopAutoplay() {
      clearInterval(autoplayTimer);
    }

    // Pause autoplay on hover
    slider.addEventListener('mouseenter', stopAutoplay);
    slider.addEventListener('mouseleave', startAutoplay);

    // Swipe support for touch devices
    let touchStartX = 0;
    let touchEndX = 0;

    trackElement.addEventListener('touchstart', e => {
      touchStartX = e.changedTouches[0].screenX;
    }, { passive: true });

    trackElement.addEventListener('touchend', e => {
      touchEndX = e.changedTouches[0].screenX;
      handleSwipe();
    }, { passive: true });

    function handleSwipe() {
      const swipeThreshold = 50; // Minimum distance to register as swipe

      if (touchEndX - touchStartX > swipeThreshold) {
        // Swiped right - go to previous slide
        activateSlide(currentIndex - 1);
      } else if (touchStartX - touchEndX > swipeThreshold) {
        // Swiped left - go to next slide
        activateSlide(currentIndex + 1);
      }
    }

    // Initialize first slide and start autoplay
    activateSlide(0);
    updateTrackHeight();
    startAutoplay();

    // Re-calculate height on window resize
    window.addEventListener('resize', updateTrackHeight);

    // Connect to NeuralBus if available
    if (window.NeuralBus) {
      const testimonialSection = document.querySelector('.quantum-testimonials');
      const profile = testimonialSection.getAttribute('data-profile') || 'VoidBloom';

      if (NeuralBus.register) {
        NeuralBus.register('quantum-testimonials', {
          version: '1.0.0',
          profile: profile
        });
      }

      // Subscribe to quantum mutation events
      if (NeuralBus.subscribe) {
        NeuralBus.subscribe('quantum:mutation', data => {
          if (data.profile === profile || !data.profile) {
            // When a quantum mutation occurs, activate glitch effects on the active testimonial
            const activeSlide = document.querySelector('.testimonial-slide.active');
            if (activeSlide) {
              // Apply stronger effect to testimonials with trauma index close to mutation intensity
              const traumaIndex = parseFloat(activeSlide.getAttribute('data-trauma-index') || '0.5');
              const mutationIntensity = data.intensity || 0.5;

              if (Math.abs(traumaIndex - mutationIntensity) < 0.3) {
                activeSlide.classList.add('glitching');

                setTimeout(() => {
                  activeSlide.classList.remove('glitching');
                }, 1000);
              }
            }
          }
        });
      }
    }
  });
</script>

{% schema %}
{
  "name": "Quantum Testimonials",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Section Title",
      "default": "Memory Archives"
    },
    {
      "type": "text",
      "id": "subtitle",
      "label": "Section Subtitle",
      "default": "Echoes from the void"
    },
    {
      "type": "select",
      "id": "mutation_profile",
      "label": "Mutation Profile",
      "options": [
        {
          "value": "CyberLotus",
          "label": "CyberLotus (Pink/Cyan)"
        },
        {
          "value": "ObsidianBloom",
          "label": "ObsidianBloom (Purple/Pink)"
        },
        {
          "value": "VoidBloom",
          "label": "VoidBloom (Purple/Magenta)"
        },
        {
          "value": "NeonVortex",
          "label": "NeonVortex (Blue/Orange)"
        }
      ],
      "default": "VoidBloom"
    },
    {
      "type": "range",
      "id": "glitch_level",
      "min": 0,
      "max": 1,
      "step": 0.1,
      "label": "Glitch Intensity",
      "default": 0.4
    },
    {
      "type": "checkbox",
      "id": "enable_title_effects",
      "label": "Enable Title Glitch Effects",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "enable_image_effects",
      "label": "Enable Image Quantum Effects",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_timestamp",
      "label": "Show Timestamp",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "autoplay",
      "label": "Enable Autoplay",
      "default": true
    },
    {
      "type": "range",
      "id": "interval",
      "min": 3,
      "max": 10,
      "step": 1,
      "unit": "s",
      "label": "Change Interval",
      "default": 5
    },
    {
      "type": "checkbox",
      "id": "glitch_on_transition",
      "label": "Apply Glitch Effect on Transition",
      "default": true
    }
  ],
  "blocks": [
    {
      "type": "testimonial",
      "name": "Testimonial",
      "settings": [
        {
          "type": "richtext",
          "id": "quote",
          "label": "Testimonial Text",
          "default": "<p>The quantum artifacts I acquired from VoidBloom have transformed my neural pathways. My memory recall is now enhanced by 42% and the trauma index has decreased significantly.</p>"
        },
        {
          "type": "text",
          "id": "author_name",
          "label": "Author Name",
          "default": "Aria Voidseeker"
        },
        {
          "type": "text",
          "id": "author_title",
          "label": "Author Title/Role",
          "default": "Neural Architect"
        },
        {
          "type": "image_picker",
          "id": "author_image",
          "label": "Author Image"
        },
        {
          "type": "text",
          "id": "metascript",
          "label": "Meta Information",
          "default": "ID: VS-7832-X",
          "info": "Additional information about the testimonial source"
        },
        {
          "type": "text",
          "id": "timestamp_text",
          "label": "Timestamp",
          "default": "2025.04.17-14:23:06"
        },
        {
          "type": "checkbox",
          "id": "show_flux_rating",
          "label": "Show Flux Rating",
          "default": true
        },
        {
          "type": "range",
          "id": "flux_rating",
          "min": 1,
          "max": 5,
          "step": 1,
          "label": "Flux Rating",
          "default": 4
        },
        {
          "type": "checkbox",
          "id": "enable_tags",
          "label": "Enable Tags",
          "default": true
        },
        {
          "type": "text",
          "id": "tags",
          "label": "Tags (comma separated)",
          "default": "neural, void, quantum-bridge",
          "info": "Enter tags separated by commas"
        },
        {
          "type": "range",
          "id": "trauma_index",
          "min": 0,
          "max": 1,
          "step": 0.1,
          "label": "Trauma Index",
          "default": 0.5,
          "info": "Controls how this testimonial reacts to quantum mutations"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Quantum Testimonials",
      "category": "Testimonials",
      "blocks": [
        {
          "type": "testimonial"
        },
        {
          "type": "testimonial"
        },
        {
          "type": "testimonial"
        }
      ]
    }
  ]
}
{% endschema %}
