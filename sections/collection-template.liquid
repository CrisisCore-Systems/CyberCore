<div class="collection-container"
     x-data="{
       traumaFilterActive: false,
       traumaFilterMin: 0,
       traumaFilterMax: 10,
       memoryPhaseFilter: 'all',
       sortOrder: 'featured'
     }">

  <!-- Collection Header -->
  <div class="collection-header mb-8">
    <h1 class="text-3xl font-trauma mb-3">{{ collection.title }}</h1>

    {% if collection.description != blank %}
      <div class="prose prose-void max-w-none mb-6">
        {{ collection.description }}
      </div>
    {% endif %}
  </div>

  <!-- Collection Toolbar -->
  <div class="collection-toolbar flex flex-wrap gap-4 items-center justify-between mb-6 pb-4 border-b border-void-800">
    <!-- Filter toggle -->
    <button type="button"
            @click="traumaFilterActive = !traumaFilterActive"
            class="flex items-center text-void-300 hover:text-trauma-500 transition-colors">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z" />
      </svg>
      <span x-text="traumaFilterActive ? 'Hide Filters' : 'Filter Memory Archive'"></span>
    </button>

    <!-- Sort dropdown -->
    <div class="flex items-center">
      <label for="SortBy" class="text-void-400 text-sm mr-2">Sort By:</label>
      <select id="SortBy"
              x-model="sortOrder"
              @change="window.location.search = '?sort_by=' + sortOrder"
              class="bg-void-800 border border-void-700 text-void-300 rounded-md text-sm py-1 pl-3 pr-8 focus:ring-1 focus:ring-trauma-500 focus:border-trauma-500">
        <option value="manual">Featured</option>
        <option value="best-selling">Best Selling</option>
        <option value="title-ascending">Alphabetically, A-Z</option>
        <option value="title-descending">Alphabetically, Z-A</option>
        <option value="price-ascending">Price, low to high</option>
        <option value="price-descending">Price, high to low</option>
        <option value="created-descending">Date, new to old</option>
        <option value="created-ascending">Date, old to new</option>
      </select>
    </div>
  </div>

  <!-- Filter panel -->
  <div x-show="traumaFilterActive"
       x-transition:enter="transition ease-out duration-300"
       x-transition:enter-start="opacity-0 transform -translate-y-4"
       x-transition:enter-end="opacity-100 transform translate-y-0"
       x-transition:leave="transition ease-in duration-300"
       x-transition:leave-start="opacity-100 transform translate-y-0"
       x-transition:leave-end="opacity-0 transform -translate-y-4"
       class="filter-panel bg-void-900/60 border border-void-800 rounded-lg p-4 mb-6">

    <!-- Trauma Level Filter -->
    <div class="mb-4">
      <h3 class="text-void-300 font-medium mb-2">Trauma Encoding Level</h3>
      <div class="trauma-slider flex items-center">
        <span class="text-void-400 text-sm w-8">{{ traumaFilterMin }}</span>
        <div class="relative flex-grow mx-3">
          <div class="range-slider bg-void-700 w-full h-1 rounded-full">
            <div class="range-selected absolute h-1 bg-trauma-500 rounded-full"
                 :style="`left: ${traumaFilterMin * 10}%; right: ${100 - traumaFilterMax * 10}%`"></div>
          </div>
          <input type="range"
                 min="0"
                 max="10"
                 step="1"
                 x-model="traumaFilterMin"
                 class="absolute w-full h-1 appearance-none bg-transparent pointer-events-auto">
          <input type="range"
                 min="0"
                 max="10"
                 step="1"
                 x-model="traumaFilterMax"
                 class="absolute w-full h-1 appearance-none bg-transparent pointer-events-auto">
        </div>
        <span class="text-void-400 text-sm w-8 text-right">{{ traumaFilterMax }}</span>
      </div>
    </div>

    <!-- Memory Phase Filter -->
    <div>
      <h3 class="text-void-300 font-medium mb-2">Memory Phase</h3>
      <div class="flex flex-wrap gap-2">
        <button type="button"
                @click="memoryPhaseFilter = 'all'"
                :class="{ 'bg-void-700 text-void-200': memoryPhaseFilter === 'all', 'bg-void-800 text-void-400 hover:bg-void-700': memoryPhaseFilter !== 'all' }"
                class="px-3 py-1.5 rounded-md text-sm transition-colors">
          All Phases
        </button>

        <button type="button"
                @click="memoryPhaseFilter = 'cyber-lotus'"
                :class="{ 'bg-cyber-900/40 text-cyber-300': memoryPhaseFilter === 'cyber-lotus', 'bg-void-800 text-void-400 hover:bg-void-700': memoryPhaseFilter !== 'cyber-lotus' }"
                class="px-3 py-1.5 rounded-md text-sm transition-colors">
          Cyber Lotus
        </button>

        <button type="button"
                @click="memoryPhaseFilter = 'alien-flora'"
                :class="{ 'bg-alien-900/40 text-alien-300': memoryPhaseFilter === 'alien-flora', 'bg-void-800 text-void-400 hover:bg-void-700': memoryPhaseFilter !== 'alien-flora' }"
                class="px-3 py-1.5 rounded-md text-sm transition-colors">
          Alien Flora
        </button>

        <button type="button"
                @click="memoryPhaseFilter = 'rolling-virus'"
                :class="{ 'bg-virus-900/40 text-virus-300': memoryPhaseFilter === 'rolling-virus', 'bg-void-800 text-void-400 hover:bg-void-700': memoryPhaseFilter !== 'rolling-virus' }"
                class="px-3 py-1.5 rounded-md text-sm transition-colors">
          Rolling Virus
        </button>

        <button type="button"
                @click="memoryPhaseFilter = 'trauma-core'"
                :class="{ 'bg-trauma-900/40 text-trauma-300': memoryPhaseFilter === 'trauma-core', 'bg-void-800 text-void-400 hover:bg-void-700': memoryPhaseFilter !== 'trauma-core' }"
                class="px-3 py-1.5 rounded-md text-sm transition-colors">
          Trauma Core
        </button>
      </div>
    </div>

    <!-- Apply/Reset Filters -->
    <div class="flex justify-end mt-4 pt-4 border-t border-void-800">
      <button type="button"
              @click="traumaFilterMin = 0; traumaFilterMax = 10; memoryPhaseFilter = 'all';"
              class="px-4 py-2 text-sm text-void-300 hover:text-trauma-500 transition-colors mr-3">
        Reset Filters
      </button>
      <button type="button"
              @click="applyFilters()"
              class="px-4 py-2 text-sm bg-trauma-600 hover:bg-trauma-700 text-white rounded-md transition-colors">
        Apply Filters
      </button>
    </div>
  </div>

  <!-- Collection Products -->
  <div class="collection-products">
    {% paginate collection.products by 24 %}
      <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
        {% for product in collection.products %}
          <!-- Filter by trauma level and memory phase using x-show -->
          <div x-show="
            (traumaFilterMin <= {{ product.metafields.voidbloom.trauma_level | default: 0 }} &&
            {{ product.metafields.voidbloom.trauma_level | default: 0 }} <= traumaFilterMax) &&
            (memoryPhaseFilter === 'all' || memoryPhaseFilter === '{{ product.metafields.voidbloom.memory_phase | default: 'cyber-lotus' }}')
          ">
            {% render 'product-card', product: product %}
          </div>
        {% else %}
          <div class="col-span-full py-12 text-center">
            <p class="text-void-400">No memory artifacts found with the current filter settings.</p>
          </div>
        {% endfor %}
      </div>

      <!-- Pagination -->
      {% if paginate.pages > 1 %}
        <div class="pagination flex justify-center space-x-2 mt-12">
          {%- if paginate.previous -%}
            <a href="{{ paginate.previous.url }}" class="px-4 py-2 border border-void-700 rounded-md text-void-300 hover:border-trauma-500 hover:text-trauma-500 transition-colors">
              Previous
            </a>
          {%- endif -%}

          {%- for part in paginate.parts -%}
            {%- if part.is_link -%}
              <a href="{{ part.url }}" class="px-4 py-2 border border-void-700 rounded-md text-void-300 hover:border-trauma-500 hover:text-trauma-500 transition-colors">
                {{ part.title }}
              </a>
            {%- else -%}
              <span class="px-4 py-2 border border-trauma-500 bg-trauma-900/20 rounded-md text-trauma-400">
                {{ part.title }}
              </span>
            {%- endif -%}
          {%- endfor -%}

          {%- if paginate.next -%}
            <a href="{{ paginate.next.url }}" class="px-4 py-2 border border-void-700 rounded-md text-void-300 hover:border-trauma-500 hover:text-trauma-500 transition-colors">
              Next
            </a>
          {%- endif -%}
        </div>
      {% endif %}
    {% endpaginate %}
  </div>
</div>

<script>
  // Filter application function
  function applyFilters() {
    const minTrauma = document.querySelector('[x-model="traumaFilterMin"]').value;
    const maxTrauma = document.querySelector('[x-model="traumaFilterMax"]').value;
    const memoryPhase = document.querySelector('[x-model="memoryPhaseFilter"]').value;

    // Build filter URL
    let filterParams = new URLSearchParams(window.location.search);
    filterParams.set('filter.v.meta.voidbloom.trauma_level.gte', minTrauma);
    filterParams.set('filter.v.meta.voidbloom.trauma_level.lte', maxTrauma);

    if (memoryPhase !== 'all') {
      filterParams.set('filter.v.meta.voidbloom.memory_phase', memoryPhase);
    } else {
      filterParams.delete('filter.v.meta.voidbloom.memory_phase');
    }

    // Apply filters
    window.location.search = filterParams.toString();
  }
</script>

{% schema %}
{
  "name": "Collection",
  "settings": [
    {
      "type": "select",
      "id": "product_layout",
      "label": "Product layout",
      "options": [
        {
          "value": "grid",
          "label": "Grid"
        },
        {
          "value": "list",
          "label": "List"
        }
      ],
      "default": "grid"
    },
    {
      "type": "select",
      "id": "products_per_row",
      "label": "Products per row",
      "options": [
        {
          "value": "2",
          "label": "2"
        },
        {
          "value": "3",
          "label": "3"
        },
        {
          "value": "4",
          "label": "4"
        }
      ],
      "default": "3"
    },
    {
      "type": "range",
      "id": "products_per_page",
      "min": 8,
      "max": 48,
      "step": 4,
      "label": "Products per page",
      "default": 24
    },
    {
      "type": "checkbox",
      "id": "show_trauma_filter",
      "label": "Show trauma level filter",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_memory_phase_filter",
      "label": "Show memory phase filter",
      "default": true
    }
  ]
}
{% endschema %}
