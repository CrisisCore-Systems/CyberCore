{% comment %}
@MutationCompatible: All Variants
@StrategyProfile: quantum-entangled
@Version: 2.0.0
{% endcomment %}

<div class="collection-template" data-section-id="{{ section.id }}" data-section-type="collection">
  <div class="container">
    <!-- Collection header -->
    <div class="collection-header">
      {% if section.settings.show_collection_image and collection.image %}
        <div class="collection-image-container">
          <img
            srcset="{% for width in section.settings.collection_image_widths %}{{ collection.image | img_url: width | append: ' ' | append: width | append: 'w' }}{% if forloop.last == false %}, {% endif %}{% endfor %}"
            sizes="(min-width: 1200px) {{ section.settings.collection_image_widths.last }}px, 100vw"
            src="{{ collection.image | img_url: '1080x' }}"
            alt="{{ collection.title | escape }}"
            loading="lazy"
            width="{{ collection.image.width }}"
            height="{{ collection.image.height }}"
            class="collection-image"
          >

          {% if section.settings.enable_trauma_overlay %}
            <div class="trauma-overlay trauma-{{ section.settings.trauma_overlay_type }} {% if section.settings.adapt_trauma_overlay %}adaptive-overlay{% endif %}"></div>
          {% endif %}
        </div>
      {% endif %}

      <div class="collection-info">
        <h1 class="collection-title">{{ collection.title }}</h1>

        {% if collection.description != blank and section.settings.show_collection_description %}
          <div class="collection-description rte">
            {{ collection.description }}
          </div>
        {% endif %}

        {% if section.settings.show_collection_products_count %}
          <div class="collection-products-count">
            {% if collection.products_count == 1 %}
              {{ 'collections.general.item_count.one' | t: count: collection.products_count }}
            {% else %}
              {{ 'collections.general.item_count.other' | t: count: collection.products_count }}
            {% endif %}
          </div>
        {% endif %}
      </div>
    </div>

    <div class="collection-content">
      <!-- Collection toolbar -->
      <div class="collection-toolbar">
        <!-- Filter and sort options -->
        <div class="collection-filters">
          {% if section.settings.enable_filtering %}
            <button type="button" class="filter-button" aria-expanded="false" aria-controls="CollectionFilters">
              {{ 'collections.filters.title' | t }}
              <span class="filter-icon"></span>
            </button>
          {% endif %}

          {% if section.settings.enable_sorting %}
            <div class="sort-options">
              <label for="SortBy" class="sort-label">{{ 'collections.sorting.title' | t }}</label>
              <div class="select-wrapper">
                <select id="SortBy" class="sort-by" aria-describedby="a11y-refresh-page-message">
                  {%- for option in collection.sort_options -%}
                    <option
                      value="{{ option.value }}"
                      {% if option.value == collection.sort_by %}selected="selected"{% endif %}
                    >
                      {{ option.name }}
                    </option>
                  {%- endfor -%}
                </select>
              </div>
            </div>
          {% endif %}
        </div>

        <!-- View options -->
        <div class="view-options">
          <button type="button" class="view-button grid-view active" aria-label="{{ 'collections.general.grid_view' | t }}" data-view="grid">
            <span class="view-icon grid-icon"></span>
          </button>
          <button type="button" class="view-button list-view" aria-label="{{ 'collections.general.list_view' | t }}" data-view="list">
            <span class="view-icon list-icon"></span>
          </button>
        </div>
      </div>

      <!-- Collection sidebar filters -->
      {% if section.settings.enable_filtering %}
        <div id="CollectionFilters" class="collection-filters-sidebar">
          <div class="filters-header">
            <h2 class="filters-title">{{ 'collections.filters.title' | t }}</h2>
            <button type="button" class="close-filters" aria-label="{{ 'collections.filters.close' | t }}">
              <span class="close-icon"></span>
            </button>
          </div>

          <form id="CollectionFiltersForm" class="collection-filters-form">
            {% for filter in collection.filters %}
              <div class="filter-group">
                <details class="filter-disclosure" open>
                  <summary class="filter-heading">
                    <span>{{ filter.label }}</span>
                    <span class="disclosure-icon"></span>
                  </summary>

                  <div class="filter-options">
                    {% case filter.type %}
                      {% when 'boolean' or 'list' %}
                        {% for filter_value in filter.values %}
                          <div class="filter-checkbox">
                            <input
                              type="checkbox"
                              id="Filter-{{ filter.label | handleize }}-{{ filter_value.label | handleize }}"
                              name="{{ filter_value.param_name }}"
                              value="{{ filter_value.value }}"
                              {% if filter_value.active %}checked{% endif %}
                              {% if filter_value.count == 0 and filter_value.active == false %}disabled{% endif %}
                            >
                            <label for="Filter-{{ filter.label | handleize }}-{{ filter_value.label | handleize }}">
                              {{ filter_value.label }}
                              <span class="filter-count">({{ filter_value.count }})</span>
                            </label>
                          </div>
                        {% endfor %}

                      {% when 'price_range' %}
                        <div class="price-range-slider">
                          <div class="price-range-labels">
                            <span>{{ 'collections.filters.from' | t }}</span>
                            <span>{{ 'collections.filters.to' | t }}</span>
                          </div>

                          <div class="price-inputs">
                            <input
                              type="number"
                              name="{{ filter.min_value.param_name }}"
                              id="Filter-{{ filter.label | handleize }}-GTE"
                              placeholder="{{ filter.min_value.value | default: 0 | money_without_currency }}"
                              min="0"
                              value="{% if filter.min_value.value != 0 %}{{ filter.min_value.value | money_without_currency }}{% endif %}"
                            >
                            <input
                              type="number"
                              name="{{ filter.max_value.param_name }}"
                              id="Filter-{{ filter.label | handleize }}-LTE"
                              placeholder="{{ filter.max_value.value | default: filter.range_max | money_without_currency }}"
                              max="{{ filter.range_max | money_without_currency }}"
                              value="{% if filter.max_value.value != filter.range_max %}{{ filter.max_value.value | money_without_currency }}{% endif %}"
                            >
                          </div>
                        </div>
                    {% endcase %}
                  </div>
                </details>
              </div>
            {% endfor %}

            {% if section.settings.enable_trauma_filter %}
              <div class="filter-group trauma-filter">
                <details class="filter-disclosure" open>
                  <summary class="filter-heading">
                    <span>{{ 'collections.filters.trauma_encoding' | t }}</span>
                    <span class="disclosure-icon"></span>
                  </summary>

                  <div class="filter-options">
                    <div class="trauma-encoding-options">
                      <div class="trauma-option">
                        <input type="checkbox" id="trauma-abandonment" name="filter.v.m.traumaType" value="abandonment">
                        <label for="trauma-abandonment">Abandonment</label>
                      </div>
                      <div class="trauma-option">
                        <input type="checkbox" id="trauma-fragmentation" name="filter.v.m.traumaType" value="fragmentation">
                        <label for="trauma-fragmentation">Fragmentation</label>
                      </div>
                      <div class="trauma-option">
                        <input type="checkbox" id="trauma-surveillance" name="filter.v.m.traumaType" value="surveillance">
                        <label for="trauma-surveillance">Surveillance</label>
                      </div>
                      <div class="trauma-option">
                        <input type="checkbox" id="trauma-recursion" name="filter.v.m.traumaType" value="recursion">
                        <label for="trauma-recursion">Recursion</label>
                      </div>
                      <div class="trauma-option">
                        <input type="checkbox" id="trauma-displacement" name="filter.v.m.traumaType" value="displacement">
                        <label for="trauma-displacement">Displacement</label>
                      </div>
                      <div class="trauma-option">
                        <input type="checkbox" id="trauma-dissolution" name="filter.v.m.traumaType" value="dissolution">
                        <label for="trauma-dissolution">Dissolution</label>
                      </div>
                    </div>

                    {% if section.settings.enable_affinity_filter %}
                      <div class="affinity-filter">
                        <h4>{{ 'collections.filters.affinity' | t }}</h4>
                        <div class="affinity-slider">
                          <input
                            type="range"
                            min="0"
                            max="100"
                            value="50"
                            class="affinity-range"
                            id="affinity-threshold"
                          >
                          <div class="affinity-labels">
                            <span>{{ 'collections.filters.any' | t }}</span>
                            <span>{{ 'collections.filters.resonant' | t }}</span>
                          </div>
                        </div>
                      </div>
                    {% endif %}
                  </div>
                </details>
              </div>
            {% endif %}

            <!-- Filter actions -->
            <div class="filter-actions">
              {% if collection.filters.size > 0 %}
                <button type="reset" class="clear-filters">
                  {{ 'collections.filters.clear' | t }}
                </button>
              {% endif %}

              <button type="submit" class="apply-filters">
                {{ 'collections.filters.apply' | t }}
              </button>
            </div>
          </form>
        </div>
      {% endif %}

      <!-- Products grid -->
      <div class="collection-products-container">
        {% if collection.products.size > 0 %}
          <div class="collection-products grid-view" data-view-mode="grid">
            {% for product in collection.products %}
              <div class="product-card-wrapper">
                {% render 'product-card',
                  product: product,
                  show_vendor: section.settings.show_vendor,
                  show_price: section.settings.show_price,
                  show_rating: section.settings.show_rating,
                  show_trauma_indicator: section.settings.show_trauma_indicator,
                  show_quick_add: section.settings.show_quick_add
                %}
              </div>
            {% endfor %}
          </div>
        {% else %}
          <div class="collection-empty">
            <p>{{ 'collections.general.empty' | t }}</p>
            <div class="button-container">
              <a href="{{ routes.all_products_collection_url }}" class="button">
                {{ 'collections.general.view_all_products' | t }}
              </a>
            </div>
          </div>
        {% endif %}

        <!-- Pagination -->
        {% if paginate.pages > 1 %}
          <div class="collection-pagination">
            <nav class="pagination" role="navigation" aria-label="{{ 'general.pagination.label' | t }}">
              <ul class="pagination-list">
                {% if paginate.previous %}
                  <li>
                    <a href="{{ paginate.previous.url }}" class="pagination-link pagination-previous" aria-label="{{ 'general.pagination.previous' | t }}">
                      <span class="pagination-arrow left-arrow"></span>
                    </a>
                  </li>
                {% else %}
                  <li>
                    <span class="pagination-link pagination-previous disabled" aria-disabled="true">
                      <span class="pagination-arrow left-arrow"></span>
                    </span>
                  </li>
                {% endif %}

                {% for part in paginate.parts %}
                  {% if part.is_link %}
                    <li>
                      <a href="{{ part.url }}" class="pagination-link" aria-label="{{ 'general.pagination.page' | t: number: part.title }}">
                        {{ part.title }}
                      </a>
                    </li>
                  {% else %}
                    <li>
                      <span class="pagination-link {% if part.title == paginate.current_page %}current{% endif %}" aria-current="{% if part.title == paginate.current_page %}page{% endif %}">
                        {{ part.title }}
                      </span>
                    </li>
                  {% endif %}
                {% endfor %}

                {% if paginate.next %}
                  <li>
                    <a href="{{ paginate.next.url }}" class="pagination-link pagination-next" aria-label="{{ 'general.pagination.next' | t }}">
                      <span class="pagination-arrow right-arrow"></span>
                    </a>
                  </li>
                {% else %}
                  <li>
                    <span class="pagination-link pagination-next disabled" aria-disabled="true">
                      <span class="pagination-arrow right-arrow"></span>
                    </span>
                  </li>
                {% endif %}
              </ul>
            </nav>
          </div>
        {% endif %}
      </div>
    </div>
  </div>
</div>

{% schema %}
{
  "name": "Collection Template",
  "settings": [
    {
      "type": "header",
      "content": "Collection Header"
    },
    {
      "type": "checkbox",
      "id": "show_collection_image",
      "label": "Show collection image",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "enable_trauma_overlay",
      "label": "Enable trauma overlay on image",
      "default": true
    },
    {
      "type": "select",
      "id": "trauma_overlay_type",
      "label": "Trauma overlay type",
      "options": [
        {
          "value": "abandonment",
          "label": "Abandonment"
        },
        {
          "value": "fragmentation",
          "label": "Fragmentation"
        },
        {
          "value": "surveillance",
          "label": "Surveillance"
        },
        {
          "value": "recursion",
          "label": "Recursion"
        },
        {
          "value": "displacement",
          "label": "Displacement"
        },
        {
          "value": "dissolution",
          "label": "Dissolution"
        }
      ],
      "default": "recursion"
    },
    {
      "type": "checkbox",
      "id": "adapt_trauma_overlay",
      "label": "Adapt overlay to user profile",
      "default": true
    },
    {
      "type": "array",
      "id": "collection_image_widths",
      "label": "Collection image widths",
      "info": "Widths used for responsive image srcset attribute",
      "default": [
        720,
        960,
        1280,
        1440,
        1920
      ]
    },
    {
      "type": "checkbox",
      "id": "show_collection_description",
      "label": "Show collection description",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_collection_products_count",
      "label": "Show products count",
      "default": true
    },
    {
      "type": "header",
      "content": "Filtering and Sorting"
    },
    {
      "type": "checkbox",
      "id": "enable_filtering",
      "label": "Enable filtering",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "enable_sorting",
      "label": "Enable sorting",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "enable_trauma_filter",
      "label": "Enable trauma encoding filter",
      "default": true,
      "info": "Allows filtering products by trauma encoding type"
    },
    {
      "type": "checkbox",
      "id": "enable_affinity_filter",
      "label": "Enable affinity filter",
      "default": true,
      "info": "Allows filtering products by resonance with user's trauma profile"
    },
    {
      "type": "header",
      "content": "Product Cards"
    },
    {
      "type": "checkbox",
      "id": "show_vendor",
      "label": "Show vendor",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_price",
      "label": "Show price",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_rating",
      "label": "Show rating",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_trauma_indicator",
      "label": "Show trauma encoding indicator",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_quick_add",
      "label": "Show quick add button",
      "default": true
    }
  ]
}
{% endschema %}

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // View toggling
    const viewButtons = document.querySelectorAll('.view-button');
    const productsContainer = document.querySelector('.collection-products');

    if (viewButtons.length > 0 && productsContainer) {
      viewButtons.forEach(button => {
        button.addEventListener('click', function() {
          const viewMode = this.getAttribute('data-view');

          // Update active button state
          viewButtons.forEach(btn => btn.classList.remove('active'));
          this.classList.add('active');

          // Update products container class
          productsContainer.className = 'collection-products ' + viewMode + '-view';
          productsContainer.setAttribute('data-view-mode', viewMode);

          // Store user preference in local storage
          localStorage.setItem('voidbloom_collection_view', viewMode);
        });
      });

      // Load user preference if any
      const savedView = localStorage.getItem('voidbloom_collection_view');
      if (savedView) {
        const targetButton = document.querySelector(`.view-button[data-view="${savedView}"]`);
        if (targetButton) {
          targetButton.click();
        }
      }
    }

    // Sorting
    const sortSelect = document.getElementById('SortBy');
    if (sortSelect) {
      sortSelect.addEventListener('change', function() {
        const url = new URL(window.location.href);
        url.searchParams.set('sort_by', this.value);
        window.location.href = url.href;
      });
    }

    // Filter sidebar toggling
    const filterButton = document.querySelector('.filter-button');
    const filterSidebar = document.getElementById('CollectionFilters');
    const closeFiltersButton = document.querySelector('.close-filters');

    if (filterButton && filterSidebar) {
      filterButton.addEventListener('click', function() {
        const expanded = this.getAttribute('aria-expanded') === 'true';
        this.setAttribute('aria-expanded', !expanded);
        filterSidebar.classList.toggle('active');
        document.body.classList.toggle('filters-open');
      });

      if (closeFiltersButton) {
        closeFiltersButton.addEventListener('click', function() {
          filterButton.setAttribute('aria-expanded', 'false');
          filterSidebar.classList.remove('active');
          document.body.classList.remove('filters-open');
        });
      }

      // Close when clicking outside
      document.addEventListener('click', function(event) {
        if (
          filterSidebar.classList.contains('active') &&
          !filterSidebar.contains(event.target) &&
          !filterButton.contains(event.target)
        ) {
          filterButton.setAttribute('aria-expanded', 'false');
          filterSidebar.classList.remove('active');
          document.body.classList.remove('filters-open');
        }
      });
    }

    // Trauma filter integration with user profile
    if (document.querySelector('.trauma-filter')) {
      // Check if user has completed ritual and has a trauma profile
      const userTrauma = localStorage.getItem('voidbloom_primary_trauma');
      const traumaAffinities = JSON.parse(localStorage.getItem('voidbloom_trauma_affinities') || '{}');

      if (userTrauma) {
        // Add visual indicator to user's primary trauma
        const primaryTraumaOption = document.getElementById(`trauma-${userTrauma}`);
        if (primaryTraumaOption) {
          primaryTraumaOption.parentElement.classList.add('primary-trauma');
        }

        // Set initial affinities based on user profile
        if (Object.keys(traumaAffinities).length > 0) {
          Object.entries(traumaAffinities).forEach(([trauma, affinity]) => {
            const traumaOption = document.getElementById(`trauma-${trauma}`);
            if (traumaOption) {
              traumaOption.parentElement.style.setProperty('--affinity', affinity);
            }
          });
        }

        // Connect to Neural Bus if available
        if (window.NeuralBus) {
          window.NeuralBus.publish('collection:viewed', {
            collection: '{{ collection.title | escape }}',
            userTrauma: userTrauma,
            timestamp: Date.now()
          });
        }
      }

      // Affinity slider
      const affinitySlider = document.getElementById('affinity-threshold');
      if (affinitySlider) {
        affinitySlider.addEventListener('input', function() {
          // Visual feedback
          affinitySlider.style.setProperty('--threshold', this.value + '%');

          // In a real implementation, this would update product visibility
          // based on the trauma affinity threshold
        });
      }
    }

    // Adapt trauma overlay if enabled
    if (document.querySelector('.trauma-overlay.adaptive-overlay')) {
      const overlay = document.querySelector('.trauma-overlay');
      const userTrauma = localStorage.getItem('voidbloom_primary_trauma');

      if (userTrauma && overlay) {
        // Remove all trauma classes
        overlay.classList.remove(
          'trauma-abandonment',
          'trauma-fragmentation',
          'trauma-surveillance',
          'trauma-recursion',
          'trauma-displacement',
          'trauma-dissolution'
        );

        // Add user's trauma class
        overlay.classList.add(`trauma-${userTrauma}`);
      }
    }
  });
</script>
