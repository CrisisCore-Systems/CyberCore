{% comment %}
  Main Cart Section - VoidBloom cart experience
  @MutationCompatible: All Profiles
  @StrategyProfile: quantum-entangled
  @Version: 3.7.1
{% endcomment %}

<div class="main-cart-section trauma-{{ settings.default_trauma_type }}">
  <div class="container">
    <h1 class="cart-title">Memory Archive</h1>

    {% if cart.item_count > 0 %}
      <form action="/cart" method="post" novalidate class="cart-form">
        <div class="cart-header">
          <div class="header-item product">Memory Artifact</div>
          <div class="header-item price">Price</div>
          <div class="header-item quantity">Quantity</div>
          <div class="header-item total">Total</div>
        </div>

        <div class="cart-items">
          {% for item in cart.items %}
            <div class="cart-item" data-trauma-type="{{ item.product.metafields.voidbloom.trauma_type | default: settings.default_trauma_type }}">
              <div class="item-image-title">
                <div class="item-image">
                  <a href="{{ item.url }}">
                    {% if item.image %}
                      <div class="image-container">
                        <img src="{{ item.image | img_url: '120x120', crop: 'center' }}" alt="{{ item.title | escape }}">
                        {% if section.settings.show_memory_resonance %}
                          <div class="image-bloom-effect"></div>
                        {% endif %}
                      </div>
                    {% else %}
                      <div class="image-placeholder"></div>
                    {% endif %}
                  </a>
                </div>

                <div class="item-title-options">
                  <h3 class="item-title">
                    <a href="{{ item.url }}">{{ item.product.title }}</a>
                  </h3>

                  {% if item.product.has_only_default_variant == false %}
                    <div class="item-variant">
                      {% for option in item.product.options %}
                        <div class="item-option">
                          <span class="option-name">{{ option }}:</span>
                          <span class="option-value">{{ item.variant.options[forloop.index0] }}</span>
                        </div>
                      {% endfor %}
                    </div>
                  {% endif %}

                  {% if section.settings.show_memory_resonance %}
                    <div class="trauma-indicator">
                      <span class="indicator-label">Memory Encoding:</span>
                      <span class="indicator-value">{{ item.product.metafields.voidbloom.trauma_type | default: settings.default_trauma_type | capitalize }}</span>
                    </div>
                  {% endif %}

                  <a href="/cart/change?line={{ forloop.index }}&quantity=0" class="remove-item">Remove</a>
                </div>
              </div>

              <div class="item-price">
                {% if item.original_price != item.final_price %}
                  <span class="original-price">{{ item.original_price | money }}</span>
                  <span class="final-price">{{ item.final_price | money }}</span>
                {% else %}
                  <span class="final-price">{{ item.price | money }}</span>
                {% endif %}
              </div>

              <div class="item-quantity">
                <div class="quantity-adjust">
                  <button type="button" class="quantity-button decrease" data-line="{{ forloop.index }}">-</button>
                  <input type="number" name="updates[]" value="{{ item.quantity }}" min="1" data-line="{{ forloop.index }}">
                  <button type="button" class="quantity-button increase" data-line="{{ forloop.index }}">+</button>
                </div>
              </div>

              <div class="item-total">
                <span>{{ item.final_line_price | money }}</span>
              </div>
            </div>
          {% endfor %}
        </div>

        <div class="cart-footer">
          <div class="cart-note">
            {% if section.settings.show_note %}
              <label for="CartNote">Memory Note</label>
              <textarea name="note" id="CartNote" placeholder="Add a note to your memory artifacts">{{ cart.note }}</textarea>
            {% endif %}
          </div>

          <div class="cart-totals">
            <div class="subtotal">
              <span class="subtotal-label">Subtotal</span>
              <span class="subtotal-value">{{ cart.total_price | money }}</span>
            </div>

            <div class="shipping-taxes">
              <p>Shipping and taxes calculated at checkout</p>
            </div>

            <div class="cart-actions">
              <button type="submit" name="update" class="update-cart">Update Memory Archive</button>

              {% if section.settings.show_quantum_checkout %}
                <button type="submit" name="checkout" class="quantum-checkout">
                  {{ section.settings.quantum_checkout_text | default: "Quantum Checkout" }}
                </button>
              {% else %}
                <button type="submit" name="checkout" class="checkout">Checkout</button>
              {% endif %}
            </div>
          </div>
        </div>
      </form>
    {% else %}
      <div class="empty-cart">
        <div class="empty-cart-message">
          <h2>Your Memory Archive is Empty</h2>
          <p>You haven't added any memory artifacts to your archive yet.</p>
          <a href="/collections/all" class="continue-shopping">Explore Memory Artifacts</a>
        </div>
      </div>
    {% endif %}

    {% if section.settings.show_memory_resonance and cart.item_count > 0 %}
      <div class="resonance-analysis">
        <h2>Memory Resonance Analysis</h2>
        <div class="resonance-container">
          <div class="resonance-visualization" id="ResonanceVisualization">
            <!-- Visualization will be rendered by script -->
          </div>
          <div class="resonance-description">
            <p>Your current memory artifacts create a {{settings.default_trauma_type}} resonance pattern. This configuration may influence how you process traumatic memory structures.</p>
          </div>
        </div>
      </div>
    {% endif %}
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Quantity adjustment
    const decreaseButtons = document.querySelectorAll('.quantity-button.decrease');
    const increaseButtons = document.querySelectorAll('.quantity-button.increase');
    const quantityInputs = document.querySelectorAll('.item-quantity input');

    decreaseButtons.forEach(button => {
      button.addEventListener('click', function() {
        const line = this.getAttribute('data-line');
        const input = document.querySelector(`.item-quantity input[data-line="${line}"]`);
        let quantity = parseInt(input.value);

        if (quantity > 1) {
          quantity--;
          input.value = quantity;
          updateCart(line, quantity);
        }
      });
    });

    increaseButtons.forEach(button => {
      button.addEventListener('click', function() {
        const line = this.getAttribute('data-line');
        const input = document.querySelector(`.item-quantity input[data-line="${line}"]`);
        let quantity = parseInt(input.value);

        quantity++;
        input.value = quantity;
        updateCart(line, quantity);
      });
    });

    quantityInputs.forEach(input => {
      input.addEventListener('change', function() {
        const line = this.getAttribute('data-line');
        const quantity = parseInt(this.value);

        if (quantity >= 1) {
          updateCart(line, quantity);
        } else {
          this.value = 1;
        }
      });
    });

    // Cart update function (using fetch API)
    function updateCart(line, quantity) {
      fetch('/cart/change.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          line: parseInt(line),
          quantity: quantity
        })
      })
      .then(response => response.json())
      .then(cart => {
        // Update cart totals
        document.querySelector('.subtotal-value').textContent = formatMoney(cart.total_price);

        // Update line item total
        const lineItem = cart.items[parseInt(line) - 1];
        if (lineItem) {
          const itemTotal = document.querySelectorAll('.item-total')[parseInt(line) - 1];
          if (itemTotal) {
            itemTotal.querySelector('span').textContent = formatMoney(lineItem.final_line_price);
          }
        }

        // Trigger a custom event for other scripts that might need to know about the cart update
        document.dispatchEvent(new CustomEvent('cart:updated', { detail: { cart: cart } }));
      })
      .catch(error => {
        console.error('Error updating cart:', error);
      });
    }

    // Money format helper
    function formatMoney(cents) {
      const value = (cents / 100).toFixed(2);
      return '$' + value;
    }

    // Memory resonance visualization
    if (document.getElementById('ResonanceVisualization') && window.QEARWebGLBridge) {
      // Get all trauma types from cart items
      const cartItems = document.querySelectorAll('.cart-item');
      const traumaTypes = Array.from(cartItems).map(item =>
        item.getAttribute('data-trauma-type') || '{{ settings.default_trauma_type }}'
      );

      // Initialize visualization
      const qearBridge = new QEARWebGLBridge({
        targetSelector: '#ResonanceVisualization',
        traumaType: traumaTypes.length > 0 ? traumaTypes[0] : '{{ settings.default_trauma_type }}',
        intensity: {{ settings.trauma_intensity }},
        multiTrauma: traumaTypes
      });
      qearBridge.initialize();
    }

    // Bloom effects for cart items
    document.querySelectorAll('.cart-item').forEach(item => {
      const traumaType = item.getAttribute('data-trauma-type');
      const bloomEffect = item.querySelector('.image-bloom-effect');

      if (bloomEffect && traumaType) {
        bloomEffect.style.setProperty('--trauma-color', `var(--trauma-${traumaType}-color)`);
      }
    });
  });
</script>

<style>
  .main-cart-section {
    padding: 60px 0;
  }

  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
  }

  .cart-title {
    font-size: 2.5rem;
    margin-bottom: 40px;
    text-align: center;
  }

  /* Cart Header */
  .cart-header {
    display: grid;
    grid-template-columns: 3fr 1fr 1fr 1fr;
    padding: 15px 0;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    font-weight: 600;
    text-transform: uppercase;
    font-size: 0.9rem;
    letter-spacing: 0.05em;
  }

  .header-item {
    padding: 0 10px;
  }

  /* Cart Items */
  .cart-items {
    margin-bottom: 40px;
  }

  .cart-item {
    display: grid;
    grid-template-columns: 3fr 1fr 1fr 1fr;
    padding: 20px 0;
    border-bottom: 1px solid rgba(255, 255, 255, 0.05);
    align-items: center;
  }

  .item-image-title {
    display: flex;
    align-items: center;
    gap: 20px;
    padding: 0 10px;
  }

  .item-image {
    flex-shrink: 0;
  }

  .image-container {
    position: relative;
    width: 80px;
    height: 80px;
    border-radius: 4px;
    overflow: hidden;
  }

  .image-container img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .image-bloom-effect {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: radial-gradient(
      circle at center,
      var(--trauma-color, var(--trauma-recursion-color)) 0%,
      transparent 70%
    );
    mix-blend-mode: screen;
    opacity: 0.6;
    pointer-events: none;
    --trauma-color: var(--trauma-recursion-color);
  }

  .image-placeholder {
    width: 80px;
    height: 80px;
    background-color: rgba(255, 255, 255, 0.1);
    border-radius: 4px;
  }

  .item-title-options {
    flex-grow: 1;
  }

  .item-title {
    font-size: 1.1rem;
    margin-bottom: 8px;
  }

  .item-title a {
    color: var(--phase-text-color);
    text-decoration: none;
    transition: color 0.3s ease;
  }

  .item-title a:hover {
    color: var(--phase-accent-color);
  }

  .item-variant {
    margin-bottom: 8px;
    font-size: 0.9rem;
  }

  .item-option {
    display: inline-block;
    margin-right: 15px;
  }

  .option-name {
    font-weight: 600;
  }

  .trauma-indicator {
    display: inline-flex;
    align-items: center;
    gap: 5px;
    margin-bottom: 10px;
    font-size: 0.9rem;
  }

  .indicator-label {
    font-weight: 600;
  }

  .indicator-value {
    color: var(--phase-accent-color);
  }

  .remove-item {
    font-size: 0.85rem;
    color: rgba(255, 255, 255, 0.6);
    text-decoration: none;
    transition: color 0.3s ease;
  }

  .remove-item:hover {
    color: var(--phase-accent-color);
    text-decoration: underline;
  }

  .item-price, .item-quantity, .item-total {
    padding: 0 10px;
  }

  .original-price {
    display: block;
    text-decoration: line-through;
    font-size: 0.9rem;
    color: rgba(255, 255, 255, 0.6);
  }

  .final-price {
    font-weight: 600;
  }

  /* Quantity Adjustment */
  .quantity-adjust {
    display: flex;
    align-items: center;
    max-width: 120px;
  }

  .quantity-button {
    width: 30px;
    height: 30px;
    background-color: rgba(255, 255, 255, 0.1);
    border: none;
    color: var(--phase-text-color);
    font-size: 1.2rem;
    cursor: pointer;
    transition: background-color 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .quantity-button:hover {
    background-color: rgba(255, 255, 255, 0.2);
  }

  .quantity-adjust input {
    width: 40px;
    height: 30px;
    text-align: center;
    border: none;
    background-color: rgba(255, 255, 255, 0.05);
    color: var(--phase-text-color);
    font-size: 0.9rem;
    -moz-appearance: textfield;
  }

  .quantity-adjust input::-webkit-outer-spin-button,
  .quantity-adjust input::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }

  /* Cart Footer */
  .cart-footer {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 40px;
  }

  /* Cart Note */
  .cart-note {
    padding-right: 20px;
  }

  .cart-note label {
    display: block;
    margin-bottom: 10px;
    font-weight: 600;
  }

  #CartNote {
    width: 100%;
    height: 120px;
    padding: 15px;
    background-color: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 4px;
    color: var(--phase-text-color);
    font-size: 0.9rem;
    resize: vertical;
  }

  /* Cart Totals */
  .cart-totals {
    padding-left: 20px;
    border-left: 1px solid rgba(255, 255, 255, 0.1);
  }

  .subtotal {
    display: flex;
    justify-content: space-between;
    margin-bottom: 15px;
    font-size: 1.2rem;
  }

  .subtotal-label {
    font-weight: 600;
  }

  .shipping-taxes {
    margin-bottom: 20px;
    font-size: 0.9rem;
    color: rgba(255, 255, 255, 0.8);
  }

  .cart-actions {
    display: flex;
    flex-direction: column;
    gap: 15px;
  }

  .update-cart {
    padding: 10px 20px;
    background-color: transparent;
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 4px;
    color: var(--phase-text-color);
    font-size: 0.9rem;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .update-cart:hover {
    background-color: rgba(255, 255, 255, 0.05);
  }

  .checkout, .quantum-checkout {
    padding: 15px 20px;
    border: none;
    border-radius: 4px;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .checkout {
    background-color: var(--phase-accent-color);
    color: var(--phase-background);
  }

  .quantum-checkout {
    background-color: var(--phase-primary-color);
    color: var(--phase-background);
    position: relative;
    overflow: hidden;
  }

  .quantum-checkout::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: radial-gradient(
      circle at center,
      var(--trauma-color, var(--trauma-recursion-color)) 0%,
      transparent 70%
    );
    mix-blend-mode: overlay;
    opacity: 0.6;
    z-index: 1;
    transition: all 0.3s ease;
    --trauma-color: var(--trauma-{{ settings.default_trauma_type }}-color);
  }

  .quantum-checkout::after {
    content: "";
    position: absolute;
    top: -50%;
    left: -50%;
    right: -50%;
    bottom: -50%;
    background: conic-gradient(
      from 0deg,
      var(--trauma-{{ settings.default_trauma_type }}-color) 0%,
      transparent 30%,
      transparent 70%,
      var(--trauma-{{ settings.default_trauma_type }}-color) 100%
    );
    z-index: 0;
    opacity: 0.3;
    animation: rotate-checkout 10s linear infinite;
  }

  .quantum-checkout:hover::before {
    opacity: 0.8;
  }

  .quantum-checkout span {
    position: relative;
    z-index: 2;
  }

  /* Empty Cart */
  .empty-cart {
    text-align: center;
    padding: 60px 0;
  }

  .empty-cart-message h2 {
    font-size: 1.8rem;
    margin-bottom: 15px;
  }

  .empty-cart-message p {
    font-size: 1rem;
    margin-bottom: 30px;
    opacity: 0.8;
  }

  .continue-shopping {
    display: inline-block;
    padding: 15px 30px;
    background-color: var(--phase-accent-color);
    color: var(--phase-background);
    font-size: 1rem;
    font-weight: 600;
    text-decoration: none;
    border-radius: 4px;
    transition: opacity 0.3s ease;
  }

  .continue-shopping:hover {
    opacity: 0.9;
  }

  /* Resonance Analysis */
  .resonance-analysis {
    margin-top: 60px;
    padding-top: 40px;
    border-top: 1px solid rgba(255, 255, 255, 0.1);
  }

  .resonance-analysis h2 {
    font-size: 1.8rem;
    margin-bottom: 30px;
    text-align: center;
  }

  .resonance-container {
    display: flex;
    flex-direction: column;
    gap: 30px;
  }

  @media (min-width: 768px) {
    .resonance-container {
      flex-direction: row;
    }
  }

  .resonance-visualization {
    flex: 1;
    height: 300px;
    background-color: rgba(10, 10, 14, 0.8);
    border-radius: 8px;
    overflow: hidden;
  }

  .resonance-description {
    flex: 1;
    display: flex;
    align-items: center;
  }

  .resonance-description p {
    font-size: 1.1rem;
    line-height: 1.6;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .cart-header {
      display: none;
    }

    .cart-item {
      grid-template-columns: 1fr;
      gap: 20px;
    }

    .item-image-title {
      grid-column: 1 / -1;
    }

    .item-price, .item-quantity, .item-total {
      grid-column: 1 / -1;
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 0;
    }

    .item-price::before {
      content: "Price:";
      font-weight: 600;
    }

    .item-quantity::before {
      content: "Quantity:";
      font-weight: 600;
    }

    .item-total::before {
      content: "Total:";
      font-weight: 600;
    }

    .cart-footer {
      grid-template-columns: 1fr;
    }

    .cart-totals {
      padding-left: 0;
      border-left: none;
      padding-top: 20px;
      border-top: 1px solid rgba(255, 255, 255, 0.1);
    }
  }

  /* Animation Keyframes */
  @keyframes rotate-checkout {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  /* Trauma-specific effects */
  .trauma-abandonment .image-bloom-effect {
    animation: pulse-abandonment 4s ease-in-out infinite;
  }

  .trauma-fragmentation .image-bloom-effect {
    animation: shift-fragmentation 2s linear infinite;
  }

  .trauma-recursion .image-bloom-effect {
    animation: rotate-recursion 6s linear infinite;
  }

  .trauma-surveillance .image-bloom-effect {
    animation: scan-surveillance 3s linear infinite;
  }

  .trauma-displacement .image-bloom-effect {
    animation: shift-displacement 4s ease-in-out infinite;
  }

  .trauma-dissolution .image-bloom-effect {
    animation: dissolve-dissolution 8s ease-in-out infinite;
  }
</style>

{% schema %}
{
  "name": "Main Cart",
  "settings": [
    {
      "type": "checkbox",
      "id": "show_note",
      "label": "Show order note",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_memory_resonance",
      "label": "Show memory resonance",
      "default": true,
      "info": "Show trauma type indicators and resonance visualization"
    },
    {
      "type": "checkbox",
      "id": "show_quantum_checkout",
      "label": "Show quantum checkout button",
      "default": true
    },
    {
      "type": "text",
      "id": "quantum_checkout_text",
      "label": "Quantum checkout button text",
      "default": "Quantum Checkout"
    }
  ],
  "presets": [
    {
      "name": "Main Cart",
      "category": "Cart"
    }
  ]
}
{% endschema %}
