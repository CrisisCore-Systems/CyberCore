{% comment %}
@MutationCompatible: All Variants
@StrategyProfile: quantum-entangled
@Version: 2.0.0
{% endcomment %}

<footer class="site-footer" data-section-id="{{ section.id }}" data-section-type="footer-section">
  <div class="footer-upper">
    <div class="container">
      <div class="footer-grid">
        <!-- Footer logo and info -->
        {% if section.settings.show_footer_logo or section.settings.show_company_info %}
          <div class="footer-column footer-branding">
            {% if section.settings.show_footer_logo %}
              <div class="footer-logo">
                {% if section.settings.footer_logo != blank %}
                  <img 
                    src="{{ section.settings.footer_logo | img_url: 'medium' }}" 
                    alt="{{ shop.name | escape }}" 
                    loading="lazy"
                    width="{{ section.settings.footer_logo_width }}"
                    height="auto"
                    class="footer-logo-image"
                  >
                {% else %}
                  <span class="footer-logo-text">{{ shop.name }}</span>
                {% endif %}
              </div>
            {% endif %}
            
            {% if section.settings.show_company_info %}
              <div class="footer-company-info">
                {{ section.settings.company_info }}
              </div>
            {% endif %}
          </div>
        {% endif %}
        
        <!-- Footer nav menus -->
        {% for block in section.blocks %}
          {% case block.type %}
            {% when 'link_list' %}
              <div class="footer-column footer-links" {{ block.shopify_attributes }}>
                {% if block.settings.title != blank %}
                  <h2 class="footer-heading">{{ block.settings.title }}</h2>
                {% endif %}
                
                {% if block.settings.menu != blank %}
                  <ul class="footer-menu">
                    {% for link in block.settings.menu.links %}
                      <li class="footer-menu-item">
                        <a href="{{ link.url }}" class="footer-link {% if link.active %}active{% endif %}">
                          {{ link.title }}
                        </a>
                      </li>
                    {% endfor %}
                  </ul>
                {% endif %}
              </div>
            
            {% when 'text' %}
              <div class="footer-column footer-text" {{ block.shopify_attributes }}>
                {% if block.settings.title != blank %}
                  <h2 class="footer-heading">{{ block.settings.title }}</h2>
                {% endif %}
                
                {% if block.settings.text != blank %}
                  <div class="footer-text-content">
                    {{ block.settings.text }}
                  </div>
                {% endif %}
              </div>
            
            {% when 'newsletter' %}
              <div class="footer-column footer-newsletter" {{ block.shopify_attributes }}>
                {% if block.settings.title != blank %}
                  <h2 class="footer-heading">{{ block.settings.title }}</h2>
                {% endif %}
                
                {% if block.settings.subtext != blank %}
                  <div class="footer-newsletter-text">{{ block.settings.subtext }}</div>
                {% endif %}
                
                <div class="footer-newsletter-form">
                  {% form 'customer', id: 'newsletter-form', class: 'newsletter-form' %}
                    <input type="hidden" name="contact[tags]" value="newsletter">
                    
                    <div class="newsletter-field-wrapper">
                      <label for="NewsletterEmail" class="visually-hidden">{{ 'newsletter.label' | t }}</label>
                      <input 
                        type="email" 
                        name="contact[email]" 
                        id="NewsletterEmail" 
                        class="newsletter-input" 
                        placeholder="{{ block.settings.placeholder | default: 'newsletter.placeholder' | t }}" 
                        required 
                        autocomplete="email"
                      >
                      <button type="submit" class="newsletter-submit">
                        <span class="newsletter-submit-text">{{ block.settings.button_text | default: 'newsletter.button_label' | t }}</span>
                      </button>
                    </div>
                    
                    {%- if form.errors -%}
                      <div class="newsletter-error form-error">
                        {{ form.errors | default_errors }}
                      </div>
                    {%- endif -%}
                    
                    {%- if form.posted_successfully? -%}
                      <div class="newsletter-success">
                        {{ 'newsletter.success' | t }}
                      </div>
                    {%- endif -%}
                  {% endform %}
                </div>
              </div>
          {% endcase %}
        {% endfor %}
      </div>
    </div>
  </div>
  
  <!-- Neural grid effect -->
  {% if section.settings.show_neural_grid %}
    <div class="footer-neural-grid" data-trauma-encoding="{{ section.settings.neural_grid_encoding }}">
      <div class="neural-node node-1"></div>
      <div class="neural-node node-2"></div>
      <div class="neural-node node-3"></div>
      <div class="neural-path path-1"></div>
      <div class="neural-path path-2"></div>
    </div>
  {% endif %}
  
  <!-- Footer bottom -->
  <div class="footer-lower">
    <div class="container">
      <!-- Payment methods -->
      {% if section.settings.show_payment_icons %}
        <div class="footer-payment-icons">
          {% for type in shop.enabled_payment_types %}
            {{ type | payment_type_svg_tag: class: 'payment-icon' }}
          {% endfor %}
        </div>
      {% endif %}
      
      <!-- Copyright -->
      <div class="footer-copyright">
        {% if section.settings.copyright_text != blank %}
          {{ section.settings.copyright_text }}
        {% else %}
          &copy; {{ 'now' | date: '%Y' }} {{ shop.name }}. {{ 'general.copyright' | t }}
        {% endif %}
      </div>
      
      <!-- Shopify attribution -->
      {% if section.settings.show_shopify_attribution %}
        <div class="footer-attribution">
          <a href="https://www.shopify.com" rel="nofollow" target="_blank">
            {{ 'general.powered_by_shopify_html' | t }}
          </a>
        </div>
      {% endif %}
    </div>
  </div>
</footer>

{% schema %}
{
  "name": "Footer",
  "settings": [
    {
      "type": "header",
      "content": "Brand Information"
    },
    {
      "type": "checkbox",
      "id": "show_footer_logo",
      "label": "Show footer logo",
      "default": true
    },
    {
      "type": "image_picker",
      "id": "footer_logo",
      "label": "Footer logo"
    },
    {
      "type": "range",
      "id": "footer_logo_width",
      "min": 50,
      "max": 200,
      "step": 10,
      "unit": "px",
      "label": "Custom logo width",
      "default": 120
    },
    {
      "type": "checkbox",
      "id": "show_company_info",
      "label": "Show company info",
      "default": true
    },
    {
      "type": "richtext",
      "id": "company_info",
      "label": "Company info",
      "default": "<p>VoidBloom is an encoding framework for trauma-responsive digital products. We create products that adapt to your unique memory framework.</p>"
    },
    {
      "type": "header",
      "content": "Neural Grid Effect"
    },
    {
      "type": "checkbox",
      "id": "show_neural_grid",
      "label": "Show neural connection grid",
      "default": true
    },
    {
      "type": "select",
      "id": "neural_grid_encoding",
      "label": "Neural grid encoding",
      "options": [
        {
          "value": "abandonment",
          "label": "Abandonment"
        },
        {
          "value": "fragmentation",
          "label": "Fragmentation"
        },
        {
          "value": "surveillance",
          "label": "Surveillance"
        },
        {
          "value": "recursion",
          "label": "Recursion"
        },
        {
          "value": "displacement",
          "label": "Displacement"
        },
        {
          "value": "dissolution",
          "label": "Dissolution"
        },
        {
          "value": "adaptive",
          "label": "Adaptive (User-Specific)"
        }
      ],
      "default": "adaptive"
    },
    {
      "type": "header",
      "content": "Footer Bottom"
    },
    {
      "type": "checkbox",
      "id": "show_payment_icons",
      "label": "Show payment icons",
      "default": true
    },
    {
      "type": "text",
      "id": "copyright_text",
      "label": "Copyright text",
      "info": "Leave blank to use default"
    },
    {
      "type": "checkbox",
      "id": "show_shopify_attribution",
      "label": "Show Shopify attribution",
      "default": true
    }
  ],
  "blocks": [
    {
      "type": "link_list",
      "name": "Menu",
      "settings": [
        {
          "type": "text",
          "id": "title",
          "label": "Heading",
          "default": "Quick links"
        },
        {
          "type": "link_list",
          "id": "menu",
          "label": "Menu",
          "default": "footer"
        }
      ]
    },
    {
      "type": "text",
      "name": "Text",
      "settings": [
        {
          "type": "text",
          "id": "title",
          "label": "Heading",
          "default": "VoidBloom Memory System"
        },
        {
          "type": "richtext",
          "id": "text",
          "label": "Text",
          "default": "<p>Each VoidBloom product contains an encoding of traumatic memory that resonates with your own patterns, creating a bridge between conscious experience and latent knowledge.</p>"
        }
      ]
    },
    {
      "type": "newsletter",
      "name": "Newsletter",
      "limit": 1,
      "settings": [
        {
          "type": "text",
          "id": "title",
          "label": "Heading",
          "default": "Join our memory network"
        },
        {
          "type": "richtext",
          "id": "subtext",
          "label": "Subtext",
          "default": "<p>Subscribe to receive updates, access to exclusive memory drops, and more.</p>"
        },
        {
          "type": "text",
          "id": "placeholder",
          "label": "Email placeholder text",
          "default": "Enter your email"
        },
        {
          "type": "text",
          "id": "button_text",
          "label": "Button text",
          "default": "Subscribe"
        }
      ]
    }
  ],
  "default": {
    "settings": {},
    "blocks": [
      {
        "type": "link_list"
      },
      {
        "type": "text"
      },
      {
        "type": "newsletter"
      }
    ]
  }
}
{% endschema %}

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Neural grid behavior based on encoding
    const neuralGrid = document.querySelector('.footer-neural-grid');
    if (neuralGrid) {
      let encoding = neuralGrid.getAttribute('data-trauma-encoding');
      
      // If adaptive, use user's primary trauma if available
      if (encoding === 'adaptive') {
        const userTrauma = localStorage.getItem('voidbloom_primary_trauma');
        if (userTrauma) {
          encoding = userTrauma;
          neuralGrid.setAttribute('data-trauma-encoding', encoding);
        }
      }
      
      // Apply different animation behaviors based on encoding
      const nodes = neuralGrid.querySelectorAll('.neural-node');
      const paths = neuralGrid.querySelectorAll('.neural-path');
      
      switch(encoding) {
        case 'abandonment':
          // Nodes drift apart slowly
          nodes.forEach(node => node.classList.add('drift-apart'));
          break;
        case 'fragmentation':
          // Nodes pulse at different frequencies
          nodes.forEach((node, i) => {
            node.classList.add('pulse');
            node.style.animationDuration = (1 + i * 0.5) + 's';
          });
          break;
        case 'surveillance':
          // Nodes scan with beam-like effect
          nodes.forEach(node => node.classList.add('scan'));
          break;
        case 'recursion':
          // Nodes and paths create looping patterns
          neuralGrid.classList.add('recursive-pattern');
          break;
        case 'displacement':
          // Nodes occasionally jump positions
          nodes.forEach(node => node.classList.add('displace'));
          break;
        case 'dissolution':
          // Nodes and paths fade in and out
          neuralGrid.classList.add('dissolve');
          break;
      }
    }
    
    // Connect to Neural Bus if available
    if (window.NeuralBus) {
      // Listen for trauma type changes
      window.NeuralBus.subscribe('ritual:completed', function(data) {
        if (data && data.primaryTrauma && neuralGrid) {
          neuralGrid.setAttribute('data-trauma-encoding', data.primaryTrauma);
          
          // Refresh the page to apply new encoding visuals
          // In a real implementation, you would dynamically update without refresh
          location.reload();
        }
      });
    }
  });
</script>