{% comment %}
  Product Template - Core memory encoding template for VoidBloom artifacts
  @MutationCompatible: All Profiles
  @StrategyProfile: quantum-entangled
  @Version: 3.7.1
{% endcomment %}

<div class="product-template phase-{{ product.metafields.voidbloom.memory_phase | default: settings.default_memory_phase }}" 
     data-product-id="{{ product.id }}">
  
  <div class="memory-artifact-container trauma-{{ product.metafields.voidbloom.trauma_type | default: settings.default_trauma_type }}">
    <div class="artifact-gallery">
      <div class="gallery-container" data-trauma="{{ product.metafields.voidbloom.trauma_type | default: settings.default_trauma_type }}">
        {% for media in product.media %}
          <div class="gallery-item{% if forloop.first %} active{% endif %}" 
               data-media-id="{{ media.id }}"
               data-trauma-intensity="{{ product.metafields.voidbloom.intensity | default: settings.trauma_intensity }}">
            {% case media.media_type %}
              {% when 'image' %}
                <div class="image-container">
                  <img src="{{ media.preview_image | img_url: 'large' }}" 
                       alt="{{ media.alt | escape }}"
                       class="artifact-image"
                       loading="lazy"
                       width="{{ media.width }}"
                       height="{{ media.height }}">
                  <div class="trauma-overlay" data-trauma="{{ product.metafields.voidbloom.trauma_type | default: settings.default_trauma_type }}"></div>
                </div>
              {% when 'video' %}
                <div class="video-container">
                  {{ media | media_tag: autoplay: section.settings.loop_videos, loop: section.settings.loop_videos, controls: true, preload: "auto" }}
                  <div class="trauma-overlay" data-trauma="{{ product.metafields.voidbloom.trauma_type | default: settings.default_trauma_type }}"></div>
                </div>
              {% when 'external_video' %}
                <div class="video-container">
                  {{ media | media_tag: autoplay: section.settings.loop_videos, loop: section.settings.loop_videos }}
                  <div class="trauma-overlay" data-trauma="{{ product.metafields.voidbloom.trauma_type | default: settings.default_trauma_type }}"></div>
                </div>
              {% when 'model' %}
                <div class="model-container">
                  {{ media | media_tag }}
                  <div class="trauma-overlay" data-trauma="{{ product.metafields.voidbloom.trauma_type | default: settings.default_trauma_type }}"></div>
                </div>
            {% endcase %}
          </div>
        {% endfor %}
        
        <div class="gallery-controls">
          <button class="gallery-prev" aria-label="Previous image">{% render 'icon-chevron-left' %}</button>
          <button class="gallery-next" aria-label="Next image">{% render 'icon-chevron-right' %}</button>
        </div>
      </div>
      
      {% if product.media.size > 1 %}
        <div class="gallery-thumbnails">
          {% for media in product.media %}
            <div class="gallery-thumbnail{% if forloop.first %} active{% endif %}" 
                 data-media-id="{{ media.id }}">
              <img src="{{ media.preview_image | img_url: 'small' }}" 
                   alt="{{ media.alt | escape }}"
                   loading="lazy"
                   width="{{ media.preview_image.width }}"
                   height="{{ media.preview_image.height }}">
            </div>
          {% endfor %}
        </div>
      {% endif %}
    </div>
    
    <div class="artifact-details">
      <div class="artifact-meta">
        {% if section.settings.show_vendor %}
          <span class="artifact-vendor">{{ product.vendor }}</span>
        {% endif %}
        <div class="trauma-indicators">
          <div class="trauma-badge {{ product.metafields.voidbloom.trauma_type | default: settings.default_trauma_type }}">
            {{ product.metafields.voidbloom.trauma_type | default: settings.default_trauma_type | capitalize }}
          </div>
          <div class="phase-badge {{ product.metafields.voidbloom.memory_phase | default: settings.default_memory_phase }}">
            {{ product.metafields.voidbloom.memory_phase | default: settings.default_memory_phase | replace: '-', ' ' | capitalize }}
          </div>
        </div>
      </div>
      
      <h1 class="artifact-title bloom-text" data-trauma="{{ product.metafields.voidbloom.trauma_type | default: settings.default_trauma_type }}">
        {{ product.title }}
      </h1>
      
      <div class="artifact-price">
        {% if product.compare_at_price > product.price %}
          <span class="price-item price-item--regular" data-regular-price>
            {{ product.compare_at_price | money }}
          </span>
          <span class="price-item price-item--sale" data-sale-price>
            {{ product.price | money }}
          </span>
        {% else %}
          <span class="price-item" data-regular-price>
            {{ product.price | money }}
          </span>
        {% endif %}
      </div>
      
      <div class="memory-encoding-details">
        <div class="encoding-metrics">
          <div class="encoding-metric trauma-intensity">
            <div class="metric-label">Trauma Intensity</div>
            <div class="metric-bar">
              <div class="metric-fill" style="width: {{ product.metafields.voidbloom.intensity | default: settings.trauma_intensity | times: 100 }}%"></div>
            </div>
            <div class="metric-value">{{ product.metafields.voidbloom.intensity | default: settings.trauma_intensity | times: 100 | round }}%</div>
          </div>
          
          <div class="encoding-metric resonance-level">
            <div class="metric-label">Resonance</div>
            <div class="metric-bar">
              <div class="metric-fill" style="width: {{ product.metafields.voidbloom.resonance | default: 0.5 | times: 100 }}%"></div>
            </div>
            <div class="metric-value">{{ product.metafields.voidbloom.resonance | default: 0.5 | times: 100 | round }}%</div>
          </div>
        </div>
        
        {% if product.metafields.voidbloom.encoding_description != blank %}
          <div class="encoding-description">
            {{ product.metafields.voidbloom.encoding_description }}
          </div>
        {% else %}
          <div class="encoding-description">
            {{ section.settings.default_memory_description }}
          </div>
        {% endif %}
      </div>
      
      <form method="post" action="/cart/add" class="product-form" id="product-form-{{ product.id }}">
        {% unless product.has_only_default_variant %}
          <div class="variant-selectors">
            {% for option in product.options_with_values %}
              <div class="selector-wrapper">
                <label for="Option-{{ section.id }}-{{ option.position }}">
                  {{ option.name }}
                </label>
                <select id="Option-{{ section.id }}-{{ option.position }}" 
                        class="variant-selector" 
                        name="options[{{ option.name | escape }}]">
                  {% for value in option.values %}
                    <option value="{{ value | escape }}"
                            {% if option.selected_value == value %}selected="selected"{% endif %}>
                      {{ value }}
                    </option>
                  {% endfor %}
                </select>
              </div>
            {% endfor %}
          </div>
        {% endunless %}
        
        <input type="hidden" name="id" value="{{ product.selected_or_first_available_variant.id }}">
        
        <div class="product-form-buttons">
          <button type="submit" 
                  class="button memory-archive-button trauma-{{ product.metafields.voidbloom.trauma_type | default: settings.default_trauma_type }}"
                  {% unless product.available %}disabled{% endunless %}>
            {% if product.available %}
              {{ 'products.product.add_to_cart' | t }}
            {% else %}
              {{ 'products.product.sold_out' | t }}
            {% endif %}
          </button>
          
          {% if section.settings.show_dynamic_checkout %}
            {{ form | payment_button }}
          {% endif %}
        </div>
      </form>
      
      <div class="artifact-description">
        {{ product.description }}
      </div>
      
      {% if section.settings.show_trauma_indicator %}
        <div class="trauma-compatibility">
          <h3>Memory Compatibility</h3>
          <div class="compatibility-grid">
            {% assign trauma_types = "abandonment,fragmentation,recursion,surveillance,displacement,dissolution" | split: "," %}
            {% for trauma in trauma_types %}
              {% assign compatibility_key = "compatibility_" | append: trauma %}
              {% assign compatibility_value = product.metafields.voidbloom[compatibility_key] | default: 0.5 %}
              <div class="compatibility-item trauma-{{ trauma }}" data-value="{{ compatibility_value }}">
                <div class="compatibility-label">{{ trauma | capitalize }}</div>
                <div class="compatibility-indicator">
                  <div class="indicator-fill" style="width: {{ compatibility_value | times: 100 }}%"></div>
                </div>
              </div>
            {% endfor %}
          </div>
        </div>
      {% endif %}
      
      {% if section.settings.show_memory_tab %}
        <div class="memory-tabs">
          <div class="tabs-navigation">
            <button class="tab-button active" data-tab="description">Description</button>
            <button class="tab-button" data-tab="memory">Memory Encoding</button>
            <button class="tab-button" data-tab="shipping">Shipping</button>
          </div>
          
          <div class="tab-content">
            <div class="tab-panel active" data-panel="description">
              {{ product.description }}
            </div>
            
            <div class="tab-panel" data-panel="memory">
              <div class="memory-narrative">
                <h3>Memory Narrative</h3>
                {% if product.metafields.voidbloom.narrative != blank %}
                  <div class="narrative-content">
                    {{ product.metafields.voidbloom.narrative }}
                  </div>
                {% else %}
                  <div class="narrative-content generated">
                    <p class="trauma-{{ product.metafields.voidbloom.trauma_type | default: settings.default_trauma_type }}">
                      This memory artifact embodies {{ product.metafields.voidbloom.trauma_type | default: settings.default_trauma_type }} trauma at 
                      {{ product.metafields.voidbloom.intensity | default: settings.trauma_intensity | times: 100 | round }}% intensity, creating a
                      {% case product.metafields.voidbloom.trauma_type | default: settings.default_trauma_type %}
                        {% when 'abandonment' %}
                          sense of isolation and vast emptiness that resonates with experiences of being left behind.
                        {% when 'fragmentation' %}
                          fractured sense of self, with elements that never quite form a coherent whole.
                        {% when 'recursion' %}
                          looping pattern of thought that cycles back through the same emotional states.
                        {% when 'surveillance' %}
                          feeling of being continuously observed and evaluated by systems beyond your control.
                        {% when 'displacement' %}
                          sense of dislocation and environmental estrangement, as if transplanted from your original context.
                        {% when 'dissolution' %}
                          progressive erosion of boundaries between self and other, creating a troubling loss of identity.
                        {% else %}
                          complex emotional resonance that defies simple categorization.
                      {% endcase %}
                    </p>
                    
                    {% if product.metafields.voidbloom.memory_phase | default: settings.default_memory_phase == 'cyber-lotus' %}
                      <p>This artifact belongs to the Cyber Lotus phase, characterized by angular, electric, digital aesthetics that embody the crystalline geometry of traumatic memory structures.</p>
                    {% elsif product.metafields.voidbloom.memory_phase | default: settings.default_memory_phase == 'alien-flora' %}
                      <p>This artifact belongs to the Alien Flora phase, characterized by organic, growing, parasitic aesthetics that embody the invasive qualities of trauma as it takes root.</p>
                    {% elsif product.metafields.voidbloom.memory_phase | default: settings.default_memory_phase == 'rolling-virus' %}
                      <p>This artifact belongs to the Rolling Virus phase, characterized by infectious, spreading, corrupting aesthetics that embody trauma's tendency to propagate through memory systems.</p>
                    {% endif %}
                  </div>
                {% endif %}
              </div>
            </div>
            
            <div class="tab-panel" data-panel="shipping">
              <h3>Shipping Information</h3>
              <p>Memory artifacts are shipped through secure quantum channels to prevent trauma degradation during transit. All items ship within 2-3 business days.</p>
              <p>For more information on how we preserve memory integrity during shipping, please see our <a href="/pages/memory-preservation">Memory Preservation Guide</a>.</p>
            </div>
          </div>
        </div>
      {% endif %}
    </div>
  </div>
  
  {% if section.settings.show_related_products %}
    <div class="related-memories-section">
      <h2>{{ section.settings.related_products_title }}</h2>
      <div class="related-memories" data-trauma-type="{{ product.metafields.voidbloom.trauma_type | default: settings.default_trauma_type }}">
        <div class="loading-indicator">Loading memory echoes...</div>
      </div>
    </div>
  {% endif %}
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize gallery functionality
    const productGallery = {
      container: document.querySelector('.gallery-container'),
      items: document.querySelectorAll('.gallery-item'),
      thumbnails: document.querySelectorAll('.gallery-thumbnail'),
      prevButton: document.querySelector('.gallery-prev'),
      nextButton: document.querySelector('.gallery-next'),
      currentIndex: 0,
      
      init: function() {
        // Skip if no gallery
        if (!this.container) return;
        
        // Set up event listeners
        if (this.prevButton) {
          this.prevButton.addEventListener('click', this.showPrev.bind(this));
        }
        
        if (this.nextButton) {
          this.nextButton.addEventListener('click', this.showNext.bind(this));
        }
        
        // Thumbnail clicks
        this.thumbnails.forEach((thumbnail, index) => {
          thumbnail.addEventListener('click', () => this.showItem(index));
        });
        
        // Apply trauma effects
        this.applyTraumaEffects();
      },
      
      showItem: function(index) {
        if (index < 0) index = this.items.length - 1;
        if (index >= this.items.length) index = 0;
        
        this.items.forEach(item => item.classList.remove('active'));
        this.thumbnails.forEach(thumb => thumb.classList.remove('active'));
        
        this.items[index].classList.add('active');
        if (this.thumbnails[index]) {
          this.thumbnails[index].classList.add('active');
        }
        
        this.currentIndex = index;
      },
      
      showNext: function() {
        this.showItem(this.currentIndex + 1);
      },
      
      showPrev: function() {
        this.showItem(this.currentIndex - 1);
      },
      
      applyTraumaEffects: function() {
        // Apply trauma-specific effects to gallery
        if (window.MemoryProtocol) {
          const traumaOverlays = document.querySelectorAll('.trauma-overlay');
          traumaOverlays.forEach(overlay => {
            const traumaType = overlay.getAttribute('data-trauma');
            if (traumaType) {
              MemoryProtocol.visualizeTrauma(overlay, traumaType, 0.4);
            }
          });
        }
      }
    };
    
    // Tab functionality
    const memoryTabs = {
      buttons: document.querySelectorAll('.tab-button'),
      panels: document.querySelectorAll('.tab-panel'),
      
      init: function() {
        if (!this.buttons.length) return;
        
        this.buttons.forEach(button => {
          button.addEventListener('click', this.showTab.bind(this));
        });
      },
      
      showTab: function(e) {
        const tabId = e.target.getAttribute('data-tab');
        
        this.buttons.forEach(btn => btn.classList.remove('active'));
        this.panels.forEach(panel => panel.classList.remove('active'));
        
        e.target.classList.add('active');
        document.querySelector(`.tab-panel[data-panel="${tabId}"]`).classList.add('active');
      }
    };
    
    // Fetch related products
    const relatedMemories = {
      container: document.querySelector('.related-memories'),
      
      init: function() {
        if (!this.container) return;
        
        const traumaType = this.container.getAttribute('data-trauma-type');
        const productId = document.querySelector('.product-template').getAttribute('data-product-id');
        
        if (traumaType && productId) {
          this.fetchRelatedProducts(traumaType, productId);
        }
      },
      
      fetchRelatedProducts: function(traumaType, productId) {
        fetch(`/recommendations/products.json?product_id=${productId}&limit=4&intent=related`)
          .then(response => response.json())
          .then(data => {
            this.renderProducts(data.products, traumaType);
          })
          .catch(err => {
            console.error('Error fetching related products:', err);
            this.container.innerHTML = '<p class="error-message">Memory echoes could not be retrieved</p>';
          });
      },
      
      renderProducts: function(products, traumaType) {
        if (!products || !products.length) {
          this.container.innerHTML = '<p>No related memory artifacts found</p>';
          return;
        }
        
        let html = '<div class="product-grid">';
        
        products.forEach(product => {
          html += `
            <div class="related-product trauma-${traumaType}">
              <a href="${product.url}" class="product-link">
                <div class="product-image-container">
                  <img src="${product.featured_image}" alt="${product.title}" class="product-image">
                  <div class="trauma-overlay" data-trauma="${traumaType}"></div>
                </div>
                <h3 class="product-title">${product.title}</h3>
                <div class="product-price">${product.price_min}</div>
              </a>
            </div>
          `;
        });
        
        html += '</div>';
        this.container.innerHTML = html;
        
        // Apply trauma effects to the related products
        if (window.MemoryProtocol) {
          const traumaOverlays = this.container.querySelectorAll('.trauma-overlay');
          traumaOverlays.forEach(overlay => {
            MemoryProtocol.visualizeTrauma(overlay, traumaType, 0.3);
          });
        }
      }
    };
    
    // Variant selector functionality
    const variantSelector = {
      selectors: document.querySelectorAll('.variant-selector'),
      productForm: document.getElementById(`product-form-{{ product.id }}`),
      variantIdInput: document.querySelector('input[name="id"]'),
      
      init: function() {
        if (!this.selectors.length) return;
        
        // Set up event listeners for variant selectors
        this.selectors.forEach(selector => {
          selector.addEventListener('change', this.updateVariant.bind(this));
        });
      },
      
      updateVariant: function() {
        // Get selected options
        const selectedOptions = [];
        this.selectors.forEach(selector => {
          selectedOptions.push(selector.value);
        });
        
        // Find matching variant
        const variants = {{ product.variants | json }};
        const matchingVariant = variants.find(variant => {
          return variant.options.every((option, index) => option === selectedOptions[index]);
        });
        
        if (matchingVariant) {
          // Update variant ID
          this.variantIdInput.value = matchingVariant.id;
          
          // Update price
          const priceElements = document.querySelectorAll('[data-regular-price]');
          priceElements.forEach(el => {
            el.textContent = Shopify.formatMoney(matchingVariant.price);
          });
          
          // Update availability
          const addToCartButton = this.productForm.querySelector('.memory-archive-button');
          if (matchingVariant.available) {
            addToCartButton.disabled = false;
            addToCartButton.textContent = {{ 'products.product.add_to_cart' | t | json }};
          } else {
            addToCartButton.disabled = true;
            addToCartButton.textContent = {{ 'products.product.sold_out' | t | json }};
          }
        }
      }
    };
    
    // Initialize components
    productGallery.init();
    memoryTabs.init();
    relatedMemories.init();
    variantSelector.init();
    
    // Apply bloom text effect to title
    const titleElement = document.querySelector('.artifact-title');
    if (titleElement) {
      const traumaType = titleElement.getAttribute('data-trauma');
      titleElement.style.setProperty('--bloom-color', `var(--trauma-${traumaType}-color)`);
      titleElement.style.setProperty('--bloom-intensity', '0.6');
    }
    
    // Publish product view event to Neural Bus
    if (window.NeuralBus) {
      NeuralBus.publish('memory:artifact:viewed', {
        id: {{ product.id }},
        title: {{ product.title | json }},
        traumaType: {{ product.metafields.voidbloom.trauma_type | default: settings.default_trauma_type | json }},
        intensity: {{ product.metafields.voidbloom.intensity | default: settings.trauma_intensity | json }},
        memoryPhase: {{ product.metafields.voidbloom.memory_phase | default: settings.default_memory_phase | json }},
        timestamp: Date.now()
      });
    }
  });
</script>

{% schema %}
{
  "name": "Product Template",
  "settings": [
    {
      "type": "checkbox",
      "id": "enable_trauma_coding",
      "label": "Enable trauma coding",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "enable_dimensional_depth",
      "label": "Enable dimensional depth",
      "info": "Adds 3D depth to product images based on trauma intensity",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "loop_videos",
      "label": "Loop product videos",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_vendor",
      "label": "Show product vendor",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_dynamic_checkout",
      "label": "Show dynamic checkout button",
      "info": "Lets customers check out directly from the product page.",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_trauma_indicator",
      "label": "Show trauma compatibility",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_memory_tab",
      "label": "Show memory encoding tab",
      "default": true
    },
    {
      "type": "select",
      "id": "default_trauma_encoding",
      "label": "Default trauma encoding",
      "options": [
        { "value": "abandonment", "label": "Abandonment" },
        { "value": "fragmentation", "label": "Fragmentation" },
        { "value": "recursion", "label": "Recursion" },
        { "value": "surveillance", "label": "Surveillance" },
        { "value": "displacement", "label": "Displacement" },
        { "value": "dissolution", "label": "Dissolution" }
      ],
      "default": "recursion"
    },
    {
      "type": "textarea",
      "id": "default_memory_description",
      "label": "Default memory description",
      "default": "This product carries a trauma encoding pattern, creating pathways through traumatic memory structures. It may resonate especially with those who experience similar patterns in their cognitive and emotional responses."
    },
    {
      "type": "checkbox",
      "id": "show_related_products",
      "label": "Show related products",
      "default": true
    },
    {
      "type": "text",
      "id": "related_products_title",
      "label": "Related products title",
      "default": "Memory Echoes"
    }
  ]
}
{% endschema %}
