{% comment %}
  HOMEPAGE - RECURSIVE RITUAL

  @MutationCompatible: VoidBloom
  @StrategyProfile: quantum-entangled
  @Version: 3.7.1
{% endcomment %}

{% render 'quantum-layer' %}

<div class="template-index">
  <!-- Main content starts -->
  <div class="voidbloom-homepage" data-neural-node data-profile="VoidBloom">
    <div class="void-backdrop"></div>

    <!-- Ritualized Entry -->
    <section class="ritual-entry" id="ritual-entry" data-neural-node data-depth="1">
      <div class="entry-backdrop"></div>
      <div class="entry-content">
        <h1 class="ritual-title glitch-text" data-text="{{ page.title | default: 'VoidBloom' }}">
          {{ page.title | default: 'VoidBloom' }}
        </h1>

        <div class="ritual-subtitle">Memory Archive System</div>

        <div class="entry-description">
          Access the void. Recover lost memories. Integrate trauma signals.
        </div>

        <div class="entry-actions">
          <a href="/collections/all" class="ritual-button primary">
            Explore Memory Artifacts
          </a>

          <button class="ritual-button secondary quantum-trigger" data-mutation="VoidBloom" data-intensity="0.8">
            Initiate Protocol
          </button>
        </div>
      </div>

      <div class="void-particles" id="entry-particles"></div>
    </section>

    <!-- Bloom Protocol -->
    <section class="bloom-protocol" id="bloom-protocol" data-neural-node data-depth="2">
      <div class="section-header">
        <h2 class="section-title">Bloom Protocol</h2>
        <div class="section-line"></div>
      </div>

      <div class="protocol-grid">
        <div class="protocol-step" data-step="1" data-neural-node>
          <div class="step-number">1</div>
          <h3 class="step-title">Memory Acquisition</h3>
          <div class="step-description">Select memory artifacts that resonate with your trauma signature.</div>
        </div>

        <div class="protocol-step" data-step="2" data-neural-node>
          <div class="step-number">2</div>
          <h3 class="step-title">Deep Integration</h3>
          <div class="step-description">Integrate memory fragments through the void network.</div>
        </div>

        <div class="protocol-step" data-step="3" data-neural-node>
          <div class="step-number">3</div>
          <h3 class="step-title">Dimensional Collapse</h3>
          <div class="step-description">Witness the collapse of dimensional barriers as trauma materializes.</div>
        </div>
      </div>
    </section>

    <!-- Signal Wall - Featured Collection -->
    <section class="signal-wall" id="signal-wall" data-neural-node data-depth="3">
      <div class="section-header">
        <h2 class="section-title">Signal Wall</h2>
        <div class="section-line"></div>
      </div>

      <div class="signal-grid">
        {% assign featured_collection = collections.featured %}
        {% if featured_collection.products.size > 0 %}
          {% for product in featured_collection.products limit: 4 %}
            <div class="trauma-card" data-neural-node>
              <a href="{{ product.url }}">
                <div class="trauma-image {% if product.featured_image %}{% else %}placeholder{% endif %}">
                  {% if product.featured_image %}
{% if product.featured_image %}
  <img 
    src="{{ product.featured_image | img_url: '300x300', crop: 'center' }}" 
    width="300" 
    height="300" 
    alt="{{ product.title | escape }}"
    loading="lazy"
    decoding="async">
{% endif %}                  {% endif %}
                  <div class="trauma-depth depth-{{ forloop.index | modulo: 3 | plus: 1 }}"></div>
                </div>
                <h3 class="trauma-title">{{ product.title }}</h3>
                <div class="trauma-price">{{ product.price | money }}</div>
              </a>
            </div>
          {% endfor %}
        {% else %}
          <div class="trauma-card" data-neural-node>
            <div class="trauma-image placeholder">
              <div class="trauma-depth depth-1"></div>
            </div>
            <h3 class="trauma-title">Neural Fragment</h3>
            <div class="trauma-price">$45.00</div>
          </div>

          <div class="trauma-card" data-neural-node>
            <div class="trauma-image placeholder">
              <div class="trauma-depth depth-2"></div>
            </div>
            <h3 class="trauma-title">Memory Shard</h3>
            <div class="trauma-price">$65.00</div>
          </div>

          <div class="trauma-card" data-neural-node>
            <div class="trauma-image placeholder">
              <div class="trauma-depth depth-3"></div>
            </div>
            <h3 class="trauma-title">Void Echo</h3>
            <div class="trauma-price">$85.00</div>
          </div>

          <div class="trauma-card" data-neural-node>
            <div class="trauma-image placeholder">
              <div class="trauma-depth depth-2"></div>
            </div>
            <h3 class="trauma-title">Signal Ripple</h3>
            <div class="trauma-price">$55.00</div>
          </div>
        {% endif %}
      </div>

      <div class="signal-actions">
        <a href="/collections/all" class="ritual-button secondary">
          View All Signals
        </a>
      </div>
    </section>

    <!-- Neural Testimonials -->
    <section class="neural-testimonials" id="neural-testimonials" data-neural-node data-depth="2">
      <div class="section-header">
        <h2 class="section-title">Neural Imprints</h2>
        <div class="section-line"></div>
      </div>

      <div class="testimonial-grid">
        <div class="testimonial-card" data-neural-node>
          <div class="testimonial-content">
            <div class="testimonial-quote">"The quantum entanglement in these products has completely transformed my neural interface experience. Trauma resonance is at peak efficiency."</div>
            <div class="testimonial-author">Alex K.</div>
            <div class="testimonial-verified">Verified Purchase</div>
          </div>
        </div>

        <div class="testimonial-card" data-neural-node>
          <div class="testimonial-content">
            <div class="testimonial-quote">"Memory acquisition has never been this seamless. The dimensional collapse protocols exceed all expectations."</div>
            <div class="testimonial-author">Morgan T.</div>
            <div class="testimonial-verified">Verified Purchase</div>
          </div>
        </div>

        <div class="testimonial-card" data-neural-node>
          <div class="testimonial-content">
            <div class="testimonial-quote">"VoidBloom's artifacts have the highest trauma resonance I've experienced. Fast shipping and perfect integration with my existing void network."</div>
            <div class="testimonial-author">Jamie R.</div>
            <div class="testimonial-verified">Verified Purchase</div>
          </div>
        </div>
      </div>
    </section>
  </div>
  <!-- Main content ends -->
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize Quantum Visualizer for particles if available
    if (window.QuantumVisualizer) {
      const entryParticles = new QuantumVisualizer({
        container: document.getElementById('entry-particles'),
        particleCount: 100,
        colorScheme: 'VoidBloom',
        dimensions: '2d',
        fractalMode: true
      });

      // Generate some initial quantum state data
      const initialData = Array(20).fill().map((_, i) => ({
        id: 'p' + i,
        state: Math.random() > 0.5 ? 'superposition' : 'entangled',
        probability: Math.random(),
        profile: 'VoidBloom'
      }));

      entryParticles.update(initialData);
    }

    // Enable bloom text effects
    const bloomText = document.querySelector('.bloom-text');
    if (bloomText) {
      const traumaType = bloomText.getAttribute('data-trauma') || 'recursion';
      bloomText.style.setProperty('--bloom-color', `var(--trauma-${traumaType}-color)`);
      bloomText.style.setProperty('--bloom-intensity', '0.8');
    }

    // Set up quantum trigger buttons
    const quantumTriggers = document.querySelectorAll('.quantum-trigger');
    quantumTriggers.forEach(trigger => {
      trigger.addEventListener('click', () => {
        const profile = trigger.dataset.mutation || 'VoidBloom';
        const intensity = parseFloat(trigger.dataset.intensity) || 0.5;

        // Publish mutation event if NeuralBus is available
        if (window.NeuralBus) {
          window.NeuralBus.publish('quantum:mutation', {
            profile,
            intensity,
            source: 'homepage',
            timestamp: Date.now()
          });
        }
      });
    });
  });
</script>